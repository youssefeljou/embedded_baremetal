/*
 * timer.h
 *
 *  Created on: Oct 22, 2022
 *      Author: merna
 */

#ifndef TIMER_H_
#define TIMER_H_

#define TIMER_0	0
#define TIMER_1	1
#define TIMER_2	2

/*         Timer0          */
#define TIMER0_NORMAL                0
#define TIMER0_PWM                   1
#define TIMER0_CTC                   2
#define TIMER0_PWM                   3

#define TIMER0_DISCONNECTED		     0
#define TIMER0_TOGGLE			     1
#define TIMER0_CLEAR			     2
#define TIMER0_SET	         	     3

#define TIMER0_NOCLK                 0
#define TIMER0_CLK                   1
#define TIMER0_CLK8                  2
#define TIMER0_CLK64                 3
#define TIMER0_CLK256                4
#define TIMER0_CLK1024               5


/*         Timer1          */
#define TIMER1_NORMAL                0
#define TIMER1_PWM_8BIT              1
#define TIMER1_PWM_9BIT              2
#define TIMER1_PWM_10BIT             3
#define TIMER1_CTC                   4
#define TIMER1_PWM_FAST_8BIT         5
#define TIMER1_PWM_FAST_9BIT         6
#define TIMER1_PWM_FAST_10BIT        7
#define TIMER1_PWM_FREQ_ICR1         8
#define TIMER1_PWM_FREQ_OCR1A        9
#define TIMER1_PWM_CORRECT_ICR1      10
#define TIMER1_PWM_CORRECT_OCR1A     11
#define TIMER1_CTC_ICR1              12
#define TIMER1_RESERVED              13
#define TIMER1_PWM_FAST_ICR1         14
#define TIMER1_PWM_FAST_OCR1         15

#define TIMER1_DISCONNECTED	     	 0
#define TIMER1_TOGGLE	     		 1
#define TIMER1_CLEAR		     	 2
#define TIMER1_SET	              	 3

#define TIMER1_NOCLK                 0
#define TIMER1_CLK                   1
#define TIMER1_CLK8                  2
#define TIMER1_CLK64                 3
#define TIMER1_CLK256                4
#define TIMER1_CLK1024               5

typedef enum
{
	Timer0_Normal_Mode,
	TIMER0_PHASECORRECT_MODE,
	TIMER0_CTC_MODE,
	TIMER0_FASTPWM_MODE

}Timer0_Modes;

typedef enum
{
	TIMER1_NORMAL_MODE=0,
	TIMER1_CTC_ICR_TOP_MODE,
	TIMER1_CTC_OCRA_TOP_MODE,
	TIMER1_FASTPWM_ICR_TOP_MODE,
	TIMER1_FASTPWM_OCRA_TOP_MODE,
	TIMER1_PHASECORRECT_ICR_MODE,
	TIMER1_PHASECORRECT_OCRA_MODE

}Timer1_Modes;

typedef enum
{
	OCRA_DISCONNECTED=0,
	OCRA_TOGGLE,
	OCRA_NON_INVERTING,
	OCRA_INVERTING

}OC1A_Mode_type;

typedef enum
{
	OCRB_DISCONNECTED=0,
	OCRB_TOGGLE,
	OCRB_NON_INVERTING,
	OCRB_INVERTING

}OC1B_Mode_type;

typedef enum
{
	OCO_DISCONNECTED=0,
	OCO_TOGGLE,
	OCO_NON_INVERTING,
	OCO_INVERTING

}OC0Mode_type;

typedef enum
{
	Timer_Interrupt_Enable,
	Timer_Interrupt_Disable

}Timer_Interrupt;

typedef enum
{
	NO_CLK_SRC,
	NO_PRESCALAR,
	PRESCALAR_CLK8,
	PRESCALAR_CLK64,
	PRESCALAR_CLK256,
	PRESCALAR_CLK1024,
	EXT_CLK_FALLING,
	EXT_CLK_RISING

}Timer_PRESCALAR;

typedef enum{
	RISING,
	FALLING
}ICU_Edge_type;


/***               PROTOTYPE             ***/

/*         TIMER0             */
void Timer0_Init( Timer0_Modes mode,Timer_PRESCALAR scaler,OC0Mode_type oc_mode);
void Timer0_OV_InterruptEnable(void);
void Timer0_OV_InterruptDisable(void);
void Timer0_OC_InterruptEnable(void);
void Timer0_OC_InterruptDisable(void);

/*         TIMER1             */
void Timer1_InputCaptureEdge(ICU_Edge_type edge);
void Timer1_Init( Timer1_Modes mode,Timer_PRESCALAR scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode);

void Timer1_ICU_InterruptEnable(void);
void Timer1_ICU_InterruptDisable(void);
void Timer1_OVF_InterruptEnable(void);
void Timer1_OVF_InterruptDisable(void);
void Timer1_OCA_InterruptEnable(void);
void Timer1_OCA_InterruptDisable(void);
void Timer1_OCB_InterruptEnable(void);
void Timer1_OCB_InterruptDisable(void);
void Timer1_OVF_SetCallBack(void(*ptr)(void));
void Timer1_OCA_SetCallBack(void(*ptr)(void));
void Timer1_OCB_SetCallBack(void(*ptr)(void));
void Timer1_ICU_SetCallBack(void(*ptr)(void));


#endif /* TIMER_H_ */
