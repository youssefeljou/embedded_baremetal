
simonpro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  00003744  000037d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001ba  008001ba  00003932  2**0
                  ALLOC
  3 .stab         00002718  00000000  00000000  00003934  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ecf  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  000070db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  000072eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00009975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000ae55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000c5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
      8a:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ea       	ldi	r26, 0xAB	; 171
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ea       	ldi	r24, 0xAB	; 171
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ea       	ldi	r22, 0xAB	; 171
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ed 54       	subi	r30, 0x4D	; 77
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <GPIO_setupPinDirection+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <GPIO_setupPinDirection+0x8>
     e96:	0f 92       	push	r0
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	6a 83       	std	Y+2, r22	; 0x02
     ea0:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <GPIO_setupPinDirection+0x1c>
     ea8:	d5 c0       	rjmp	.+426    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <GPIO_setupPinDirection+0x24>
     eb0:	d1 c0       	rjmp	.+418    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3d 83       	std	Y+5, r19	; 0x05
     eba:	2c 83       	std	Y+4, r18	; 0x04
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <GPIO_setupPinDirection+0x3a>
     ec6:	43 c0       	rjmp	.+134    	; 0xf4e <GPIO_setupPinDirection+0xc0>
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	22 30       	cpi	r18, 0x02	; 2
     ece:	31 05       	cpc	r19, r1
     ed0:	2c f4       	brge	.+10     	; 0xedc <GPIO_setupPinDirection+0x4e>
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	9d 81       	ldd	r25, Y+5	; 0x05
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	71 f0       	breq	.+28     	; 0xef6 <GPIO_setupPinDirection+0x68>
     eda:	bc c0       	rjmp	.+376    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	22 30       	cpi	r18, 0x02	; 2
     ee2:	31 05       	cpc	r19, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <GPIO_setupPinDirection+0x5a>
     ee6:	5f c0       	rjmp	.+190    	; 0xfa6 <GPIO_setupPinDirection+0x118>
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <GPIO_setupPinDirection+0x66>
     ef2:	85 c0       	rjmp	.+266    	; 0xffe <GPIO_setupPinDirection+0x170>
     ef4:	af c0       	rjmp	.+350    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0x8c>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0x88>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	98 c0       	rjmp	.+304    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f24:	aa e3       	ldi	r26, 0x3A	; 58
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e3       	ldi	r30, 0x3A	; 58
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <GPIO_setupPinDirection+0xb4>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <GPIO_setupPinDirection+0xb0>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	83 c0       	rjmp	.+262    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	a1 f4       	brne	.+40     	; 0xf7c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_setupPinDirection+0xe4>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_setupPinDirection+0xe0>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	6c c0       	rjmp	.+216    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f7c:	a7 e3       	ldi	r26, 0x37	; 55
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e3       	ldi	r30, 0x37	; 55
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_setupPinDirection+0x10c>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_setupPinDirection+0x108>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	57 c0       	rjmp	.+174    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	a1 f4       	brne	.+40     	; 0xfd4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_setupPinDirection+0x13c>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_setupPinDirection+0x138>
     fce:	84 2b       	or	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	40 c0       	rjmp	.+128    	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fd4:	a4 e3       	ldi	r26, 0x34	; 52
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e4 e3       	ldi	r30, 0x34	; 52
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_setupPinDirection+0x164>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_setupPinDirection+0x160>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	2b c0       	rjmp	.+86     	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	a1 f4       	brne	.+40     	; 0x102c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_setupPinDirection+0x194>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_setupPinDirection+0x190>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    102c:	a1 e3       	ldi	r26, 0x31	; 49
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e3       	ldi	r30, 0x31	; 49
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_setupPinDirection+0x1bc>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_setupPinDirection+0x1b8>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <GPIO_writePin+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_writePin+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	6a 83       	std	Y+2, r22	; 0x02
    1076:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	08 f0       	brcs	.+2      	; 0x1080 <GPIO_writePin+0x1c>
    107e:	d5 c0       	rjmp	.+426    	; 0x122a <GPIO_writePin+0x1c6>
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	08 f0       	brcs	.+2      	; 0x1088 <GPIO_writePin+0x24>
    1086:	d1 c0       	rjmp	.+418    	; 0x122a <GPIO_writePin+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3d 83       	std	Y+5, r19	; 0x05
    1090:	2c 83       	std	Y+4, r18	; 0x04
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <GPIO_writePin+0x3a>
    109c:	43 c0       	rjmp	.+134    	; 0x1124 <GPIO_writePin+0xc0>
    109e:	2c 81       	ldd	r18, Y+4	; 0x04
    10a0:	3d 81       	ldd	r19, Y+5	; 0x05
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <GPIO_writePin+0x4e>
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	71 f0       	breq	.+28     	; 0x10cc <GPIO_writePin+0x68>
    10b0:	bc c0       	rjmp	.+376    	; 0x122a <GPIO_writePin+0x1c6>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <GPIO_writePin+0x5a>
    10bc:	5f c0       	rjmp	.+190    	; 0x117c <GPIO_writePin+0x118>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_writePin+0x66>
    10c8:	85 c0       	rjmp	.+266    	; 0x11d4 <GPIO_writePin+0x170>
    10ca:	af c0       	rjmp	.+350    	; 0x122a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_writePin+0x8c>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_writePin+0x88>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	98 c0       	rjmp	.+304    	; 0x122a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10fa:	ab e3       	ldi	r26, 0x3B	; 59
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	eb e3       	ldi	r30, 0x3B	; 59
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <GPIO_writePin+0xb4>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <GPIO_writePin+0xb0>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	83 c0       	rjmp	.+262    	; 0x122a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	a1 f4       	brne	.+40     	; 0x1152 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_writePin+0xe4>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_writePin+0xe0>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	6c c0       	rjmp	.+216    	; 0x122a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1152:	a8 e3       	ldi	r26, 0x38	; 56
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e8 e3       	ldi	r30, 0x38	; 56
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <GPIO_writePin+0x10c>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <GPIO_writePin+0x108>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	57 c0       	rjmp	.+174    	; 0x122a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	a1 f4       	brne	.+40     	; 0x11aa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_writePin+0x13c>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_writePin+0x138>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11aa:	a5 e3       	ldi	r26, 0x35	; 53
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e5 e3       	ldi	r30, 0x35	; 53
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_writePin+0x164>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_writePin+0x160>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	2b c0       	rjmp	.+86     	; 0x122a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	a1 f4       	brne	.+40     	; 0x1202 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_writePin+0x194>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_writePin+0x190>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	14 c0       	rjmp	.+40     	; 0x122a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1202:	a2 e3       	ldi	r26, 0x32	; 50
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e2 e3       	ldi	r30, 0x32	; 50
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <GPIO_writePin+0x1bc>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <GPIO_writePin+0x1b8>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <GPIO_readPin+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <GPIO_readPin+0x8>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    124c:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f0       	brcs	.+2      	; 0x1256 <GPIO_readPin+0x1c>
    1254:	84 c0       	rjmp	.+264    	; 0x135e <GPIO_readPin+0x124>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 30       	cpi	r24, 0x08	; 8
    125a:	08 f0       	brcs	.+2      	; 0x125e <GPIO_readPin+0x24>
    125c:	80 c0       	rjmp	.+256    	; 0x135e <GPIO_readPin+0x124>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3d 83       	std	Y+5, r19	; 0x05
    1266:	2c 83       	std	Y+4, r18	; 0x04
    1268:	4c 81       	ldd	r20, Y+4	; 0x04
    126a:	5d 81       	ldd	r21, Y+5	; 0x05
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	51 05       	cpc	r21, r1
    1270:	79 f1       	breq	.+94     	; 0x12d0 <GPIO_readPin+0x96>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <GPIO_readPin+0x4e>
    127c:	2c 81       	ldd	r18, Y+4	; 0x04
    127e:	3d 81       	ldd	r19, Y+5	; 0x05
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	69 f0       	breq	.+26     	; 0x12a0 <GPIO_readPin+0x66>
    1286:	6b c0       	rjmp	.+214    	; 0x135e <GPIO_readPin+0x124>
    1288:	4c 81       	ldd	r20, Y+4	; 0x04
    128a:	5d 81       	ldd	r21, Y+5	; 0x05
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	51 05       	cpc	r21, r1
    1290:	b9 f1       	breq	.+110    	; 0x1300 <GPIO_readPin+0xc6>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <GPIO_readPin+0x64>
    129c:	49 c0       	rjmp	.+146    	; 0x1330 <GPIO_readPin+0xf6>
    129e:	5f c0       	rjmp	.+190    	; 0x135e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12a0:	e9 e3       	ldi	r30, 0x39	; 57
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_readPin+0x7e>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_readPin+0x7a>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	88 23       	and	r24, r24
    12c4:	19 f0       	breq	.+6      	; 0x12cc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	49 c0       	rjmp	.+146    	; 0x135e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	47 c0       	rjmp	.+142    	; 0x135e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12d0:	e6 e3       	ldi	r30, 0x36	; 54
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <GPIO_readPin+0xae>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <GPIO_readPin+0xaa>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	31 c0       	rjmp	.+98     	; 0x135e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12fc:	19 82       	std	Y+1, r1	; 0x01
    12fe:	2f c0       	rjmp	.+94     	; 0x135e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1300:	e3 e3       	ldi	r30, 0x33	; 51
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_readPin+0xde>
    1314:	55 95       	asr	r21
    1316:	47 95       	ror	r20
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_readPin+0xda>
    131c:	ca 01       	movw	r24, r20
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	88 23       	and	r24, r24
    1324:	19 f0       	breq	.+6      	; 0x132c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	19 c0       	rjmp	.+50     	; 0x135e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    132c:	19 82       	std	Y+1, r1	; 0x01
    132e:	17 c0       	rjmp	.+46     	; 0x135e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1330:	e0 e3       	ldi	r30, 0x30	; 48
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <GPIO_readPin+0x10e>
    1344:	55 95       	asr	r21
    1346:	47 95       	ror	r20
    1348:	8a 95       	dec	r24
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <GPIO_readPin+0x10a>
    134c:	ca 01       	movw	r24, r20
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	90 70       	andi	r25, 0x00	; 0
    1352:	88 23       	and	r24, r24
    1354:	19 f0       	breq	.+6      	; 0x135c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	01 c0       	rjmp	.+2      	; 0x135e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    135c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <GPIO_setupPortDirection+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_setupPortDirection+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	90 f5       	brcc	.+100    	; 0x13ea <GPIO_setupPortDirection+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3c 83       	std	Y+4, r19	; 0x04
    138e:	2b 83       	std	Y+3, r18	; 0x03
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	d1 f0       	breq	.+52     	; 0x13ce <GPIO_setupPortDirection+0x5e>
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	2c f4       	brge	.+10     	; 0x13ae <GPIO_setupPortDirection+0x3e>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <GPIO_setupPortDirection+0x54>
    13ac:	1e c0       	rjmp	.+60     	; 0x13ea <GPIO_setupPortDirection+0x7a>
    13ae:	2b 81       	ldd	r18, Y+3	; 0x03
    13b0:	3c 81       	ldd	r19, Y+4	; 0x04
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <GPIO_setupPortDirection+0x68>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	91 05       	cpc	r25, r1
    13c0:	81 f0       	breq	.+32     	; 0x13e2 <GPIO_setupPortDirection+0x72>
    13c2:	13 c0       	rjmp	.+38     	; 0x13ea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13c4:	ea e3       	ldi	r30, 0x3A	; 58
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	0e c0       	rjmp	.+28     	; 0x13ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13ce:	e7 e3       	ldi	r30, 0x37	; 55
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13d8:	e4 e3       	ldi	r30, 0x34	; 52
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13e2:	e1 e3       	ldi	r30, 0x31	; 49
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <GPIO_writePort+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <GPIO_writePort+0x8>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	90 f5       	brcc	.+100    	; 0x1472 <GPIO_writePort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3c 83       	std	Y+4, r19	; 0x04
    1416:	2b 83       	std	Y+3, r18	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	d1 f0       	breq	.+52     	; 0x1456 <GPIO_writePort+0x5e>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <GPIO_writePort+0x3e>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	61 f0       	breq	.+24     	; 0x144c <GPIO_writePort+0x54>
    1434:	1e c0       	rjmp	.+60     	; 0x1472 <GPIO_writePort+0x7a>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <GPIO_writePort+0x68>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <GPIO_writePort+0x72>
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 83       	st	Z, r24
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
			break;
		}
	}
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_readPort+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_readPort+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    148e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	90 f5       	brcc	.+100    	; 0x14fa <GPIO_readPort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	d1 f0       	breq	.+52     	; 0x14de <GPIO_readPort+0x5e>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <GPIO_readPort+0x3e>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <GPIO_readPort+0x54>
    14bc:	1e c0       	rjmp	.+60     	; 0x14fa <GPIO_readPort+0x7a>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <GPIO_readPort+0x68>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	81 f0       	breq	.+32     	; 0x14f2 <GPIO_readPort+0x72>
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			PINA = port_value;
    14d4:	e9 e3       	ldi	r30, 0x39	; 57
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			PINB = port_value;
    14de:	e6 e3       	ldi	r30, 0x36	; 54
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	80 83       	st	Z, r24
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			PINC = port_value;
    14e8:	e3 e3       	ldi	r30, 0x33	; 51
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			PIND = port_value;
    14f2:	e0 e3       	ldi	r30, 0x30	; 48
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	80 83       	st	Z, r24
			break;
		}
	}
	return port_value;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <INT0_Init>:

#include "interrupt.h"

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	// Configure INT0/PD2 as input pin
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	83 60       	ori	r24, 0x03	; 3
    151e:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
    1520:	ab e5       	ldi	r26, 0x5B	; 91
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e5       	ldi	r30, 0x5B	; 91
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 64       	ori	r24, 0x40	; 64
    152c:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    152e:	af e5       	ldi	r26, 0x5F	; 95
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ef e5       	ldi	r30, 0x5F	; 95
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	8c 93       	st	X, r24
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <LCD_init>:

/* FUNCTION DEFINATION*/

/*Initialize the LCD*/
void LCD_init(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2e 97       	sbiw	r28, 0x0e	; 14
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT );
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	67 e0       	ldi	r22, 0x07	; 7
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 47 07 	call	0xe8e	; 0xe8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID,PIN_OUTPUT );
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	65 e0       	ldi	r22, 0x05	; 5
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 47 07 	call	0xe8e	; 0xe8e <GPIO_setupPinDirection>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 ea       	ldi	r26, 0xA0	; 160
    1570:	b1 e4       	ldi	r27, 0x41	; 65
    1572:	8b 87       	std	Y+11, r24	; 0x0b
    1574:	9c 87       	std	Y+12, r25	; 0x0c
    1576:	ad 87       	std	Y+13, r26	; 0x0d
    1578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	53 e4       	ldi	r21, 0x43	; 67
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	98 87       	std	Y+8, r25	; 0x08
    1596:	a9 87       	std	Y+9, r26	; 0x09
    1598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <LCD_init+0x7a>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <LCD_init+0xf8>
	else if (__tmp > 65535)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <LCD_init+0xda>
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_init+0xc8>
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <LCD_init+0xbc>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_init+0x104>
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);/*DELAY ALWAYS > 15MS*/
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	6f ef       	ldi	r22, 0xFF	; 255
    1652:	0e 94 b8 09 	call	0x1370	; 0x1370 <GPIO_setupPortDirection>
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1656:	88 e3       	ldi	r24, 0x38	; 56
    1658:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_SendCommand>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , PIN_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_SendCommand(LCD_CURSOR_OFF); /* cursor off */
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_SendCommand>
}
    1668:	2e 96       	adiw	r28, 0x0e	; 14
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <LCD_SendCommand>:

/*SEND COMMAND*/

void LCD_SendCommand(uint8 command)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	e9 97       	sbiw	r28, 0x39	; 57
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);/*RS=0*/
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	67 e0       	ldi	r22, 0x07	; 7
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e8       	ldi	r26, 0x80	; 128
    16a0:	bf e3       	ldi	r27, 0x3F	; 63
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	6d a9       	ldd	r22, Y+53	; 0x35
    16ac:	7e a9       	ldd	r23, Y+54	; 0x36
    16ae:	8f a9       	ldd	r24, Y+55	; 0x37
    16b0:	98 ad       	ldd	r25, Y+56	; 0x38
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a e7       	ldi	r20, 0x7A	; 122
    16b8:	53 e4       	ldi	r21, 0x43	; 67
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	89 ab       	std	Y+49, r24	; 0x31
    16c4:	9a ab       	std	Y+50, r25	; 0x32
    16c6:	ab ab       	std	Y+51, r26	; 0x33
    16c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ca:	69 a9       	ldd	r22, Y+49	; 0x31
    16cc:	7a a9       	ldd	r23, Y+50	; 0x32
    16ce:	8b a9       	ldd	r24, Y+51	; 0x33
    16d0:	9c a9       	ldd	r25, Y+52	; 0x34
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <LCD_SendCommand+0x72>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	98 ab       	std	Y+48, r25	; 0x30
    16e8:	8f a7       	std	Y+47, r24	; 0x2f
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    16ec:	69 a9       	ldd	r22, Y+49	; 0x31
    16ee:	7a a9       	ldd	r23, Y+50	; 0x32
    16f0:	8b a9       	ldd	r24, Y+51	; 0x33
    16f2:	9c a9       	ldd	r25, Y+52	; 0x34
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	6d a9       	ldd	r22, Y+53	; 0x35
    1706:	7e a9       	ldd	r23, Y+54	; 0x36
    1708:	8f a9       	ldd	r24, Y+55	; 0x37
    170a:	98 ad       	ldd	r25, Y+56	; 0x38
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	98 ab       	std	Y+48, r25	; 0x30
    172a:	8f a7       	std	Y+47, r24	; 0x2f
    172c:	0f c0       	rjmp	.+30     	; 0x174c <LCD_SendCommand+0xd2>
    172e:	89 e1       	ldi	r24, 0x19	; 25
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9e a7       	std	Y+46, r25	; 0x2e
    1734:	8d a7       	std	Y+45, r24	; 0x2d
    1736:	8d a5       	ldd	r24, Y+45	; 0x2d
    1738:	9e a5       	ldd	r25, Y+46	; 0x2e
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <LCD_SendCommand+0xc0>
    173e:	9e a7       	std	Y+46, r25	; 0x2e
    1740:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8f a5       	ldd	r24, Y+47	; 0x2f
    1744:	98 a9       	ldd	r25, Y+48	; 0x30
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8f a5       	ldd	r24, Y+47	; 0x2f
    174e:	98 a9       	ldd	r25, Y+48	; 0x30
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <LCD_SendCommand+0xb4>
    1754:	14 c0       	rjmp	.+40     	; 0x177e <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	69 a9       	ldd	r22, Y+49	; 0x31
    1758:	7a a9       	ldd	r23, Y+50	; 0x32
    175a:	8b a9       	ldd	r24, Y+51	; 0x33
    175c:	9c a9       	ldd	r25, Y+52	; 0x34
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	98 ab       	std	Y+48, r25	; 0x30
    1768:	8f a7       	std	Y+47, r24	; 0x2f
    176a:	8f a5       	ldd	r24, Y+47	; 0x2f
    176c:	98 a9       	ldd	r25, Y+48	; 0x30
    176e:	9c a7       	std	Y+44, r25	; 0x2c
    1770:	8b a7       	std	Y+43, r24	; 0x2b
    1772:	8b a5       	ldd	r24, Y+43	; 0x2b
    1774:	9c a5       	ldd	r25, Y+44	; 0x2c
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_SendCommand+0xfc>
    177a:	9c a7       	std	Y+44, r25	; 0x2c
    177c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	65 e0       	ldi	r22, 0x05	; 5
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e8       	ldi	r26, 0x80	; 128
    178e:	bf e3       	ldi	r27, 0x3F	; 63
    1790:	8f a3       	std	Y+39, r24	; 0x27
    1792:	98 a7       	std	Y+40, r25	; 0x28
    1794:	a9 a7       	std	Y+41, r26	; 0x29
    1796:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6f a1       	ldd	r22, Y+39	; 0x27
    179a:	78 a5       	ldd	r23, Y+40	; 0x28
    179c:	89 a5       	ldd	r24, Y+41	; 0x29
    179e:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a e7       	ldi	r20, 0x7A	; 122
    17a6:	53 e4       	ldi	r21, 0x43	; 67
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8b a3       	std	Y+35, r24	; 0x23
    17b2:	9c a3       	std	Y+36, r25	; 0x24
    17b4:	ad a3       	std	Y+37, r26	; 0x25
    17b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ba:	7c a1       	ldd	r23, Y+36	; 0x24
    17bc:	8d a1       	ldd	r24, Y+37	; 0x25
    17be:	9e a1       	ldd	r25, Y+38	; 0x26
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <LCD_SendCommand+0x160>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9a a3       	std	Y+34, r25	; 0x22
    17d6:	89 a3       	std	Y+33, r24	; 0x21
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6f a1       	ldd	r22, Y+39	; 0x27
    17f4:	78 a5       	ldd	r23, Y+40	; 0x28
    17f6:	89 a5       	ldd	r24, Y+41	; 0x29
    17f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9a a3       	std	Y+34, r25	; 0x22
    1818:	89 a3       	std	Y+33, r24	; 0x21
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_SendCommand+0x1c0>
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 a3       	std	Y+32, r25	; 0x20
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
    1824:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1826:	98 a1       	ldd	r25, Y+32	; 0x20
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_SendCommand+0x1ae>
    182c:	98 a3       	std	Y+32, r25	; 0x20
    182e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	89 a1       	ldd	r24, Y+33	; 0x21
    183c:	9a a1       	ldd	r25, Y+34	; 0x22
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <LCD_SendCommand+0x1a2>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6b a1       	ldd	r22, Y+35	; 0x23
    1846:	7c a1       	ldd	r23, Y+36	; 0x24
    1848:	8d a1       	ldd	r24, Y+37	; 0x25
    184a:	9e a1       	ldd	r25, Y+38	; 0x26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
    1858:	89 a1       	ldd	r24, Y+33	; 0x21
    185a:	9a a1       	ldd	r25, Y+34	; 0x22
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
    1860:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1862:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_SendCommand+0x1ea>
    1868:	9e 8f       	std	Y+30, r25	; 0x1e
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);/*WRITE COMMAND*/
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	69 ad       	ldd	r22, Y+57	; 0x39
    1870:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePort>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e8       	ldi	r26, 0x80	; 128
    187a:	bf e3       	ldi	r27, 0x3F	; 63
    187c:	89 8f       	std	Y+25, r24	; 0x19
    187e:	9a 8f       	std	Y+26, r25	; 0x1a
    1880:	ab 8f       	std	Y+27, r26	; 0x1b
    1882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	69 8d       	ldd	r22, Y+25	; 0x19
    1886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a e7       	ldi	r20, 0x7A	; 122
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8d 8b       	std	Y+21, r24	; 0x15
    189e:	9e 8b       	std	Y+22, r25	; 0x16
    18a0:	af 8b       	std	Y+23, r26	; 0x17
    18a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_SendCommand+0x24c>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	69 8d       	ldd	r22, Y+25	; 0x19
    18e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9c 8b       	std	Y+20, r25	; 0x14
    1904:	8b 8b       	std	Y+19, r24	; 0x13
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_SendCommand+0x2ac>
    1908:	89 e1       	ldi	r24, 0x19	; 25
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	89 8b       	std	Y+17, r24	; 0x11
    1910:	89 89       	ldd	r24, Y+17	; 0x11
    1912:	9a 89       	ldd	r25, Y+18	; 0x12
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_SendCommand+0x29a>
    1918:	9a 8b       	std	Y+18, r25	; 0x12
    191a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8b 89       	ldd	r24, Y+19	; 0x13
    191e:	9c 89       	ldd	r25, Y+20	; 0x14
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9c 8b       	std	Y+20, r25	; 0x14
    1924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_SendCommand+0x28e>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9c 8b       	std	Y+20, r25	; 0x14
    1942:	8b 8b       	std	Y+19, r24	; 0x13
    1944:	8b 89       	ldd	r24, Y+19	; 0x13
    1946:	9c 89       	ldd	r25, Y+20	; 0x14
    1948:	98 8b       	std	Y+16, r25	; 0x10
    194a:	8f 87       	std	Y+15, r24	; 0x0f
    194c:	8f 85       	ldd	r24, Y+15	; 0x0f
    194e:	98 89       	ldd	r25, Y+16	; 0x10
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_SendCommand+0x2d6>
    1954:	98 8b       	std	Y+16, r25	; 0x10
    1956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e8       	ldi	r26, 0x80	; 128
    1968:	bf e3       	ldi	r27, 0x3F	; 63
    196a:	8b 87       	std	Y+11, r24	; 0x0b
    196c:	9c 87       	std	Y+12, r25	; 0x0c
    196e:	ad 87       	std	Y+13, r26	; 0x0d
    1970:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a e7       	ldi	r20, 0x7A	; 122
    1980:	53 e4       	ldi	r21, 0x43	; 67
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8f 83       	std	Y+7, r24	; 0x07
    198c:	98 87       	std	Y+8, r25	; 0x08
    198e:	a9 87       	std	Y+9, r26	; 0x09
    1990:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_SendCommand+0x33a>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_SendCommand+0x39a>
    19f6:	89 e1       	ldi	r24, 0x19	; 25
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_SendCommand+0x388>
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_SendCommand+0x37c>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_SendCommand+0x3c4>
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif

}
    1a46:	e9 96       	adiw	r28, 0x39	; 57
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <LCD_DisplayChar>:

/*DISPLAY*/

void LCD_DisplayChar(uint8 data)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	e9 97       	sbiw	r28, 0x39	; 57
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);/*RS=1*/
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	67 e0       	ldi	r22, 0x07	; 7
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e8       	ldi	r26, 0x80	; 128
    1a7e:	bf e3       	ldi	r27, 0x3F	; 63
    1a80:	8d ab       	std	Y+53, r24	; 0x35
    1a82:	9e ab       	std	Y+54, r25	; 0x36
    1a84:	af ab       	std	Y+55, r26	; 0x37
    1a86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	89 ab       	std	Y+49, r24	; 0x31
    1aa2:	9a ab       	std	Y+50, r25	; 0x32
    1aa4:	ab ab       	std	Y+51, r26	; 0x33
    1aa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_DisplayChar+0x72>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    1aca:	69 a9       	ldd	r22, Y+49	; 0x31
    1acc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ace:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	8f a7       	std	Y+47, r24	; 0x2f
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_DisplayChar+0xd2>
    1b0c:	89 e1       	ldi	r24, 0x19	; 25
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e a7       	std	Y+46, r25	; 0x2e
    1b12:	8d a7       	std	Y+45, r24	; 0x2d
    1b14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_DisplayChar+0xc0>
    1b1c:	9e a7       	std	Y+46, r25	; 0x2e
    1b1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b22:	98 a9       	ldd	r25, Y+48	; 0x30
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_DisplayChar+0xb4>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	69 a9       	ldd	r22, Y+49	; 0x31
    1b36:	7a a9       	ldd	r23, Y+50	; 0x32
    1b38:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4c:	9c a7       	std	Y+44, r25	; 0x2c
    1b4e:	8b a7       	std	Y+43, r24	; 0x2b
    1b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_DisplayChar+0xfc>
    1b58:	9c a7       	std	Y+44, r25	; 0x2c
    1b5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	65 e0       	ldi	r22, 0x05	; 5
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	bf e3       	ldi	r27, 0x3F	; 63
    1b6e:	8f a3       	std	Y+39, r24	; 0x27
    1b70:	98 a7       	std	Y+40, r25	; 0x28
    1b72:	a9 a7       	std	Y+41, r26	; 0x29
    1b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6f a1       	ldd	r22, Y+39	; 0x27
    1b78:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8b a3       	std	Y+35, r24	; 0x23
    1b90:	9c a3       	std	Y+36, r25	; 0x24
    1b92:	ad a3       	std	Y+37, r26	; 0x25
    1b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCD_DisplayChar+0x160>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <LCD_DisplayChar+0x1de>
	else if (__tmp > 65535)
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <LCD_DisplayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCD_DisplayChar+0x1c0>
    1bfa:	89 e1       	ldi	r24, 0x19	; 25
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
    1c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c04:	98 a1       	ldd	r25, Y+32	; 0x20
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_DisplayChar+0x1ae>
    1c0a:	98 a3       	std	Y+32, r25	; 0x20
    1c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCD_DisplayChar+0x1a2>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <LCD_DisplayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_DisplayChar+0x1ea>
    1c46:	9e 8f       	std	Y+30, r25	; 0x1e
    1c48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);/*OUT COMMAND*/
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	69 ad       	ldd	r22, Y+57	; 0x39
    1c4e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePort>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	89 8f       	std	Y+25, r24	; 0x19
    1c5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8d 8b       	std	Y+21, r24	; 0x15
    1c7c:	9e 8b       	std	Y+22, r25	; 0x16
    1c7e:	af 8b       	std	Y+23, r26	; 0x17
    1c80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_DisplayChar+0x24c>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_DisplayChar+0x2ca>
	else if (__tmp > 65535)
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_DisplayChar+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_DisplayChar+0x2ac>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	89 89       	ldd	r24, Y+17	; 0x11
    1cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_DisplayChar+0x29a>
    1cf6:	9a 8b       	std	Y+18, r25	; 0x12
    1cf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_DisplayChar+0x28e>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_DisplayChar+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
    1d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2c:	98 89       	ldd	r25, Y+16	; 0x10
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_DisplayChar+0x2d6>
    1d32:	98 8b       	std	Y+16, r25	; 0x10
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	65 e0       	ldi	r22, 0x05	; 5
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 32 08 	call	0x1064	; 0x1064 <GPIO_writePin>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	8b 87       	std	Y+11, r24	; 0x0b
    1d4a:	9c 87       	std	Y+12, r25	; 0x0c
    1d4c:	ad 87       	std	Y+13, r26	; 0x0d
    1d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a e7       	ldi	r20, 0x7A	; 122
    1d5e:	53 e4       	ldi	r21, 0x43	; 67
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8f 83       	std	Y+7, r24	; 0x07
    1d6a:	98 87       	std	Y+8, r25	; 0x08
    1d6c:	a9 87       	std	Y+9, r26	; 0x09
    1d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_DisplayChar+0x33a>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <LCD_DisplayChar+0x3b8>
	else if (__tmp > 65535)
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <LCD_DisplayChar+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <LCD_DisplayChar+0x39a>
    1dd4:	89 e1       	ldi	r24, 0x19	; 25
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_DisplayChar+0x388>
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <LCD_DisplayChar+0x37c>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <LCD_DisplayChar+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_DisplayChar+0x3c4>
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif
}
    1e24:	e9 96       	adiw	r28, 0x39	; 57
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_DisplayString>:

/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LCD_DisplayString+0x6>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	0e c0       	rjmp	.+28     	; 0x1e66 <LCD_DisplayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_DisplayChar(Str[i]);
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	80 81       	ld	r24, Z
    1e5c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <LCD_DisplayChar>
		i++;
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	89 83       	std	Y+1, r24	; 0x01
/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	fc 01       	movw	r30, r24
    1e72:	e2 0f       	add	r30, r18
    1e74:	f3 1f       	adc	r31, r19
    1e76:	80 81       	ld	r24, Z
    1e78:	88 23       	and	r24, r24
    1e7a:	39 f7       	brne	.-50     	; 0x1e4a <LCD_DisplayString+0x14>
	{
		LCD_DisplayChar(Str[i]);
		i++;
	}
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <LCD_moveCursor>:

/*WRITE IN IN SPECIFIC ROW*/

void LCD_moveCursor(uint8 row,uint8 col)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <LCD_moveCursor+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <LCD_moveCursor+0x8>
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 83       	std	Y+5, r19	; 0x05
    1ea2:	2c 83       	std	Y+4, r18	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	c1 f0       	breq	.+48     	; 0x1ede <LCD_moveCursor+0x56>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <LCD_moveCursor+0x3a>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <LCD_moveCursor+0x50>
    1ec0:	19 c0       	rjmp	.+50     	; 0x1ef4 <LCD_moveCursor+0x6c>
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	69 f0       	breq	.+26     	; 0x1ee6 <LCD_moveCursor+0x5e>
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <LCD_moveCursor+0x66>
    1ed6:	0e c0       	rjmp	.+28     	; 0x1ef4 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	80 5c       	subi	r24, 0xC0	; 192
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	07 c0       	rjmp	.+14     	; 0x1ef4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	80 5f       	subi	r24, 0xF0	; 240
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	80 5b       	subi	r24, 0xB0	; 176
    1ef2:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	80 68       	ori	r24, 0x80	; 128
    1ef8:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_SendCommand>
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_displayStringRowColumn>:

/*DISPLAY IN SPECIFIC ROW*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_displayStringRowColumn+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_displayStringRowColumn+0x8>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	6a 83       	std	Y+2, r22	; 0x02
    1f1c:	5c 83       	std	Y+4, r21	; 0x04
    1f1e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	6a 81       	ldd	r22, Y+2	; 0x02
    1f24:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_moveCursor>
	LCD_DisplayString(Str);
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_DisplayString>
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <LCD_intgerToString>:

/*NUMBERS*/

void LCD_intgerToString(int data)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	62 97       	sbiw	r28, 0x12	; 18
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	9a 8b       	std	Y+18, r25	; 0x12
    1f54:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); /* 10 for decimal */
    1f56:	89 89       	ldd	r24, Y+17	; 0x11
    1f58:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5a:	9e 01       	movw	r18, r28
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	b9 01       	movw	r22, r18
    1f62:	4a e0       	ldi	r20, 0x0A	; 10
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	0e 94 13 1b 	call	0x3626	; 0x3626 <itoa>
	LCD_DisplayString(str);
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_DisplayString>
}
    1f72:	62 96       	adiw	r28, 0x12	; 18
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_clearScreen>:

/*CLEAR*/

void LCD_clearScreen(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND); /* CLEAR COMMAND */
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_SendCommand>
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <main>:
void loop1(void);
void setup(void);
void start(void);

int main(void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
	INT0_Init();              // Enable external INT0
    1fa0:	0e 94 85 0a 	call	0x150a	; 0x150a <INT0_Init>
	LCD_init();
    1fa4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <LCD_init>
	setup();
    1fa8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <setup>
	start();
    1fac:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <start>
	loop1();
    1fb0:	0e 94 9c 14 	call	0x2938	; 0x2938 <loop1>
    1fb4:	ff cf       	rjmp	.-2      	; 0x1fb4 <main+0x1c>

00001fb6 <setup>:
	{

	}
}
void setup(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2) & ~(1<<PD4) & ~(1<<PD5) & ~(1<<PD6) & ~(1<<PD7));
    1fbe:	a1 e3       	ldi	r26, 0x31	; 49
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e1 e3       	ldi	r30, 0x31	; 49
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8b 70       	andi	r24, 0x0B	; 11
    1fca:	8c 93       	st	X, r24
	DDRC  = DDRC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3);  // Configure pin PC0 in PORTC as output pin
    1fcc:	a4 e3       	ldi	r26, 0x34	; 52
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e4 e3       	ldi	r30, 0x34	; 52
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8f 60       	ori	r24, 0x0F	; 15
    1fd8:	8c 93       	st	X, r24
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3); // Set Value of PIN 0 in PORTC to 1 at the beginning (LED OFF)
    1fda:	a5 e3       	ldi	r26, 0x35	; 53
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e3       	ldi	r30, 0x35	; 53
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 60       	ori	r24, 0x0F	; 15
    1fe6:	8c 93       	st	X, r24
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <start>:
void start(void)
{
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	c4 55       	subi	r28, 0x54	; 84
    1ffc:	d0 40       	sbci	r29, 0x00	; 0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2008:	0e 94 a1 0a 	call	0x1542	; 0x1542 <LCD_init>
	LCD_displayStringRowColumn(0, 5, "WELCOME");
    200c:	20 e6       	ldi	r18, 0x60	; 96
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	65 e0       	ldi	r22, 0x05	; 5
    2014:	a9 01       	movw	r20, r18
    2016:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_displayStringRowColumn>
	PORTC = PORTC & ~(1<<PC0) & ~(1<<PC1) & ~(1<<PC2) & ~(1<<PC3); // Set Value of PIN  in PORTC to 0 at the beginning (LED on)
    201a:	a5 e3       	ldi	r26, 0x35	; 53
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e5 e3       	ldi	r30, 0x35	; 53
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	8c 93       	st	X, r24
    2028:	fe 01       	movw	r30, r28
    202a:	ef 5a       	subi	r30, 0xAF	; 175
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	aa ef       	ldi	r26, 0xFA	; 250
    2034:	b3 e4       	ldi	r27, 0x43	; 67
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	8e 01       	movw	r16, r28
    2040:	03 5b       	subi	r16, 0xB3	; 179
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	ef 5a       	subi	r30, 0xAF	; 175
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a e7       	ldi	r20, 0x7A	; 122
    2058:	53 e4       	ldi	r21, 0x43	; 67
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	80 83       	st	Z, r24
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	a2 83       	std	Z+2, r26	; 0x02
    206a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206c:	fe 01       	movw	r30, r28
    206e:	e3 5b       	subi	r30, 0xB3	; 179
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	44 f4       	brge	.+16     	; 0x209a <start+0xac>
		__ticks = 1;
    208a:	fe 01       	movw	r30, r28
    208c:	e5 5b       	subi	r30, 0xB5	; 181
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	64 c0       	rjmp	.+200    	; 0x2162 <start+0x174>
	else if (__tmp > 65535)
    209a:	fe 01       	movw	r30, r28
    209c:	e3 5b       	subi	r30, 0xB3	; 179
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <start+0xcc>
    20b8:	43 c0       	rjmp	.+134    	; 0x2140 <start+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	fe 01       	movw	r30, r28
    20bc:	ef 5a       	subi	r30, 0xAF	; 175
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8e 01       	movw	r16, r28
    20da:	05 5b       	subi	r16, 0xB5	; 181
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	f8 01       	movw	r30, r16
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	1f c0       	rjmp	.+62     	; 0x2130 <start+0x142>
    20f2:	fe 01       	movw	r30, r28
    20f4:	e7 5b       	subi	r30, 0xB7	; 183
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	89 e1       	ldi	r24, 0x19	; 25
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	fe 01       	movw	r30, r28
    2102:	e7 5b       	subi	r30, 0xB7	; 183
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <start+0x11c>
    210e:	fe 01       	movw	r30, r28
    2110:	e7 5b       	subi	r30, 0xB7	; 183
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	de 01       	movw	r26, r28
    211a:	a5 5b       	subi	r26, 0xB5	; 181
    211c:	bf 4f       	sbci	r27, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	e5 5b       	subi	r30, 0xB5	; 181
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	9c 93       	st	X, r25
    212e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	fe 01       	movw	r30, r28
    2132:	e5 5b       	subi	r30, 0xB5	; 181
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	d1 f6       	brne	.-76     	; 0x20f2 <start+0x104>
    213e:	27 c0       	rjmp	.+78     	; 0x218e <start+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	8e 01       	movw	r16, r28
    2142:	05 5b       	subi	r16, 0xB5	; 181
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	fe 01       	movw	r30, r28
    2148:	e3 5b       	subi	r30, 0xB3	; 179
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	f8 01       	movw	r30, r16
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	de 01       	movw	r26, r28
    2164:	a9 5b       	subi	r26, 0xB9	; 185
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	fe 01       	movw	r30, r28
    216a:	e5 5b       	subi	r30, 0xB5	; 181
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	8d 93       	st	X+, r24
    2174:	9c 93       	st	X, r25
    2176:	fe 01       	movw	r30, r28
    2178:	e9 5b       	subi	r30, 0xB9	; 185
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <start+0x192>
    2184:	fe 01       	movw	r30, r28
    2186:	e9 5b       	subi	r30, 0xB9	; 185
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
	_delay_ms(500);
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3);_delay_ms(500);
    218e:	a5 e3       	ldi	r26, 0x35	; 53
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e5 e3       	ldi	r30, 0x35	; 53
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 60       	ori	r24, 0x0F	; 15
    219a:	8c 93       	st	X, r24
    219c:	fe 01       	movw	r30, r28
    219e:	ed 5b       	subi	r30, 0xBD	; 189
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	aa ef       	ldi	r26, 0xFA	; 250
    21a8:	b3 e4       	ldi	r27, 0x43	; 67
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	8e 01       	movw	r16, r28
    21b4:	01 5c       	subi	r16, 0xC1	; 193
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	ed 5b       	subi	r30, 0xBD	; 189
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a e7       	ldi	r20, 0x7A	; 122
    21cc:	53 e4       	ldi	r21, 0x43	; 67
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	f8 01       	movw	r30, r16
    21d8:	80 83       	st	Z, r24
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	a2 83       	std	Z+2, r26	; 0x02
    21de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e0:	fe 01       	movw	r30, r28
    21e2:	ff 96       	adiw	r30, 0x3f	; 63
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <start+0x218>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e af       	std	Y+62, r25	; 0x3e
    2202:	8d af       	std	Y+61, r24	; 0x3d
    2204:	46 c0       	rjmp	.+140    	; 0x2292 <start+0x2a4>
	else if (__tmp > 65535)
    2206:	fe 01       	movw	r30, r28
    2208:	ff 96       	adiw	r30, 0x3f	; 63
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	64 f5       	brge	.+88     	; 0x227a <start+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	fe 01       	movw	r30, r28
    2224:	ed 5b       	subi	r30, 0xBD	; 189
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	60 81       	ld	r22, Z
    222a:	71 81       	ldd	r23, Z+1	; 0x01
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e af       	std	Y+62, r25	; 0x3e
    224e:	8d af       	std	Y+61, r24	; 0x3d
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <start+0x282>
    2252:	89 e1       	ldi	r24, 0x19	; 25
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c af       	std	Y+60, r25	; 0x3c
    2258:	8b af       	std	Y+59, r24	; 0x3b
    225a:	8b ad       	ldd	r24, Y+59	; 0x3b
    225c:	9c ad       	ldd	r25, Y+60	; 0x3c
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <start+0x270>
    2262:	9c af       	std	Y+60, r25	; 0x3c
    2264:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8d ad       	ldd	r24, Y+61	; 0x3d
    2268:	9e ad       	ldd	r25, Y+62	; 0x3e
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9e af       	std	Y+62, r25	; 0x3e
    226e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8d ad       	ldd	r24, Y+61	; 0x3d
    2272:	9e ad       	ldd	r25, Y+62	; 0x3e
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <start+0x264>
    2278:	16 c0       	rjmp	.+44     	; 0x22a6 <start+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	fe 01       	movw	r30, r28
    227c:	ff 96       	adiw	r30, 0x3f	; 63
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e af       	std	Y+62, r25	; 0x3e
    2290:	8d af       	std	Y+61, r24	; 0x3d
    2292:	8d ad       	ldd	r24, Y+61	; 0x3d
    2294:	9e ad       	ldd	r25, Y+62	; 0x3e
    2296:	9a af       	std	Y+58, r25	; 0x3a
    2298:	89 af       	std	Y+57, r24	; 0x39
    229a:	89 ad       	ldd	r24, Y+57	; 0x39
    229c:	9a ad       	ldd	r25, Y+58	; 0x3a
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <start+0x2b0>
    22a2:	9a af       	std	Y+58, r25	; 0x3a
    22a4:	89 af       	std	Y+57, r24	; 0x39
	PORTC = PORTC & ~(1<<PC0) & ~(1<<PC1) & ~(1<<PC2) & ~(1<<PC3); // Set Value of PIN  in PORTC to 0 at the beginning (LED on)
    22a6:	a5 e3       	ldi	r26, 0x35	; 53
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e5 e3       	ldi	r30, 0x35	; 53
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 7f       	andi	r24, 0xF0	; 240
    22b2:	8c 93       	st	X, r24
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	aa ef       	ldi	r26, 0xFA	; 250
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	8d ab       	std	Y+53, r24	; 0x35
    22be:	9e ab       	std	Y+54, r25	; 0x36
    22c0:	af ab       	std	Y+55, r26	; 0x37
    22c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6d a9       	ldd	r22, Y+53	; 0x35
    22c6:	7e a9       	ldd	r23, Y+54	; 0x36
    22c8:	8f a9       	ldd	r24, Y+55	; 0x37
    22ca:	98 ad       	ldd	r25, Y+56	; 0x38
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	89 ab       	std	Y+49, r24	; 0x31
    22de:	9a ab       	std	Y+50, r25	; 0x32
    22e0:	ab ab       	std	Y+51, r26	; 0x33
    22e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22e4:	69 a9       	ldd	r22, Y+49	; 0x31
    22e6:	7a a9       	ldd	r23, Y+50	; 0x32
    22e8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ea:	9c a9       	ldd	r25, Y+52	; 0x34
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <start+0x318>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	98 ab       	std	Y+48, r25	; 0x30
    2302:	8f a7       	std	Y+47, r24	; 0x2f
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <start+0x396>
	else if (__tmp > 65535)
    2306:	69 a9       	ldd	r22, Y+49	; 0x31
    2308:	7a a9       	ldd	r23, Y+50	; 0x32
    230a:	8b a9       	ldd	r24, Y+51	; 0x33
    230c:	9c a9       	ldd	r25, Y+52	; 0x34
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <start+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6d a9       	ldd	r22, Y+53	; 0x35
    2320:	7e a9       	ldd	r23, Y+54	; 0x36
    2322:	8f a9       	ldd	r24, Y+55	; 0x37
    2324:	98 ad       	ldd	r25, Y+56	; 0x38
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	98 ab       	std	Y+48, r25	; 0x30
    2344:	8f a7       	std	Y+47, r24	; 0x2f
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <start+0x378>
    2348:	89 e1       	ldi	r24, 0x19	; 25
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e a7       	std	Y+46, r25	; 0x2e
    234e:	8d a7       	std	Y+45, r24	; 0x2d
    2350:	8d a5       	ldd	r24, Y+45	; 0x2d
    2352:	9e a5       	ldd	r25, Y+46	; 0x2e
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <start+0x366>
    2358:	9e a7       	std	Y+46, r25	; 0x2e
    235a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8f a5       	ldd	r24, Y+47	; 0x2f
    235e:	98 a9       	ldd	r25, Y+48	; 0x30
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	98 ab       	std	Y+48, r25	; 0x30
    2364:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8f a5       	ldd	r24, Y+47	; 0x2f
    2368:	98 a9       	ldd	r25, Y+48	; 0x30
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <start+0x35a>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <start+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	69 a9       	ldd	r22, Y+49	; 0x31
    2372:	7a a9       	ldd	r23, Y+50	; 0x32
    2374:	8b a9       	ldd	r24, Y+51	; 0x33
    2376:	9c a9       	ldd	r25, Y+52	; 0x34
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
    2384:	8f a5       	ldd	r24, Y+47	; 0x2f
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	9c a7       	std	Y+44, r25	; 0x2c
    238a:	8b a7       	std	Y+43, r24	; 0x2b
    238c:	8b a5       	ldd	r24, Y+43	; 0x2b
    238e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <start+0x3a2>
    2394:	9c a7       	std	Y+44, r25	; 0x2c
    2396:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3);_delay_ms(500);
    2398:	a5 e3       	ldi	r26, 0x35	; 53
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e3       	ldi	r30, 0x35	; 53
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 60       	ori	r24, 0x0F	; 15
    23a4:	8c 93       	st	X, r24
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	aa ef       	ldi	r26, 0xFA	; 250
    23ac:	b3 e4       	ldi	r27, 0x43	; 67
    23ae:	8f a3       	std	Y+39, r24	; 0x27
    23b0:	98 a7       	std	Y+40, r25	; 0x28
    23b2:	a9 a7       	std	Y+41, r26	; 0x29
    23b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6f a1       	ldd	r22, Y+39	; 0x27
    23b8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ba:	89 a5       	ldd	r24, Y+41	; 0x29
    23bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8b a3       	std	Y+35, r24	; 0x23
    23d0:	9c a3       	std	Y+36, r25	; 0x24
    23d2:	ad a3       	std	Y+37, r26	; 0x25
    23d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <start+0x40a>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a a3       	std	Y+34, r25	; 0x22
    23f4:	89 a3       	std	Y+33, r24	; 0x21
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <start+0x488>
	else if (__tmp > 65535)
    23f8:	6b a1       	ldd	r22, Y+35	; 0x23
    23fa:	7c a1       	ldd	r23, Y+36	; 0x24
    23fc:	8d a1       	ldd	r24, Y+37	; 0x25
    23fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <start+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6f a1       	ldd	r22, Y+39	; 0x27
    2412:	78 a5       	ldd	r23, Y+40	; 0x28
    2414:	89 a5       	ldd	r24, Y+41	; 0x29
    2416:	9a a5       	ldd	r25, Y+42	; 0x2a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9a a3       	std	Y+34, r25	; 0x22
    2436:	89 a3       	std	Y+33, r24	; 0x21
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <start+0x46a>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	98 a3       	std	Y+32, r25	; 0x20
    2440:	8f 8f       	std	Y+31, r24	; 0x1f
    2442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2444:	98 a1       	ldd	r25, Y+32	; 0x20
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <start+0x458>
    244a:	98 a3       	std	Y+32, r25	; 0x20
    244c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	89 a1       	ldd	r24, Y+33	; 0x21
    2450:	9a a1       	ldd	r25, Y+34	; 0x22
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <start+0x44c>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <start+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6b a1       	ldd	r22, Y+35	; 0x23
    2464:	7c a1       	ldd	r23, Y+36	; 0x24
    2466:	8d a1       	ldd	r24, Y+37	; 0x25
    2468:	9e a1       	ldd	r25, Y+38	; 0x26
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
    2476:	89 a1       	ldd	r24, Y+33	; 0x21
    2478:	9a a1       	ldd	r25, Y+34	; 0x22
    247a:	9e 8f       	std	Y+30, r25	; 0x1e
    247c:	8d 8f       	std	Y+29, r24	; 0x1d
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <start+0x494>
    2486:	9e 8f       	std	Y+30, r25	; 0x1e
    2488:	8d 8f       	std	Y+29, r24	; 0x1d
	PORTC = PORTC & ~(1<<PC0) & ~(1<<PC1) & ~(1<<PC2) & ~(1<<PC3); // Set Value of PIN  in PORTC to 0 at the beginning (LED on)
    248a:	a5 e3       	ldi	r26, 0x35	; 53
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 7f       	andi	r24, 0xF0	; 240
    2496:	8c 93       	st	X, r24
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	aa ef       	ldi	r26, 0xFA	; 250
    249e:	b3 e4       	ldi	r27, 0x43	; 67
    24a0:	89 8f       	std	Y+25, r24	; 0x19
    24a2:	9a 8f       	std	Y+26, r25	; 0x1a
    24a4:	ab 8f       	std	Y+27, r26	; 0x1b
    24a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	69 8d       	ldd	r22, Y+25	; 0x19
    24aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	53 e4       	ldi	r21, 0x43	; 67
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8d 8b       	std	Y+21, r24	; 0x15
    24c2:	9e 8b       	std	Y+22, r25	; 0x16
    24c4:	af 8b       	std	Y+23, r26	; 0x17
    24c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <start+0x4fc>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <start+0x57a>
	else if (__tmp > 65535)
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <start+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	69 8d       	ldd	r22, Y+25	; 0x19
    2504:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	0f c0       	rjmp	.+30     	; 0x254a <start+0x55c>
    252c:	89 e1       	ldi	r24, 0x19	; 25
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9a 8b       	std	Y+18, r25	; 0x12
    2532:	89 8b       	std	Y+17, r24	; 0x11
    2534:	89 89       	ldd	r24, Y+17	; 0x11
    2536:	9a 89       	ldd	r25, Y+18	; 0x12
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <start+0x54a>
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <start+0x53e>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <start+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	98 8b       	std	Y+16, r25	; 0x10
    256e:	8f 87       	std	Y+15, r24	; 0x0f
    2570:	8f 85       	ldd	r24, Y+15	; 0x0f
    2572:	98 89       	ldd	r25, Y+16	; 0x10
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <start+0x586>
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3);
    257c:	a5 e3       	ldi	r26, 0x35	; 53
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e3       	ldi	r30, 0x35	; 53
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8f 60       	ori	r24, 0x0F	; 15
    2588:	8c 93       	st	X, r24
	LCD_clearScreen();
    258a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_clearScreen>
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3);_delay_ms(500); // Set Value of PIN 0 in PORTC to 1 at the beginning (LED OFF)*/
    258e:	a5 e3       	ldi	r26, 0x35	; 53
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e5 e3       	ldi	r30, 0x35	; 53
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	8f 60       	ori	r24, 0x0F	; 15
    259a:	8c 93       	st	X, r24
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	aa ef       	ldi	r26, 0xFA	; 250
    25a2:	b3 e4       	ldi	r27, 0x43	; 67
    25a4:	8b 87       	std	Y+11, r24	; 0x0b
    25a6:	9c 87       	std	Y+12, r25	; 0x0c
    25a8:	ad 87       	std	Y+13, r26	; 0x0d
    25aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	53 e4       	ldi	r21, 0x43	; 67
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8f 83       	std	Y+7, r24	; 0x07
    25c6:	98 87       	std	Y+8, r25	; 0x08
    25c8:	a9 87       	std	Y+9, r26	; 0x09
    25ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <start+0x600>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <start+0x67e>
	else if (__tmp > 65535)
    25ee:	6f 81       	ldd	r22, Y+7	; 0x07
    25f0:	78 85       	ldd	r23, Y+8	; 0x08
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <start+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	6b 85       	ldd	r22, Y+11	; 0x0b
    2608:	7c 85       	ldd	r23, Y+12	; 0x0c
    260a:	8d 85       	ldd	r24, Y+13	; 0x0d
    260c:	9e 85       	ldd	r25, Y+14	; 0x0e
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	0f c0       	rjmp	.+30     	; 0x264e <start+0x660>
    2630:	89 e1       	ldi	r24, 0x19	; 25
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9c 83       	std	Y+4, r25	; 0x04
    2636:	8b 83       	std	Y+3, r24	; 0x03
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <start+0x64e>
    2640:	9c 83       	std	Y+4, r25	; 0x04
    2642:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <start+0x642>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <start+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <start+0x68a>
    267c:	9a 83       	std	Y+2, r25	; 0x02
    267e:	89 83       	std	Y+1, r24	; 0x01

}
    2680:	cc 5a       	subi	r28, 0xAC	; 172
    2682:	df 4f       	sbci	r29, 0xFF	; 255
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	08 95       	ret

00002698 <__vector_1>:

/* External INT0 Interrupt Service Routine
 * Every time we press a button it change temp2 value to check
 * */
ISR(INT0_vect)
{
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	2f 93       	push	r18
    26a4:	3f 93       	push	r19
    26a6:	4f 93       	push	r20
    26a8:	5f 93       	push	r21
    26aa:	6f 93       	push	r22
    26ac:	7f 93       	push	r23
    26ae:	8f 93       	push	r24
    26b0:	9f 93       	push	r25
    26b2:	af 93       	push	r26
    26b4:	bf 93       	push	r27
    26b6:	ef 93       	push	r30
    26b8:	ff 93       	push	r31
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	2e 97       	sbiw	r28, 0x0e	; 14
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	cd bf       	out	0x3d, r28	; 61
	if(PIND & (1<<PD4))
    26c8:	e0 e3       	ldi	r30, 0x30	; 48
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	80 71       	andi	r24, 0x10	; 16
    26d4:	90 70       	andi	r25, 0x00	; 0
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	11 f1       	breq	.+68     	; 0x271e <__vector_1+0x86>
	{
		PORTC &= ~(1<<PC0);
    26da:	a5 e3       	ldi	r26, 0x35	; 53
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e5 e3       	ldi	r30, 0x35	; 53
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8e 7f       	andi	r24, 0xFE	; 254
    26e6:	8c 93       	st	X, r24
		g_temp2+=1;
    26e8:	80 91 c0 01 	lds	r24, 0x01C0
    26ec:	90 91 c1 01 	lds	r25, 0x01C1
    26f0:	a0 91 c2 01 	lds	r26, 0x01C2
    26f4:	b0 91 c3 01 	lds	r27, 0x01C3
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	80 93 c0 01 	sts	0x01C0, r24
    2710:	90 93 c1 01 	sts	0x01C1, r25
    2714:	a0 93 c2 01 	sts	0x01C2, r26
    2718:	b0 93 c3 01 	sts	0x01C3, r27
    271c:	7c c0       	rjmp	.+248    	; 0x2816 <__vector_1+0x17e>

	}
	else if(PIND & (1<<PD5))
    271e:	e0 e3       	ldi	r30, 0x30	; 48
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	80 72       	andi	r24, 0x20	; 32
    272a:	90 70       	andi	r25, 0x00	; 0
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	11 f1       	breq	.+68     	; 0x2774 <__vector_1+0xdc>
	{
		PORTC &= ~(1<<PC1);
    2730:	a5 e3       	ldi	r26, 0x35	; 53
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e5 e3       	ldi	r30, 0x35	; 53
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8d 7f       	andi	r24, 0xFD	; 253
    273c:	8c 93       	st	X, r24
		g_temp2/=2;
    273e:	80 91 c0 01 	lds	r24, 0x01C0
    2742:	90 91 c1 01 	lds	r25, 0x01C1
    2746:	a0 91 c2 01 	lds	r26, 0x01C2
    274a:	b0 91 c3 01 	lds	r27, 0x01C3
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e4       	ldi	r21, 0x40	; 64
    275a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	80 93 c0 01 	sts	0x01C0, r24
    2766:	90 93 c1 01 	sts	0x01C1, r25
    276a:	a0 93 c2 01 	sts	0x01C2, r26
    276e:	b0 93 c3 01 	sts	0x01C3, r27
    2772:	51 c0       	rjmp	.+162    	; 0x2816 <__vector_1+0x17e>
	}
	else if(PIND & (1<<PD6))
    2774:	e0 e3       	ldi	r30, 0x30	; 48
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 74       	andi	r24, 0x40	; 64
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	11 f1       	breq	.+68     	; 0x27ca <__vector_1+0x132>
	{
		PORTC &= ~(1<<PC2);
    2786:	a5 e3       	ldi	r26, 0x35	; 53
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e5 e3       	ldi	r30, 0x35	; 53
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	8b 7f       	andi	r24, 0xFB	; 251
    2792:	8c 93       	st	X, r24
		g_temp2-=3;
    2794:	80 91 c0 01 	lds	r24, 0x01C0
    2798:	90 91 c1 01 	lds	r25, 0x01C1
    279c:	a0 91 c2 01 	lds	r26, 0x01C2
    27a0:	b0 91 c3 01 	lds	r27, 0x01C3
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e4       	ldi	r20, 0x40	; 64
    27ae:	50 e4       	ldi	r21, 0x40	; 64
    27b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	80 93 c0 01 	sts	0x01C0, r24
    27bc:	90 93 c1 01 	sts	0x01C1, r25
    27c0:	a0 93 c2 01 	sts	0x01C2, r26
    27c4:	b0 93 c3 01 	sts	0x01C3, r27
    27c8:	26 c0       	rjmp	.+76     	; 0x2816 <__vector_1+0x17e>
	}
	else if(PIND & (1<<PD7))
    27ca:	e0 e3       	ldi	r30, 0x30	; 48
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	88 23       	and	r24, r24
    27d2:	0c f5       	brge	.+66     	; 0x2816 <__vector_1+0x17e>
	{
		PORTC &= ~(1<<PC3);
    27d4:	a5 e3       	ldi	r26, 0x35	; 53
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e5 e3       	ldi	r30, 0x35	; 53
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	87 7f       	andi	r24, 0xF7	; 247
    27e0:	8c 93       	st	X, r24
		g_temp2*=4;
    27e2:	80 91 c0 01 	lds	r24, 0x01C0
    27e6:	90 91 c1 01 	lds	r25, 0x01C1
    27ea:	a0 91 c2 01 	lds	r26, 0x01C2
    27ee:	b0 91 c3 01 	lds	r27, 0x01C3
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	50 e4       	ldi	r21, 0x40	; 64
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	80 93 c0 01 	sts	0x01C0, r24
    280a:	90 93 c1 01 	sts	0x01C1, r25
    280e:	a0 93 c2 01 	sts	0x01C2, r26
    2812:	b0 93 c3 01 	sts	0x01C3, r27
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	aa e7       	ldi	r26, 0x7A	; 122
    281c:	b3 e4       	ldi	r27, 0x43	; 67
    281e:	8b 87       	std	Y+11, r24	; 0x0b
    2820:	9c 87       	std	Y+12, r25	; 0x0c
    2822:	ad 87       	std	Y+13, r26	; 0x0d
    2824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a e7       	ldi	r20, 0x7A	; 122
    2834:	53 e4       	ldi	r21, 0x43	; 67
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8f 83       	std	Y+7, r24	; 0x07
    2840:	98 87       	std	Y+8, r25	; 0x08
    2842:	a9 87       	std	Y+9, r26	; 0x09
    2844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <__vector_1+0x1d0>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <__vector_1+0x24e>
	else if (__tmp > 65535)
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <__vector_1+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <__vector_1+0x230>
    28aa:	89 e1       	ldi	r24, 0x19	; 25
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9c 83       	std	Y+4, r25	; 0x04
    28b0:	8b 83       	std	Y+3, r24	; 0x03
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <__vector_1+0x21e>
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <__vector_1+0x212>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <__vector_1+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <__vector_1+0x25a>
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(250);
	PORTC = PORTC | (1<<PC0)| (1<<PC1)| (1<<PC2)| (1<<PC3); // Set Value of PIN 0 in PORTC to 1 at the beginning (LED OFF)
    28fa:	a5 e3       	ldi	r26, 0x35	; 53
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e5 e3       	ldi	r30, 0x35	; 53
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8f 60       	ori	r24, 0x0F	; 15
    2906:	8c 93       	st	X, r24
	check();
    2908:	0e 94 4d 18 	call	0x309a	; 0x309a <check>
}
    290c:	2e 96       	adiw	r28, 0x0e	; 14
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	ff 91       	pop	r31
    2918:	ef 91       	pop	r30
    291a:	bf 91       	pop	r27
    291c:	af 91       	pop	r26
    291e:	9f 91       	pop	r25
    2920:	8f 91       	pop	r24
    2922:	7f 91       	pop	r23
    2924:	6f 91       	pop	r22
    2926:	5f 91       	pop	r21
    2928:	4f 91       	pop	r20
    292a:	3f 91       	pop	r19
    292c:	2f 91       	pop	r18
    292e:	0f 90       	pop	r0
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	0f 90       	pop	r0
    2934:	1f 90       	pop	r1
    2936:	18 95       	reti

00002938 <loop1>:
 * Function that turn on led in a random
 * max decide after how many loops we check if it right or wrong
 * temp check if it right or wrong
 * we decrease time by 10ms every time the answer is correct
 */
void loop1() {
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	ca 54       	subi	r28, 0x4A	; 74
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61

	for (int var = 0; var < 4; var++) {
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5b       	subi	r30, 0xB7	; 183
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	11 82       	std	Z+1, r1	; 0x01
    295a:	10 82       	st	Z, r1
    295c:	ef c2       	rjmp	.+1502   	; 0x2f3c <loop1+0x604>
		int ran = (rand()%5);
    295e:	0e 94 03 1b 	call	0x3606	; 0x3606 <rand>
    2962:	fe 01       	movw	r30, r28
    2964:	e9 5b       	subi	r30, 0xB9	; 185
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	25 e0       	ldi	r18, 0x05	; 5
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	b9 01       	movw	r22, r18
    296e:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__divmodhi4>
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
		if(ran == 1) {
    2976:	fe 01       	movw	r30, r28
    2978:	e9 5b       	subi	r30, 0xB9	; 185
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	91 05       	cpc	r25, r1
    2984:	09 f0       	breq	.+2      	; 0x2988 <loop1+0x50>
    2986:	bb c0       	rjmp	.+374    	; 0x2afe <loop1+0x1c6>
			CLEAR_BIT(PORTC,PIN0);
    2988:	a5 e3       	ldi	r26, 0x35	; 53
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e3       	ldi	r30, 0x35	; 53
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8e 7f       	andi	r24, 0xFE	; 254
    2994:	8c 93       	st	X, r24
			_delay_ms(time);
    2996:	80 91 b8 01 	lds	r24, 0x01B8
    299a:	90 91 b9 01 	lds	r25, 0x01B9
    299e:	cc 01       	movw	r24, r24
    29a0:	a0 e0       	ldi	r26, 0x00	; 0
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 5b       	subi	r30, 0xBD	; 189
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 83       	st	Z, r24
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	a2 83       	std	Z+2, r26	; 0x02
    29bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	8e 01       	movw	r16, r28
    29c0:	01 5c       	subi	r16, 0xC1	; 193
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	fe 01       	movw	r30, r28
    29c6:	ed 5b       	subi	r30, 0xBD	; 189
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a e7       	ldi	r20, 0x7A	; 122
    29d8:	53 e4       	ldi	r21, 0x43	; 67
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	f8 01       	movw	r30, r16
    29e4:	80 83       	st	Z, r24
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	a2 83       	std	Z+2, r26	; 0x02
    29ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ec:	fe 01       	movw	r30, r28
    29ee:	ff 96       	adiw	r30, 0x3f	; 63
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e8       	ldi	r20, 0x80	; 128
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <loop1+0xda>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9e af       	std	Y+62, r25	; 0x3e
    2a0e:	8d af       	std	Y+61, r24	; 0x3d
    2a10:	46 c0       	rjmp	.+140    	; 0x2a9e <loop1+0x166>
	else if (__tmp > 65535)
    2a12:	fe 01       	movw	r30, r28
    2a14:	ff 96       	adiw	r30, 0x3f	; 63
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	64 f5       	brge	.+88     	; 0x2a86 <loop1+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ed 5b       	subi	r30, 0xBD	; 189
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	60 81       	ld	r22, Z
    2a36:	71 81       	ldd	r23, Z+1	; 0x01
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e af       	std	Y+62, r25	; 0x3e
    2a5a:	8d af       	std	Y+61, r24	; 0x3d
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <loop1+0x144>
    2a5e:	89 e1       	ldi	r24, 0x19	; 25
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9c af       	std	Y+60, r25	; 0x3c
    2a64:	8b af       	std	Y+59, r24	; 0x3b
    2a66:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a68:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <loop1+0x132>
    2a6e:	9c af       	std	Y+60, r25	; 0x3c
    2a70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9e af       	std	Y+62, r25	; 0x3e
    2a7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <loop1+0x126>
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <loop1+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	fe 01       	movw	r30, r28
    2a88:	ff 96       	adiw	r30, 0x3f	; 63
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e af       	std	Y+62, r25	; 0x3e
    2a9c:	8d af       	std	Y+61, r24	; 0x3d
    2a9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aa0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aa2:	9a af       	std	Y+58, r25	; 0x3a
    2aa4:	89 af       	std	Y+57, r24	; 0x39
    2aa6:	89 ad       	ldd	r24, Y+57	; 0x39
    2aa8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <loop1+0x172>
    2aae:	9a af       	std	Y+58, r25	; 0x3a
    2ab0:	89 af       	std	Y+57, r24	; 0x39
			SET_BIT(PORTC,PIN0);
    2ab2:	a5 e3       	ldi	r26, 0x35	; 53
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e5 e3       	ldi	r30, 0x35	; 53
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	81 60       	ori	r24, 0x01	; 1
    2abe:	8c 93       	st	X, r24
			g_temp+=1;
    2ac0:	80 91 bc 01 	lds	r24, 0x01BC
    2ac4:	90 91 bd 01 	lds	r25, 0x01BD
    2ac8:	a0 91 be 01 	lds	r26, 0x01BE
    2acc:	b0 91 bf 01 	lds	r27, 0x01BF
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	5f e3       	ldi	r21, 0x3F	; 63
    2adc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	80 93 bc 01 	sts	0x01BC, r24
    2ae8:	90 93 bd 01 	sts	0x01BD, r25
    2aec:	a0 93 be 01 	sts	0x01BE, r26
    2af0:	b0 93 bf 01 	sts	0x01BF, r27
			max++;
    2af4:	80 91 bb 01 	lds	r24, 0x01BB
    2af8:	8f 5f       	subi	r24, 0xFF	; 255
    2afa:	80 93 bb 01 	sts	0x01BB, r24
		}
		if(ran == 2) {
    2afe:	fe 01       	movw	r30, r28
    2b00:	e9 5b       	subi	r30, 0xB9	; 185
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <loop1+0x1d8>
    2b0e:	a8 c0       	rjmp	.+336    	; 0x2c60 <loop1+0x328>
			CLEAR_BIT(PORTC,PIN1);
    2b10:	a5 e3       	ldi	r26, 0x35	; 53
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e5 e3       	ldi	r30, 0x35	; 53
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	8d 7f       	andi	r24, 0xFD	; 253
    2b1c:	8c 93       	st	X, r24
			_delay_ms(time);
    2b1e:	80 91 b8 01 	lds	r24, 0x01B8
    2b22:	90 91 b9 01 	lds	r25, 0x01B9
    2b26:	cc 01       	movw	r24, r24
    2b28:	a0 e0       	ldi	r26, 0x00	; 0
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8d ab       	std	Y+53, r24	; 0x35
    2b3a:	9e ab       	std	Y+54, r25	; 0x36
    2b3c:	af ab       	std	Y+55, r26	; 0x37
    2b3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	6d a9       	ldd	r22, Y+53	; 0x35
    2b42:	7e a9       	ldd	r23, Y+54	; 0x36
    2b44:	8f a9       	ldd	r24, Y+55	; 0x37
    2b46:	98 ad       	ldd	r25, Y+56	; 0x38
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a e7       	ldi	r20, 0x7A	; 122
    2b4e:	53 e4       	ldi	r21, 0x43	; 67
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	89 ab       	std	Y+49, r24	; 0x31
    2b5a:	9a ab       	std	Y+50, r25	; 0x32
    2b5c:	ab ab       	std	Y+51, r26	; 0x33
    2b5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b60:	69 a9       	ldd	r22, Y+49	; 0x31
    2b62:	7a a9       	ldd	r23, Y+50	; 0x32
    2b64:	8b a9       	ldd	r24, Y+51	; 0x33
    2b66:	9c a9       	ldd	r25, Y+52	; 0x34
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <loop1+0x24a>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	98 ab       	std	Y+48, r25	; 0x30
    2b7e:	8f a7       	std	Y+47, r24	; 0x2f
    2b80:	3f c0       	rjmp	.+126    	; 0x2c00 <loop1+0x2c8>
	else if (__tmp > 65535)
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	4c f5       	brge	.+82     	; 0x2bec <loop1+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b9c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	98 ab       	std	Y+48, r25	; 0x30
    2bc0:	8f a7       	std	Y+47, r24	; 0x2f
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <loop1+0x2aa>
    2bc4:	89 e1       	ldi	r24, 0x19	; 25
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9e a7       	std	Y+46, r25	; 0x2e
    2bca:	8d a7       	std	Y+45, r24	; 0x2d
    2bcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bce:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <loop1+0x298>
    2bd4:	9e a7       	std	Y+46, r25	; 0x2e
    2bd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bda:	98 a9       	ldd	r25, Y+48	; 0x30
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	98 ab       	std	Y+48, r25	; 0x30
    2be0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be4:	98 a9       	ldd	r25, Y+48	; 0x30
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <loop1+0x28c>
    2bea:	14 c0       	rjmp	.+40     	; 0x2c14 <loop1+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	69 a9       	ldd	r22, Y+49	; 0x31
    2bee:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf0:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf2:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	98 ab       	std	Y+48, r25	; 0x30
    2bfe:	8f a7       	std	Y+47, r24	; 0x2f
    2c00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c02:	98 a9       	ldd	r25, Y+48	; 0x30
    2c04:	9c a7       	std	Y+44, r25	; 0x2c
    2c06:	8b a7       	std	Y+43, r24	; 0x2b
    2c08:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <loop1+0x2d4>
    2c10:	9c a7       	std	Y+44, r25	; 0x2c
    2c12:	8b a7       	std	Y+43, r24	; 0x2b
			SET_BIT(PORTC,PIN1);
    2c14:	a5 e3       	ldi	r26, 0x35	; 53
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e3       	ldi	r30, 0x35	; 53
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	82 60       	ori	r24, 0x02	; 2
    2c20:	8c 93       	st	X, r24
			g_temp/=2;
    2c22:	80 91 bc 01 	lds	r24, 0x01BC
    2c26:	90 91 bd 01 	lds	r25, 0x01BD
    2c2a:	a0 91 be 01 	lds	r26, 0x01BE
    2c2e:	b0 91 bf 01 	lds	r27, 0x01BF
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	50 e4       	ldi	r21, 0x40	; 64
    2c3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	80 93 bc 01 	sts	0x01BC, r24
    2c4a:	90 93 bd 01 	sts	0x01BD, r25
    2c4e:	a0 93 be 01 	sts	0x01BE, r26
    2c52:	b0 93 bf 01 	sts	0x01BF, r27
			max++;
    2c56:	80 91 bb 01 	lds	r24, 0x01BB
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	80 93 bb 01 	sts	0x01BB, r24
		}
		if(ran == 3) {
    2c60:	fe 01       	movw	r30, r28
    2c62:	e9 5b       	subi	r30, 0xB9	; 185
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	91 81       	ldd	r25, Z+1	; 0x01
    2c6a:	83 30       	cpi	r24, 0x03	; 3
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <loop1+0x33a>
    2c70:	a8 c0       	rjmp	.+336    	; 0x2dc2 <loop1+0x48a>
			CLEAR_BIT(PORTC,PIN2);
    2c72:	a5 e3       	ldi	r26, 0x35	; 53
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e5 e3       	ldi	r30, 0x35	; 53
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8b 7f       	andi	r24, 0xFB	; 251
    2c7e:	8c 93       	st	X, r24
			_delay_ms(time);
    2c80:	80 91 b8 01 	lds	r24, 0x01B8
    2c84:	90 91 b9 01 	lds	r25, 0x01B9
    2c88:	cc 01       	movw	r24, r24
    2c8a:	a0 e0       	ldi	r26, 0x00	; 0
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8f a3       	std	Y+39, r24	; 0x27
    2c9c:	98 a7       	std	Y+40, r25	; 0x28
    2c9e:	a9 a7       	std	Y+41, r26	; 0x29
    2ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a e7       	ldi	r20, 0x7A	; 122
    2cb0:	53 e4       	ldi	r21, 0x43	; 67
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8b a3       	std	Y+35, r24	; 0x23
    2cbc:	9c a3       	std	Y+36, r25	; 0x24
    2cbe:	ad a3       	std	Y+37, r26	; 0x25
    2cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <loop1+0x3ac>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9a a3       	std	Y+34, r25	; 0x22
    2ce0:	89 a3       	std	Y+33, r24	; 0x21
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <loop1+0x42a>
	else if (__tmp > 65535)
    2ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cea:	9e a1       	ldd	r25, Y+38	; 0x26
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <loop1+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2d00:	89 a5       	ldd	r24, Y+41	; 0x29
    2d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9a a3       	std	Y+34, r25	; 0x22
    2d22:	89 a3       	std	Y+33, r24	; 0x21
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <loop1+0x40c>
    2d26:	89 e1       	ldi	r24, 0x19	; 25
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	98 a3       	std	Y+32, r25	; 0x20
    2d2c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d30:	98 a1       	ldd	r25, Y+32	; 0x20
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <loop1+0x3fa>
    2d36:	98 a3       	std	Y+32, r25	; 0x20
    2d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	89 a1       	ldd	r24, Y+33	; 0x21
    2d46:	9a a1       	ldd	r25, Y+34	; 0x22
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <loop1+0x3ee>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <loop1+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	9e 8f       	std	Y+30, r25	; 0x1e
    2d68:	8d 8f       	std	Y+29, r24	; 0x1d
    2d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <loop1+0x436>
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	8d 8f       	std	Y+29, r24	; 0x1d
			SET_BIT(PORTC,PIN2);
    2d76:	a5 e3       	ldi	r26, 0x35	; 53
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e5 e3       	ldi	r30, 0x35	; 53
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	84 60       	ori	r24, 0x04	; 4
    2d82:	8c 93       	st	X, r24
			g_temp-=3;
    2d84:	80 91 bc 01 	lds	r24, 0x01BC
    2d88:	90 91 bd 01 	lds	r25, 0x01BD
    2d8c:	a0 91 be 01 	lds	r26, 0x01BE
    2d90:	b0 91 bf 01 	lds	r27, 0x01BF
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e4       	ldi	r20, 0x40	; 64
    2d9e:	50 e4       	ldi	r21, 0x40	; 64
    2da0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	80 93 bc 01 	sts	0x01BC, r24
    2dac:	90 93 bd 01 	sts	0x01BD, r25
    2db0:	a0 93 be 01 	sts	0x01BE, r26
    2db4:	b0 93 bf 01 	sts	0x01BF, r27
			max++;
    2db8:	80 91 bb 01 	lds	r24, 0x01BB
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	80 93 bb 01 	sts	0x01BB, r24
		}
		if(ran == 4) {
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e9 5b       	subi	r30, 0xB9	; 185
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	84 30       	cpi	r24, 0x04	; 4
    2dce:	91 05       	cpc	r25, r1
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <loop1+0x49c>
    2dd2:	a8 c0       	rjmp	.+336    	; 0x2f24 <loop1+0x5ec>
			CLEAR_BIT(PORTC,PIN3);
    2dd4:	a5 e3       	ldi	r26, 0x35	; 53
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e5 e3       	ldi	r30, 0x35	; 53
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	87 7f       	andi	r24, 0xF7	; 247
    2de0:	8c 93       	st	X, r24
			_delay_ms(time);
    2de2:	80 91 b8 01 	lds	r24, 0x01B8
    2de6:	90 91 b9 01 	lds	r25, 0x01B9
    2dea:	cc 01       	movw	r24, r24
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	89 8f       	std	Y+25, r24	; 0x19
    2dfe:	9a 8f       	std	Y+26, r25	; 0x1a
    2e00:	ab 8f       	std	Y+27, r26	; 0x1b
    2e02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	69 8d       	ldd	r22, Y+25	; 0x19
    2e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a e7       	ldi	r20, 0x7A	; 122
    2e12:	53 e4       	ldi	r21, 0x43	; 67
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8d 8b       	std	Y+21, r24	; 0x15
    2e1e:	9e 8b       	std	Y+22, r25	; 0x16
    2e20:	af 8b       	std	Y+23, r26	; 0x17
    2e22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e24:	6d 89       	ldd	r22, Y+21	; 0x15
    2e26:	7e 89       	ldd	r23, Y+22	; 0x16
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <loop1+0x50e>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9c 8b       	std	Y+20, r25	; 0x14
    2e42:	8b 8b       	std	Y+19, r24	; 0x13
    2e44:	3f c0       	rjmp	.+126    	; 0x2ec4 <loop1+0x58c>
	else if (__tmp > 65535)
    2e46:	6d 89       	ldd	r22, Y+21	; 0x15
    2e48:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	4c f5       	brge	.+82     	; 0x2eb0 <loop1+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <loop1+0x56e>
    2e88:	89 e1       	ldi	r24, 0x19	; 25
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9a 8b       	std	Y+18, r25	; 0x12
    2e8e:	89 8b       	std	Y+17, r24	; 0x11
    2e90:	89 89       	ldd	r24, Y+17	; 0x11
    2e92:	9a 89       	ldd	r25, Y+18	; 0x12
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <loop1+0x55c>
    2e98:	9a 8b       	std	Y+18, r25	; 0x12
    2e9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	9c 8b       	std	Y+20, r25	; 0x14
    2ea4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f7       	brne	.-38     	; 0x2e88 <loop1+0x550>
    2eae:	14 c0       	rjmp	.+40     	; 0x2ed8 <loop1+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9c 8b       	std	Y+20, r25	; 0x14
    2ec2:	8b 8b       	std	Y+19, r24	; 0x13
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	98 8b       	std	Y+16, r25	; 0x10
    2eca:	8f 87       	std	Y+15, r24	; 0x0f
    2ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ece:	98 89       	ldd	r25, Y+16	; 0x10
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <loop1+0x598>
    2ed4:	98 8b       	std	Y+16, r25	; 0x10
    2ed6:	8f 87       	std	Y+15, r24	; 0x0f
			SET_BIT(PORTC,PIN3);
    2ed8:	a5 e3       	ldi	r26, 0x35	; 53
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e5 e3       	ldi	r30, 0x35	; 53
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	88 60       	ori	r24, 0x08	; 8
    2ee4:	8c 93       	st	X, r24
			g_temp*=4;
    2ee6:	80 91 bc 01 	lds	r24, 0x01BC
    2eea:	90 91 bd 01 	lds	r25, 0x01BD
    2eee:	a0 91 be 01 	lds	r26, 0x01BE
    2ef2:	b0 91 bf 01 	lds	r27, 0x01BF
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	50 e4       	ldi	r21, 0x40	; 64
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	80 93 bc 01 	sts	0x01BC, r24
    2f0e:	90 93 bd 01 	sts	0x01BD, r25
    2f12:	a0 93 be 01 	sts	0x01BE, r26
    2f16:	b0 93 bf 01 	sts	0x01BF, r27
			max++;
    2f1a:	80 91 bb 01 	lds	r24, 0x01BB
    2f1e:	8f 5f       	subi	r24, 0xFF	; 255
    2f20:	80 93 bb 01 	sts	0x01BB, r24
 * temp check if it right or wrong
 * we decrease time by 10ms every time the answer is correct
 */
void loop1() {

	for (int var = 0; var < 4; var++) {
    2f24:	de 01       	movw	r26, r28
    2f26:	a7 5b       	subi	r26, 0xB7	; 183
    2f28:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e7 5b       	subi	r30, 0xB7	; 183
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	9c 93       	st	X, r25
    2f3a:	8e 93       	st	-X, r24
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 5b       	subi	r30, 0xB7	; 183
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	84 30       	cpi	r24, 0x04	; 4
    2f48:	91 05       	cpc	r25, r1
    2f4a:	0c f4       	brge	.+2      	; 0x2f4e <loop1+0x616>
    2f4c:	08 cd       	rjmp	.-1520   	; 0x295e <loop1+0x26>
			SET_BIT(PORTC,PIN3);
			g_temp*=4;
			max++;
		}
	}
	if(time==0)
    2f4e:	80 91 b8 01 	lds	r24, 0x01B8
    2f52:	90 91 b9 01 	lds	r25, 0x01B9
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <loop1+0x624>
    2f5a:	8a c0       	rjmp	.+276    	; 0x3070 <loop1+0x738>
	{
		time=600;
    2f5c:	88 e5       	ldi	r24, 0x58	; 88
    2f5e:	92 e0       	ldi	r25, 0x02	; 2
    2f60:	90 93 b9 01 	sts	0x01B9, r25
    2f64:	80 93 b8 01 	sts	0x01B8, r24
		LCD_displayStringRowColumn(0, 4, "CONGRATS");
    2f68:	28 e6       	ldi	r18, 0x68	; 104
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	64 e0       	ldi	r22, 0x04	; 4
    2f70:	a9 01       	movw	r20, r18
    2f72:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "You finished OOH");
    2f76:	21 e7       	ldi	r18, 0x71	; 113
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	a9 01       	movw	r20, r18
    2f80:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_displayStringRowColumn>
		i=0;
    2f84:	10 92 ba 01 	sts	0x01BA, r1
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	aa ef       	ldi	r26, 0xFA	; 250
    2f8e:	b4 e4       	ldi	r27, 0x44	; 68
    2f90:	8b 87       	std	Y+11, r24	; 0x0b
    2f92:	9c 87       	std	Y+12, r25	; 0x0c
    2f94:	ad 87       	std	Y+13, r26	; 0x0d
    2f96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a e7       	ldi	r20, 0x7A	; 122
    2fa6:	53 e4       	ldi	r21, 0x43	; 67
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8f 83       	std	Y+7, r24	; 0x07
    2fb2:	98 87       	std	Y+8, r25	; 0x08
    2fb4:	a9 87       	std	Y+9, r26	; 0x09
    2fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fba:	78 85       	ldd	r23, Y+8	; 0x08
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <loop1+0x6a2>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <loop1+0x720>
	else if (__tmp > 65535)
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <loop1+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	0f c0       	rjmp	.+30     	; 0x303a <loop1+0x702>
    301c:	89 e1       	ldi	r24, 0x19	; 25
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9c 83       	std	Y+4, r25	; 0x04
    3022:	8b 83       	std	Y+3, r24	; 0x03
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <loop1+0x6f0>
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <loop1+0x6e4>
    3042:	14 c0       	rjmp	.+40     	; 0x306c <loop1+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	6f 81       	ldd	r22, Y+7	; 0x07
    3046:	78 85       	ldd	r23, Y+8	; 0x08
    3048:	89 85       	ldd	r24, Y+9	; 0x09
    304a:	9a 85       	ldd	r25, Y+10	; 0x0a
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <loop1+0x72c>
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		start();
    306c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <start>
	}
	time-=20;
    3070:	80 91 b8 01 	lds	r24, 0x01B8
    3074:	90 91 b9 01 	lds	r25, 0x01B9
    3078:	44 97       	sbiw	r24, 0x14	; 20
    307a:	90 93 b9 01 	sts	0x01B9, r25
    307e:	80 93 b8 01 	sts	0x01B8, r24
}
    3082:	c6 5b       	subi	r28, 0xB6	; 182
    3084:	df 4f       	sbci	r29, 0xFF	; 255
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	08 95       	ret

0000309a <check>:
 * when v = max we enter the loop and check if we turn on the same leds as in the function loop1
 * if yes correct and we return temp,tem2=0 to start again
 * else game over we return temp,tem2=0 to start again and we return time=1000
 */
void check(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	aa 97       	sbiw	r28, 0x2a	; 42
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	e7 c1       	rjmp	.+974    	; 0x347e <check+0x3e4>
	while(v == max) {
		max=0;
    30b0:	10 92 bb 01 	sts	0x01BB, r1
		v=0;
    30b4:	10 92 b7 01 	sts	0x01B7, r1
		if(g_temp==g_temp2)
    30b8:	80 91 bc 01 	lds	r24, 0x01BC
    30bc:	90 91 bd 01 	lds	r25, 0x01BD
    30c0:	a0 91 be 01 	lds	r26, 0x01BE
    30c4:	b0 91 bf 01 	lds	r27, 0x01BF
    30c8:	20 91 c0 01 	lds	r18, 0x01C0
    30cc:	30 91 c1 01 	lds	r19, 0x01C1
    30d0:	40 91 c2 01 	lds	r20, 0x01C2
    30d4:	50 91 c3 01 	lds	r21, 0x01C3
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <check+0x4c>
    30e4:	a9 c0       	rjmp	.+338    	; 0x3238 <check+0x19e>
		{
			LCD_DisplayString("correct");
    30e6:	82 e8       	ldi	r24, 0x82	; 130
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_DisplayString>
			i++;
    30ee:	80 91 ba 01 	lds	r24, 0x01BA
    30f2:	8f 5f       	subi	r24, 0xFF	; 255
    30f4:	80 93 ba 01 	sts	0x01BA, r24
			LCD_displayStringRowColumn(1, 0, "score");
    30f8:	2a e8       	ldi	r18, 0x8A	; 138
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	a9 01       	movw	r20, r18
    3102:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 6);
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	66 e0       	ldi	r22, 0x06	; 6
    310a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_moveCursor>
			LCD_intgerToString(i);
    310e:	80 91 ba 01 	lds	r24, 0x01BA
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_intgerToString>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e8       	ldi	r25, 0x80	; 128
    311e:	ab e3       	ldi	r26, 0x3B	; 59
    3120:	b4 e4       	ldi	r27, 0x44	; 68
    3122:	8f a3       	std	Y+39, r24	; 0x27
    3124:	98 a7       	std	Y+40, r25	; 0x28
    3126:	a9 a7       	std	Y+41, r26	; 0x29
    3128:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312a:	6f a1       	ldd	r22, Y+39	; 0x27
    312c:	78 a5       	ldd	r23, Y+40	; 0x28
    312e:	89 a5       	ldd	r24, Y+41	; 0x29
    3130:	9a a5       	ldd	r25, Y+42	; 0x2a
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	4a e7       	ldi	r20, 0x7A	; 122
    3138:	53 e4       	ldi	r21, 0x43	; 67
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8b a3       	std	Y+35, r24	; 0x23
    3144:	9c a3       	std	Y+36, r25	; 0x24
    3146:	ad a3       	std	Y+37, r26	; 0x25
    3148:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    314a:	6b a1       	ldd	r22, Y+35	; 0x23
    314c:	7c a1       	ldd	r23, Y+36	; 0x24
    314e:	8d a1       	ldd	r24, Y+37	; 0x25
    3150:	9e a1       	ldd	r25, Y+38	; 0x26
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	2c f4       	brge	.+10     	; 0x316c <check+0xd2>
		__ticks = 1;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	9a a3       	std	Y+34, r25	; 0x22
    3168:	89 a3       	std	Y+33, r24	; 0x21
    316a:	3f c0       	rjmp	.+126    	; 0x31ea <check+0x150>
	else if (__tmp > 65535)
    316c:	6b a1       	ldd	r22, Y+35	; 0x23
    316e:	7c a1       	ldd	r23, Y+36	; 0x24
    3170:	8d a1       	ldd	r24, Y+37	; 0x25
    3172:	9e a1       	ldd	r25, Y+38	; 0x26
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	4c f5       	brge	.+82     	; 0x31d6 <check+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3184:	6f a1       	ldd	r22, Y+39	; 0x27
    3186:	78 a5       	ldd	r23, Y+40	; 0x28
    3188:	89 a5       	ldd	r24, Y+41	; 0x29
    318a:	9a a5       	ldd	r25, Y+42	; 0x2a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <check+0x132>
    31ae:	89 e1       	ldi	r24, 0x19	; 25
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	98 a3       	std	Y+32, r25	; 0x20
    31b4:	8f 8f       	std	Y+31, r24	; 0x1f
    31b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b8:	98 a1       	ldd	r25, Y+32	; 0x20
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <check+0x120>
    31be:	98 a3       	std	Y+32, r25	; 0x20
    31c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c2:	89 a1       	ldd	r24, Y+33	; 0x21
    31c4:	9a a1       	ldd	r25, Y+34	; 0x22
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	9a a3       	std	Y+34, r25	; 0x22
    31ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	89 a1       	ldd	r24, Y+33	; 0x21
    31ce:	9a a1       	ldd	r25, Y+34	; 0x22
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	69 f7       	brne	.-38     	; 0x31ae <check+0x114>
    31d4:	14 c0       	rjmp	.+40     	; 0x31fe <check+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	6b a1       	ldd	r22, Y+35	; 0x23
    31d8:	7c a1       	ldd	r23, Y+36	; 0x24
    31da:	8d a1       	ldd	r24, Y+37	; 0x25
    31dc:	9e a1       	ldd	r25, Y+38	; 0x26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	89 a1       	ldd	r24, Y+33	; 0x21
    31ec:	9a a1       	ldd	r25, Y+34	; 0x22
    31ee:	9e 8f       	std	Y+30, r25	; 0x1e
    31f0:	8d 8f       	std	Y+29, r24	; 0x1d
    31f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <check+0x15c>
    31fa:	9e 8f       	std	Y+30, r25	; 0x1e
    31fc:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(750);
			LCD_clearScreen();
    31fe:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_clearScreen>
			g_temp=0;
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	80 93 bc 01 	sts	0x01BC, r24
    320e:	90 93 bd 01 	sts	0x01BD, r25
    3212:	a0 93 be 01 	sts	0x01BE, r26
    3216:	b0 93 bf 01 	sts	0x01BF, r27
			g_temp2=0;
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e0       	ldi	r26, 0x00	; 0
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	80 93 c0 01 	sts	0x01C0, r24
    3226:	90 93 c1 01 	sts	0x01C1, r25
    322a:	a0 93 c2 01 	sts	0x01C2, r26
    322e:	b0 93 c3 01 	sts	0x01C3, r27
			loop1();
    3232:	0e 94 9c 14 	call	0x2938	; 0x2938 <loop1>
    3236:	23 c1       	rjmp	.+582    	; 0x347e <check+0x3e4>
		}
		else
		{
			LCD_DisplayString("game over");
    3238:	80 e9       	ldi	r24, 0x90	; 144
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_DisplayString>
			LCD_displayStringRowColumn(1, 0, "score");
    3240:	2a e8       	ldi	r18, 0x8A	; 138
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	a9 01       	movw	r20, r18
    324a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 6);
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	66 e0       	ldi	r22, 0x06	; 6
    3252:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_moveCursor>
			LCD_intgerToString(i);
    3256:	80 91 ba 01 	lds	r24, 0x01BA
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_intgerToString>
			i=0;
    3262:	10 92 ba 01 	sts	0x01BA, r1
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	aa ef       	ldi	r26, 0xFA	; 250
    326c:	b3 e4       	ldi	r27, 0x43	; 67
    326e:	89 8f       	std	Y+25, r24	; 0x19
    3270:	9a 8f       	std	Y+26, r25	; 0x1a
    3272:	ab 8f       	std	Y+27, r26	; 0x1b
    3274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	69 8d       	ldd	r22, Y+25	; 0x19
    3278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a e7       	ldi	r20, 0x7A	; 122
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8d 8b       	std	Y+21, r24	; 0x15
    3290:	9e 8b       	std	Y+22, r25	; 0x16
    3292:	af 8b       	std	Y+23, r26	; 0x17
    3294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <check+0x21e>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <check+0x29c>
	else if (__tmp > 65535)
    32b8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ba:	7e 89       	ldd	r23, Y+22	; 0x16
    32bc:	8f 89       	ldd	r24, Y+23	; 0x17
    32be:	98 8d       	ldd	r25, Y+24	; 0x18
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <check+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	69 8d       	ldd	r22, Y+25	; 0x19
    32d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9c 8b       	std	Y+20, r25	; 0x14
    32f6:	8b 8b       	std	Y+19, r24	; 0x13
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <check+0x27e>
    32fa:	89 e1       	ldi	r24, 0x19	; 25
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9a 8b       	std	Y+18, r25	; 0x12
    3300:	89 8b       	std	Y+17, r24	; 0x11
    3302:	89 89       	ldd	r24, Y+17	; 0x11
    3304:	9a 89       	ldd	r25, Y+18	; 0x12
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <check+0x26c>
    330a:	9a 8b       	std	Y+18, r25	; 0x12
    330c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	8b 89       	ldd	r24, Y+19	; 0x13
    3310:	9c 89       	ldd	r25, Y+20	; 0x14
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9c 8b       	std	Y+20, r25	; 0x14
    3316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	8b 89       	ldd	r24, Y+19	; 0x13
    331a:	9c 89       	ldd	r25, Y+20	; 0x14
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <check+0x260>
    3320:	14 c0       	rjmp	.+40     	; 0x334a <check+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	6d 89       	ldd	r22, Y+21	; 0x15
    3324:	7e 89       	ldd	r23, Y+22	; 0x16
    3326:	8f 89       	ldd	r24, Y+23	; 0x17
    3328:	98 8d       	ldd	r25, Y+24	; 0x18
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
    3336:	8b 89       	ldd	r24, Y+19	; 0x13
    3338:	9c 89       	ldd	r25, Y+20	; 0x14
    333a:	98 8b       	std	Y+16, r25	; 0x10
    333c:	8f 87       	std	Y+15, r24	; 0x0f
    333e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3340:	98 89       	ldd	r25, Y+16	; 0x10
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <check+0x2a8>
    3346:	98 8b       	std	Y+16, r25	; 0x10
    3348:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_clearScreen();
    334a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_clearScreen>
			LCD_DisplayString("Start a new game");
    334e:	8a e9       	ldi	r24, 0x9A	; 154
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_DisplayString>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	aa e7       	ldi	r26, 0x7A	; 122
    335c:	b4 e4       	ldi	r27, 0x44	; 68
    335e:	8b 87       	std	Y+11, r24	; 0x0b
    3360:	9c 87       	std	Y+12, r25	; 0x0c
    3362:	ad 87       	std	Y+13, r26	; 0x0d
    3364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3366:	6b 85       	ldd	r22, Y+11	; 0x0b
    3368:	7c 85       	ldd	r23, Y+12	; 0x0c
    336a:	8d 85       	ldd	r24, Y+13	; 0x0d
    336c:	9e 85       	ldd	r25, Y+14	; 0x0e
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	53 e4       	ldi	r21, 0x43	; 67
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8f 83       	std	Y+7, r24	; 0x07
    3380:	98 87       	std	Y+8, r25	; 0x08
    3382:	a9 87       	std	Y+9, r26	; 0x09
    3384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3386:	6f 81       	ldd	r22, Y+7	; 0x07
    3388:	78 85       	ldd	r23, Y+8	; 0x08
    338a:	89 85       	ldd	r24, Y+9	; 0x09
    338c:	9a 85       	ldd	r25, Y+10	; 0x0a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <check+0x30e>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	3f c0       	rjmp	.+126    	; 0x3426 <check+0x38c>
	else if (__tmp > 65535)
    33a8:	6f 81       	ldd	r22, Y+7	; 0x07
    33aa:	78 85       	ldd	r23, Y+8	; 0x08
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	3f ef       	ldi	r19, 0xFF	; 255
    33b4:	4f e7       	ldi	r20, 0x7F	; 127
    33b6:	57 e4       	ldi	r21, 0x47	; 71
    33b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33bc:	18 16       	cp	r1, r24
    33be:	4c f5       	brge	.+82     	; 0x3412 <check+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e2       	ldi	r20, 0x20	; 32
    33ce:	51 e4       	ldi	r21, 0x41	; 65
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9e 83       	std	Y+6, r25	; 0x06
    33e6:	8d 83       	std	Y+5, r24	; 0x05
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <check+0x36e>
    33ea:	89 e1       	ldi	r24, 0x19	; 25
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9c 83       	std	Y+4, r25	; 0x04
    33f0:	8b 83       	std	Y+3, r24	; 0x03
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <check+0x35c>
    33fa:	9c 83       	std	Y+4, r25	; 0x04
    33fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	9e 83       	std	Y+6, r25	; 0x06
    3406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	8d 81       	ldd	r24, Y+5	; 0x05
    340a:	9e 81       	ldd	r25, Y+6	; 0x06
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	69 f7       	brne	.-38     	; 0x33ea <check+0x350>
    3410:	14 c0       	rjmp	.+40     	; 0x343a <check+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	8d 81       	ldd	r24, Y+5	; 0x05
    3428:	9e 81       	ldd	r25, Y+6	; 0x06
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <check+0x398>
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    343a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_clearScreen>
			time=1000;
    343e:	88 ee       	ldi	r24, 0xE8	; 232
    3440:	93 e0       	ldi	r25, 0x03	; 3
    3442:	90 93 b9 01 	sts	0x01B9, r25
    3446:	80 93 b8 01 	sts	0x01B8, r24
			g_temp=0;
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	80 93 bc 01 	sts	0x01BC, r24
    3456:	90 93 bd 01 	sts	0x01BD, r25
    345a:	a0 93 be 01 	sts	0x01BE, r26
    345e:	b0 93 bf 01 	sts	0x01BF, r27
			g_temp2=0;
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	a0 e0       	ldi	r26, 0x00	; 0
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	80 93 c0 01 	sts	0x01C0, r24
    346e:	90 93 c1 01 	sts	0x01C1, r25
    3472:	a0 93 c2 01 	sts	0x01C2, r26
    3476:	b0 93 c3 01 	sts	0x01C3, r27
			loop1();
    347a:	0e 94 9c 14 	call	0x2938	; 0x2938 <loop1>
 * if yes correct and we return temp,tem2=0 to start again
 * else game over we return temp,tem2=0 to start again and we return time=1000
 */
void check(void)
{
	while(v == max) {
    347e:	90 91 b7 01 	lds	r25, 0x01B7
    3482:	80 91 bb 01 	lds	r24, 0x01BB
    3486:	98 17       	cp	r25, r24
    3488:	09 f4       	brne	.+2      	; 0x348c <check+0x3f2>
    348a:	12 ce       	rjmp	.-988    	; 0x30b0 <check+0x16>
			g_temp=0;
			g_temp2=0;
			loop1();
		}
	}
	v++;
    348c:	80 91 b7 01 	lds	r24, 0x01B7
    3490:	8f 5f       	subi	r24, 0xFF	; 255
    3492:	80 93 b7 01 	sts	0x01B7, r24
}
    3496:	aa 96       	adiw	r28, 0x2a	; 42
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <__divmodhi4>:
    34a8:	97 fb       	bst	r25, 7
    34aa:	09 2e       	mov	r0, r25
    34ac:	07 26       	eor	r0, r23
    34ae:	0a d0       	rcall	.+20     	; 0x34c4 <__divmodhi4_neg1>
    34b0:	77 fd       	sbrc	r23, 7
    34b2:	04 d0       	rcall	.+8      	; 0x34bc <__divmodhi4_neg2>
    34b4:	0c d0       	rcall	.+24     	; 0x34ce <__udivmodhi4>
    34b6:	06 d0       	rcall	.+12     	; 0x34c4 <__divmodhi4_neg1>
    34b8:	00 20       	and	r0, r0
    34ba:	1a f4       	brpl	.+6      	; 0x34c2 <__divmodhi4_exit>

000034bc <__divmodhi4_neg2>:
    34bc:	70 95       	com	r23
    34be:	61 95       	neg	r22
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255

000034c2 <__divmodhi4_exit>:
    34c2:	08 95       	ret

000034c4 <__divmodhi4_neg1>:
    34c4:	f6 f7       	brtc	.-4      	; 0x34c2 <__divmodhi4_exit>
    34c6:	90 95       	com	r25
    34c8:	81 95       	neg	r24
    34ca:	9f 4f       	sbci	r25, 0xFF	; 255
    34cc:	08 95       	ret

000034ce <__udivmodhi4>:
    34ce:	aa 1b       	sub	r26, r26
    34d0:	bb 1b       	sub	r27, r27
    34d2:	51 e1       	ldi	r21, 0x11	; 17
    34d4:	07 c0       	rjmp	.+14     	; 0x34e4 <__udivmodhi4_ep>

000034d6 <__udivmodhi4_loop>:
    34d6:	aa 1f       	adc	r26, r26
    34d8:	bb 1f       	adc	r27, r27
    34da:	a6 17       	cp	r26, r22
    34dc:	b7 07       	cpc	r27, r23
    34de:	10 f0       	brcs	.+4      	; 0x34e4 <__udivmodhi4_ep>
    34e0:	a6 1b       	sub	r26, r22
    34e2:	b7 0b       	sbc	r27, r23

000034e4 <__udivmodhi4_ep>:
    34e4:	88 1f       	adc	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	5a 95       	dec	r21
    34ea:	a9 f7       	brne	.-22     	; 0x34d6 <__udivmodhi4_loop>
    34ec:	80 95       	com	r24
    34ee:	90 95       	com	r25
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	08 95       	ret

000034f6 <__prologue_saves__>:
    34f6:	2f 92       	push	r2
    34f8:	3f 92       	push	r3
    34fa:	4f 92       	push	r4
    34fc:	5f 92       	push	r5
    34fe:	6f 92       	push	r6
    3500:	7f 92       	push	r7
    3502:	8f 92       	push	r8
    3504:	9f 92       	push	r9
    3506:	af 92       	push	r10
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	ca 1b       	sub	r28, r26
    3520:	db 0b       	sbc	r29, r27
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	09 94       	ijmp

0000352e <__epilogue_restores__>:
    352e:	2a 88       	ldd	r2, Y+18	; 0x12
    3530:	39 88       	ldd	r3, Y+17	; 0x11
    3532:	48 88       	ldd	r4, Y+16	; 0x10
    3534:	5f 84       	ldd	r5, Y+15	; 0x0f
    3536:	6e 84       	ldd	r6, Y+14	; 0x0e
    3538:	7d 84       	ldd	r7, Y+13	; 0x0d
    353a:	8c 84       	ldd	r8, Y+12	; 0x0c
    353c:	9b 84       	ldd	r9, Y+11	; 0x0b
    353e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3540:	b9 84       	ldd	r11, Y+9	; 0x09
    3542:	c8 84       	ldd	r12, Y+8	; 0x08
    3544:	df 80       	ldd	r13, Y+7	; 0x07
    3546:	ee 80       	ldd	r14, Y+6	; 0x06
    3548:	fd 80       	ldd	r15, Y+5	; 0x05
    354a:	0c 81       	ldd	r16, Y+4	; 0x04
    354c:	1b 81       	ldd	r17, Y+3	; 0x03
    354e:	aa 81       	ldd	r26, Y+2	; 0x02
    3550:	b9 81       	ldd	r27, Y+1	; 0x01
    3552:	ce 0f       	add	r28, r30
    3554:	d1 1d       	adc	r29, r1
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	ed 01       	movw	r28, r26
    3562:	08 95       	ret

00003564 <do_rand>:
    3564:	a0 e0       	ldi	r26, 0x00	; 0
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e8 eb       	ldi	r30, 0xB8	; 184
    356a:	fa e1       	ldi	r31, 0x1A	; 26
    356c:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x10>
    3570:	ec 01       	movw	r28, r24
    3572:	a8 80       	ld	r10, Y
    3574:	b9 80       	ldd	r11, Y+1	; 0x01
    3576:	ca 80       	ldd	r12, Y+2	; 0x02
    3578:	db 80       	ldd	r13, Y+3	; 0x03
    357a:	a1 14       	cp	r10, r1
    357c:	b1 04       	cpc	r11, r1
    357e:	c1 04       	cpc	r12, r1
    3580:	d1 04       	cpc	r13, r1
    3582:	41 f4       	brne	.+16     	; 0x3594 <do_rand+0x30>
    3584:	84 e2       	ldi	r24, 0x24	; 36
    3586:	a8 2e       	mov	r10, r24
    3588:	89 ed       	ldi	r24, 0xD9	; 217
    358a:	b8 2e       	mov	r11, r24
    358c:	8b e5       	ldi	r24, 0x5B	; 91
    358e:	c8 2e       	mov	r12, r24
    3590:	87 e0       	ldi	r24, 0x07	; 7
    3592:	d8 2e       	mov	r13, r24
    3594:	c6 01       	movw	r24, r12
    3596:	b5 01       	movw	r22, r10
    3598:	2d e1       	ldi	r18, 0x1D	; 29
    359a:	33 ef       	ldi	r19, 0xF3	; 243
    359c:	41 e0       	ldi	r20, 0x01	; 1
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__divmodsi4>
    35a4:	27 ea       	ldi	r18, 0xA7	; 167
    35a6:	31 e4       	ldi	r19, 0x41	; 65
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	0e 94 44 1b 	call	0x3688	; 0x3688 <__mulsi3>
    35b0:	7b 01       	movw	r14, r22
    35b2:	8c 01       	movw	r16, r24
    35b4:	c6 01       	movw	r24, r12
    35b6:	b5 01       	movw	r22, r10
    35b8:	2d e1       	ldi	r18, 0x1D	; 29
    35ba:	33 ef       	ldi	r19, 0xF3	; 243
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__divmodsi4>
    35c4:	ca 01       	movw	r24, r20
    35c6:	b9 01       	movw	r22, r18
    35c8:	2c ee       	ldi	r18, 0xEC	; 236
    35ca:	34 ef       	ldi	r19, 0xF4	; 244
    35cc:	4f ef       	ldi	r20, 0xFF	; 255
    35ce:	5f ef       	ldi	r21, 0xFF	; 255
    35d0:	0e 94 44 1b 	call	0x3688	; 0x3688 <__mulsi3>
    35d4:	6e 0d       	add	r22, r14
    35d6:	7f 1d       	adc	r23, r15
    35d8:	80 1f       	adc	r24, r16
    35da:	91 1f       	adc	r25, r17
    35dc:	97 ff       	sbrs	r25, 7
    35de:	04 c0       	rjmp	.+8      	; 0x35e8 <do_rand+0x84>
    35e0:	61 50       	subi	r22, 0x01	; 1
    35e2:	70 40       	sbci	r23, 0x00	; 0
    35e4:	80 40       	sbci	r24, 0x00	; 0
    35e6:	90 48       	sbci	r25, 0x80	; 128
    35e8:	68 83       	st	Y, r22
    35ea:	79 83       	std	Y+1, r23	; 0x01
    35ec:	8a 83       	std	Y+2, r24	; 0x02
    35ee:	9b 83       	std	Y+3, r25	; 0x03
    35f0:	9b 01       	movw	r18, r22
    35f2:	3f 77       	andi	r19, 0x7F	; 127
    35f4:	c9 01       	movw	r24, r18
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	ea e0       	ldi	r30, 0x0A	; 10
    35fc:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x10>

00003600 <rand_r>:
    3600:	0e 94 b2 1a 	call	0x3564	; 0x3564 <do_rand>
    3604:	08 95       	ret

00003606 <rand>:
    3606:	83 eb       	ldi	r24, 0xB3	; 179
    3608:	91 e0       	ldi	r25, 0x01	; 1
    360a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <do_rand>
    360e:	08 95       	ret

00003610 <srand>:
    3610:	a0 e0       	ldi	r26, 0x00	; 0
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	80 93 b3 01 	sts	0x01B3, r24
    3618:	90 93 b4 01 	sts	0x01B4, r25
    361c:	a0 93 b5 01 	sts	0x01B5, r26
    3620:	b0 93 b6 01 	sts	0x01B6, r27
    3624:	08 95       	ret

00003626 <itoa>:
    3626:	fb 01       	movw	r30, r22
    3628:	9f 01       	movw	r18, r30
    362a:	e8 94       	clt
    362c:	42 30       	cpi	r20, 0x02	; 2
    362e:	c4 f0       	brlt	.+48     	; 0x3660 <itoa+0x3a>
    3630:	45 32       	cpi	r20, 0x25	; 37
    3632:	b4 f4       	brge	.+44     	; 0x3660 <itoa+0x3a>
    3634:	4a 30       	cpi	r20, 0x0A	; 10
    3636:	29 f4       	brne	.+10     	; 0x3642 <itoa+0x1c>
    3638:	97 fb       	bst	r25, 7
    363a:	1e f4       	brtc	.+6      	; 0x3642 <itoa+0x1c>
    363c:	90 95       	com	r25
    363e:	81 95       	neg	r24
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	64 2f       	mov	r22, r20
    3644:	77 27       	eor	r23, r23
    3646:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodhi4>
    364a:	80 5d       	subi	r24, 0xD0	; 208
    364c:	8a 33       	cpi	r24, 0x3A	; 58
    364e:	0c f0       	brlt	.+2      	; 0x3652 <itoa+0x2c>
    3650:	89 5d       	subi	r24, 0xD9	; 217
    3652:	81 93       	st	Z+, r24
    3654:	cb 01       	movw	r24, r22
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	a1 f7       	brne	.-24     	; 0x3642 <itoa+0x1c>
    365a:	16 f4       	brtc	.+4      	; 0x3660 <itoa+0x3a>
    365c:	5d e2       	ldi	r21, 0x2D	; 45
    365e:	51 93       	st	Z+, r21
    3660:	10 82       	st	Z, r1
    3662:	c9 01       	movw	r24, r18
    3664:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <strrev>

00003668 <strrev>:
    3668:	dc 01       	movw	r26, r24
    366a:	fc 01       	movw	r30, r24
    366c:	67 2f       	mov	r22, r23
    366e:	71 91       	ld	r23, Z+
    3670:	77 23       	and	r23, r23
    3672:	e1 f7       	brne	.-8      	; 0x366c <strrev+0x4>
    3674:	32 97       	sbiw	r30, 0x02	; 2
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <strrev+0x18>
    3678:	7c 91       	ld	r23, X
    367a:	6d 93       	st	X+, r22
    367c:	70 83       	st	Z, r23
    367e:	62 91       	ld	r22, -Z
    3680:	ae 17       	cp	r26, r30
    3682:	bf 07       	cpc	r27, r31
    3684:	c8 f3       	brcs	.-14     	; 0x3678 <strrev+0x10>
    3686:	08 95       	ret

00003688 <__mulsi3>:
    3688:	62 9f       	mul	r22, r18
    368a:	d0 01       	movw	r26, r0
    368c:	73 9f       	mul	r23, r19
    368e:	f0 01       	movw	r30, r0
    3690:	82 9f       	mul	r24, r18
    3692:	e0 0d       	add	r30, r0
    3694:	f1 1d       	adc	r31, r1
    3696:	64 9f       	mul	r22, r20
    3698:	e0 0d       	add	r30, r0
    369a:	f1 1d       	adc	r31, r1
    369c:	92 9f       	mul	r25, r18
    369e:	f0 0d       	add	r31, r0
    36a0:	83 9f       	mul	r24, r19
    36a2:	f0 0d       	add	r31, r0
    36a4:	74 9f       	mul	r23, r20
    36a6:	f0 0d       	add	r31, r0
    36a8:	65 9f       	mul	r22, r21
    36aa:	f0 0d       	add	r31, r0
    36ac:	99 27       	eor	r25, r25
    36ae:	72 9f       	mul	r23, r18
    36b0:	b0 0d       	add	r27, r0
    36b2:	e1 1d       	adc	r30, r1
    36b4:	f9 1f       	adc	r31, r25
    36b6:	63 9f       	mul	r22, r19
    36b8:	b0 0d       	add	r27, r0
    36ba:	e1 1d       	adc	r30, r1
    36bc:	f9 1f       	adc	r31, r25
    36be:	bd 01       	movw	r22, r26
    36c0:	cf 01       	movw	r24, r30
    36c2:	11 24       	eor	r1, r1
    36c4:	08 95       	ret

000036c6 <__divmodsi4>:
    36c6:	97 fb       	bst	r25, 7
    36c8:	09 2e       	mov	r0, r25
    36ca:	05 26       	eor	r0, r21
    36cc:	0e d0       	rcall	.+28     	; 0x36ea <__divmodsi4_neg1>
    36ce:	57 fd       	sbrc	r21, 7
    36d0:	04 d0       	rcall	.+8      	; 0x36da <__divmodsi4_neg2>
    36d2:	14 d0       	rcall	.+40     	; 0x36fc <__udivmodsi4>
    36d4:	0a d0       	rcall	.+20     	; 0x36ea <__divmodsi4_neg1>
    36d6:	00 1c       	adc	r0, r0
    36d8:	38 f4       	brcc	.+14     	; 0x36e8 <__divmodsi4_exit>

000036da <__divmodsi4_neg2>:
    36da:	50 95       	com	r21
    36dc:	40 95       	com	r20
    36de:	30 95       	com	r19
    36e0:	21 95       	neg	r18
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255
    36e4:	4f 4f       	sbci	r20, 0xFF	; 255
    36e6:	5f 4f       	sbci	r21, 0xFF	; 255

000036e8 <__divmodsi4_exit>:
    36e8:	08 95       	ret

000036ea <__divmodsi4_neg1>:
    36ea:	f6 f7       	brtc	.-4      	; 0x36e8 <__divmodsi4_exit>
    36ec:	90 95       	com	r25
    36ee:	80 95       	com	r24
    36f0:	70 95       	com	r23
    36f2:	61 95       	neg	r22
    36f4:	7f 4f       	sbci	r23, 0xFF	; 255
    36f6:	8f 4f       	sbci	r24, 0xFF	; 255
    36f8:	9f 4f       	sbci	r25, 0xFF	; 255
    36fa:	08 95       	ret

000036fc <__udivmodsi4>:
    36fc:	a1 e2       	ldi	r26, 0x21	; 33
    36fe:	1a 2e       	mov	r1, r26
    3700:	aa 1b       	sub	r26, r26
    3702:	bb 1b       	sub	r27, r27
    3704:	fd 01       	movw	r30, r26
    3706:	0d c0       	rjmp	.+26     	; 0x3722 <__udivmodsi4_ep>

00003708 <__udivmodsi4_loop>:
    3708:	aa 1f       	adc	r26, r26
    370a:	bb 1f       	adc	r27, r27
    370c:	ee 1f       	adc	r30, r30
    370e:	ff 1f       	adc	r31, r31
    3710:	a2 17       	cp	r26, r18
    3712:	b3 07       	cpc	r27, r19
    3714:	e4 07       	cpc	r30, r20
    3716:	f5 07       	cpc	r31, r21
    3718:	20 f0       	brcs	.+8      	; 0x3722 <__udivmodsi4_ep>
    371a:	a2 1b       	sub	r26, r18
    371c:	b3 0b       	sbc	r27, r19
    371e:	e4 0b       	sbc	r30, r20
    3720:	f5 0b       	sbc	r31, r21

00003722 <__udivmodsi4_ep>:
    3722:	66 1f       	adc	r22, r22
    3724:	77 1f       	adc	r23, r23
    3726:	88 1f       	adc	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	1a 94       	dec	r1
    372c:	69 f7       	brne	.-38     	; 0x3708 <__udivmodsi4_loop>
    372e:	60 95       	com	r22
    3730:	70 95       	com	r23
    3732:	80 95       	com	r24
    3734:	90 95       	com	r25
    3736:	9b 01       	movw	r18, r22
    3738:	ac 01       	movw	r20, r24
    373a:	bd 01       	movw	r22, r26
    373c:	cf 01       	movw	r24, r30
    373e:	08 95       	ret

00003740 <_exit>:
    3740:	f8 94       	cli

00003742 <__stop_program>:
    3742:	ff cf       	rjmp	.-2      	; 0x3742 <__stop_program>
