
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002876  0000290a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000fc  008000fc  000029a6  2**0
                  ALLOC
  3 .stab         000027d8  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d4  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006904  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000854d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ada3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 10 	call	0x2186	; 0x2186 <main>
      8a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ee       	ldi	r26, 0xEC	; 236
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ee       	ldi	r24, 0xEC	; 236
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getFirstPassword>:
uint8 state;//check 1st time
uint8 state2;//check 2nd time
uint8 state3,key,flag1,flag2;
static uint8 count;
void getFirstPassword(uint8 *password)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key,i=0;
     b5e:	1f 86       	std	Y+15, r1	; 0x0f
     b60:	8c c0       	rjmp	.+280    	; 0xc7a <getFirstPassword+0x134>
	while(key!='+')
	{
		key=KEYPAD_getPressedKey();
     b62:	0e 94 0d 0b 	call	0x161a	; 0x161a <KEYPAD_getPressedKey>
     b66:	88 8b       	std	Y+16, r24	; 0x10
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a8 ec       	ldi	r26, 0xC8	; 200
     b6e:	b3 e4       	ldi	r27, 0x43	; 67
     b70:	8b 87       	std	Y+11, r24	; 0x0b
     b72:	9c 87       	std	Y+12, r25	; 0x0c
     b74:	ad 87       	std	Y+13, r26	; 0x0d
     b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b78:	6b 85       	ldd	r22, Y+11	; 0x0b
     b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	4a ef       	ldi	r20, 0xFA	; 250
     b86:	54 e4       	ldi	r21, 0x44	; 68
     b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8f 83       	std	Y+7, r24	; 0x07
     b92:	98 87       	std	Y+8, r25	; 0x08
     b94:	a9 87       	std	Y+9, r26	; 0x09
     b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b98:	6f 81       	ldd	r22, Y+7	; 0x07
     b9a:	78 85       	ldd	r23, Y+8	; 0x08
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <getFirstPassword+0x74>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e 83       	std	Y+6, r25	; 0x06
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	3f c0       	rjmp	.+126    	; 0xc38 <getFirstPassword+0xf2>
	else if (__tmp > 65535)
     bba:	6f 81       	ldd	r22, Y+7	; 0x07
     bbc:	78 85       	ldd	r23, Y+8	; 0x08
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	4f e7       	ldi	r20, 0x7F	; 127
     bc8:	57 e4       	ldi	r21, 0x47	; 71
     bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bce:	18 16       	cp	r1, r24
     bd0:	4c f5       	brge	.+82     	; 0xc24 <getFirstPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e2       	ldi	r20, 0x20	; 32
     be0:	51 e4       	ldi	r21, 0x41	; 65
     be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	9e 83       	std	Y+6, r25	; 0x06
     bf8:	8d 83       	std	Y+5, r24	; 0x05
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <getFirstPassword+0xd4>
     bfc:	88 ec       	ldi	r24, 0xC8	; 200
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <getFirstPassword+0xc2>
     c0c:	9c 83       	std	Y+4, r25	; 0x04
     c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	69 f7       	brne	.-38     	; 0xbfc <getFirstPassword+0xb6>
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <getFirstPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9e 83       	std	Y+6, r25	; 0x06
     c36:	8d 83       	std	Y+5, r24	; 0x05
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <getFirstPassword+0xfe>
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		if (key>=0&&key<=9)
     c4c:	88 89       	ldd	r24, Y+16	; 0x10
     c4e:	8a 30       	cpi	r24, 0x0A	; 10
     c50:	a0 f4       	brcc	.+40     	; 0xc7a <getFirstPassword+0x134>
		{
			LCD_moveCursor(1, i);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	6f 85       	ldd	r22, Y+15	; 0x0f
     c56:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_moveCursor>
			LCD_displayCharacter('*');
     c5a:	8a e2       	ldi	r24, 0x2A	; 42
     c5c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_displayCharacter>
			password[i]=key;
     c60:	8f 85       	ldd	r24, Y+15	; 0x0f
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	89 89       	ldd	r24, Y+17	; 0x11
     c68:	9a 89       	ldd	r25, Y+18	; 0x12
     c6a:	fc 01       	movw	r30, r24
     c6c:	e2 0f       	add	r30, r18
     c6e:	f3 1f       	adc	r31, r19
     c70:	88 89       	ldd	r24, Y+16	; 0x10
     c72:	80 83       	st	Z, r24
			i++;
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	8f 87       	std	Y+15, r24	; 0x0f
uint8 state3,key,flag1,flag2;
static uint8 count;
void getFirstPassword(uint8 *password)
{
	uint8 key,i=0;
	while(key!='+')
     c7a:	88 89       	ldd	r24, Y+16	; 0x10
     c7c:	8b 32       	cpi	r24, 0x2B	; 43
     c7e:	09 f0       	breq	.+2      	; 0xc82 <getFirstPassword+0x13c>
     c80:	70 cf       	rjmp	.-288    	; 0xb62 <getFirstPassword+0x1c>
			LCD_displayCharacter('*');
			password[i]=key;
			i++;
		}
	}
}
     c82:	62 96       	adiw	r28, 0x12	; 18
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <getPassword>:
void getPassword()
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0, 0, "plz enter pass");
     c9c:	20 e6       	ldi	r18, 0x60	; 96
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	a9 01       	movw	r20, r18
     ca6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
	getFirstPassword(_1stpassword);
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 a3 05 	call	0xb46	; 0xb46 <getFirstPassword>
	while(UART_recieveByte()!=READY){}
     cb2:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	91 05       	cpc	r25, r1
     cba:	d9 f7       	brne	.-10     	; 0xcb2 <getPassword+0x1e>
	sendpassword(_1stpassword);
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <sendpassword>
	LCD_displayStringRowColumn(1, 0, "       ");
     cc4:	2f e6       	ldi	r18, 0x6F	; 111
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	a9 01       	movw	r20, r18
     cce:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
	reEnter();
     cd2:	0e 94 95 07 	call	0xf2a	; 0xf2a <reEnter>
	while(UART_recieveByte()!=READY){}
     cd6:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	d9 f7       	brne	.-10     	; 0xcd6 <getPassword+0x42>
	sendpassword(_2ndpassword);
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <sendpassword>



}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <mainOptions>:
void mainOptions()
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	2e 97       	sbiw	r28, 0x0e	; 14
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     d02:	27 e7       	ldi	r18, 0x77	; 119
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	a9 01       	movw	r20, r18
     d0c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     d10:	25 e8       	ldi	r18, 0x85	; 133
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	a9 01       	movw	r20, r18
     d1a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
     d1e:	f2 c0       	rjmp	.+484    	; 0xf04 <mainOptions+0x216>
	while(key!='+'||key!='-')
	{


		key=KEYPAD_getPressedKey();
     d20:	0e 94 0d 0b 	call	0x161a	; 0x161a <KEYPAD_getPressedKey>
     d24:	80 93 0d 01 	sts	0x010D, r24
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a8 ec       	ldi	r26, 0xC8	; 200
     d2e:	b3 e4       	ldi	r27, 0x43	; 67
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	9c 87       	std	Y+12, r25	; 0x0c
     d34:	ad 87       	std	Y+13, r26	; 0x0d
     d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
     d54:	a9 87       	std	Y+9, r26	; 0x09
     d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <mainOptions+0x8c>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <mainOptions+0x10a>
	else if (__tmp > 65535)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <mainOptions+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	0f c0       	rjmp	.+30     	; 0xdda <mainOptions+0xec>
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <mainOptions+0xda>
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <mainOptions+0xce>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <mainOptions+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <mainOptions+0x116>
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);

		if (key=='+')
     e0c:	80 91 0d 01 	lds	r24, 0x010D
     e10:	8b 32       	cpi	r24, 0x2B	; 43
     e12:	09 f0       	breq	.+2      	; 0xe16 <mainOptions+0x128>
     e14:	5c c0       	rjmp	.+184    	; 0xece <mainOptions+0x1e0>
		{
			UART_sendByte(OPEN_DOOR);
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_sendByte>
			LCD_clearScreen();
     e1e:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0," enter password");
     e22:	25 e9       	ldi	r18, 0x95	; 149
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
			getFirstPassword(_1stpassword);
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <getFirstPassword>
			while(UART_recieveByte()!=READY){}
     e38:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	d9 f7       	brne	.-10     	; 0xe38 <mainOptions+0x14a>
			sendpassword(_1stpassword);
     e42:	87 e0       	ldi	r24, 0x07	; 7
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 a7 07 	call	0xf4e	; 0xf4e <sendpassword>
			state2=UART_recieveByte();
     e4a:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e4e:	80 93 0e 01 	sts	0x010E, r24

			if(state2==RIGHT)
     e52:	80 91 0e 01 	lds	r24, 0x010E
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	19 f5       	brne	.+70     	; 0xea0 <mainOptions+0x1b2>
			{
				LCD_clearScreen();
     e5a:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Door is unlocking");
     e5e:	25 ea       	ldi	r18, 0xA5	; 165
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	a9 01       	movw	r20, r18
     e68:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
				flag2 = UART_recieveByte();
     e6c:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e70:	80 93 05 01 	sts	0x0105, r24
				while(UART_recieveByte()!=READY){}
     e74:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	d9 f7       	brne	.-10     	; 0xe74 <mainOptions+0x186>

				flag2 = UART_recieveByte();
     e7e:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e82:	80 93 05 01 	sts	0x0105, r24
				while(UART_recieveByte()!=RIGHT){}
     e86:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	d9 f7       	brne	.-10     	; 0xe86 <mainOptions+0x198>

				LCD_displayStringRowColumn(0, 0, "Door is locking");
     e90:	27 eb       	ldi	r18, 0xB7	; 183
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
     e9e:	32 c0       	rjmp	.+100    	; 0xf04 <mainOptions+0x216>

			}
			else
			{
				count=0;
     ea0:	10 92 fc 00 	sts	0x00FC, r1
				count++;
     ea4:	80 91 fc 00 	lds	r24, 0x00FC
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	80 93 fc 00 	sts	0x00FC, r24
				if (count==3)
     eae:	80 91 fc 00 	lds	r24, 0x00FC
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	39 f5       	brne	.+78     	; 0xf04 <mainOptions+0x216>
				{

					LCD_displayStringRowColumn(0, 0, "error");
     eb6:	27 ec       	ldi	r18, 0xC7	; 199
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	a9 01       	movw	r20, r18
     ec0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
					UART_sendByte(WRONG);
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_sendByte>
     ecc:	1b c0       	rjmp	.+54     	; 0xf04 <mainOptions+0x216>
			}



		}
		else if(key=='-')
     ece:	80 91 0d 01 	lds	r24, 0x010D
     ed2:	8d 32       	cpi	r24, 0x2D	; 45
     ed4:	b9 f4       	brne	.+46     	; 0xf04 <mainOptions+0x216>
		{
			UART_sendByte(PASSWORD_CHANGE);
     ed6:	85 e0       	ldi	r24, 0x05	; 5
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_sendByte>
			LCD_clearScreen();
     ede:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_clearScreen>
			getPassword();
     ee2:	0e 94 4a 06 	call	0xc94	; 0xc94 <getPassword>
			state=UART_recieveByte();
     ee6:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
     eea:	80 93 04 01 	sts	0x0104, r24
			if(state==CHANGE_DONE)
     eee:	80 91 04 01 	lds	r24, 0x0104
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	39 f4       	brne	.+14     	; 0xf04 <mainOptions+0x216>
			{
				LCD_displayStringRowColumn(0,0," change done");
     ef6:	2d ec       	ldi	r18, 0xCD	; 205
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	a9 01       	movw	r20, r18
     f00:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
}
void mainOptions()
{
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
	while(key!='+'||key!='-')
     f04:	80 91 0d 01 	lds	r24, 0x010D
     f08:	8b 32       	cpi	r24, 0x2B	; 43
     f0a:	09 f0       	breq	.+2      	; 0xf0e <mainOptions+0x220>
     f0c:	09 cf       	rjmp	.-494    	; 0xd20 <mainOptions+0x32>
     f0e:	80 91 0d 01 	lds	r24, 0x010D
     f12:	8d 32       	cpi	r24, 0x2D	; 45
     f14:	09 f0       	breq	.+2      	; 0xf18 <mainOptions+0x22a>
     f16:	04 cf       	rjmp	.-504    	; 0xd20 <mainOptions+0x32>

		}


	}
}
     f18:	2e 96       	adiw	r28, 0x0e	; 14
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <reEnter>:
void reEnter()
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0, 0, "plz re-enter pass");
     f32:	2a ed       	ldi	r18, 0xDA	; 218
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	a9 01       	movw	r20, r18
     f3c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_displayStringRowColumn>
	getFirstPassword(_2ndpassword);
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 a3 05 	call	0xb46	; 0xb46 <getFirstPassword>
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <sendpassword>:




void sendpassword(uint8 *password)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <sendpassword+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <sendpassword+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;i<=4; i++)
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <sendpassword+0x38>
	{
		UART_sendByte(password[i]);
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	3a 81       	ldd	r19, Y+2	; 0x02
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	80 81       	ld	r24, Z
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_sendByte>


void sendpassword(uint8 *password)
{
	int i;
	for(i=0;i<=4; i++)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	85 30       	cpi	r24, 0x05	; 5
     f8c:	91 05       	cpc	r25, r1
     f8e:	54 f3       	brlt	.-44     	; 0xf64 <sendpassword+0x16>
	{
		UART_sendByte(password[i]);

	}
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <GPIO_setupPinDirection+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <GPIO_setupPinDirection+0x8>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	6a 83       	std	Y+2, r22	; 0x02
     fb0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	88 30       	cpi	r24, 0x08	; 8
     fb6:	08 f0       	brcs	.+2      	; 0xfba <GPIO_setupPinDirection+0x1c>
     fb8:	d5 c0       	rjmp	.+426    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <GPIO_setupPinDirection+0x24>
     fc0:	d1 c0       	rjmp	.+418    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3d 83       	std	Y+5, r19	; 0x05
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <GPIO_setupPinDirection+0x3a>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <GPIO_setupPinDirection+0xc0>
     fd8:	2c 81       	ldd	r18, Y+4	; 0x04
     fda:	3d 81       	ldd	r19, Y+5	; 0x05
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	2c f4       	brge	.+10     	; 0xfec <GPIO_setupPinDirection+0x4e>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	71 f0       	breq	.+28     	; 0x1006 <GPIO_setupPinDirection+0x68>
     fea:	bc c0       	rjmp	.+376    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <GPIO_setupPinDirection+0x5a>
     ff6:	5f c0       	rjmp	.+190    	; 0x10b6 <GPIO_setupPinDirection+0x118>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <GPIO_setupPinDirection+0x66>
    1002:	85 c0       	rjmp	.+266    	; 0x110e <GPIO_setupPinDirection+0x170>
    1004:	af c0       	rjmp	.+350    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f4       	brne	.+40     	; 0x1034 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_setupPinDirection+0x8c>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_setupPinDirection+0x88>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	98 c0       	rjmp	.+304    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1034:	aa e3       	ldi	r26, 0x3A	; 58
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_setupPinDirection+0xb4>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_setupPinDirection+0xb0>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	83 c0       	rjmp	.+262    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1064:	a7 e3       	ldi	r26, 0x37	; 55
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e3       	ldi	r30, 0x37	; 55
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_setupPinDirection+0xe4>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_setupPinDirection+0xe0>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	6c c0       	rjmp	.+216    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    108c:	a7 e3       	ldi	r26, 0x37	; 55
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e7 e3       	ldi	r30, 0x37	; 55
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0x10c>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0x108>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	57 c0       	rjmp	.+174    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10bc:	a4 e3       	ldi	r26, 0x34	; 52
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e3       	ldi	r30, 0x34	; 52
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_setupPinDirection+0x13c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_setupPinDirection+0x138>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	40 c0       	rjmp	.+128    	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0x164>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0x160>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	2b c0       	rjmp	.+86     	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	a1 f4       	brne	.+40     	; 0x113c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1114:	a1 e3       	ldi	r26, 0x31	; 49
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_setupPinDirection+0x194>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_setupPinDirection+0x190>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	14 c0       	rjmp	.+40     	; 0x1164 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    113c:	a1 e3       	ldi	r26, 0x31	; 49
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e1 e3       	ldi	r30, 0x31	; 49
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_setupPinDirection+0x1bc>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_setupPinDirection+0x1b8>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <GPIO_writePin+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <GPIO_writePin+0x8>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
    1186:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	08 f0       	brcs	.+2      	; 0x1190 <GPIO_writePin+0x1c>
    118e:	d5 c0       	rjmp	.+426    	; 0x133a <GPIO_writePin+0x1c6>
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	08 f0       	brcs	.+2      	; 0x1198 <GPIO_writePin+0x24>
    1196:	d1 c0       	rjmp	.+418    	; 0x133a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3d 83       	std	Y+5, r19	; 0x05
    11a0:	2c 83       	std	Y+4, r18	; 0x04
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	9d 81       	ldd	r25, Y+5	; 0x05
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <GPIO_writePin+0x3a>
    11ac:	43 c0       	rjmp	.+134    	; 0x1234 <GPIO_writePin+0xc0>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <GPIO_writePin+0x4e>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	71 f0       	breq	.+28     	; 0x11dc <GPIO_writePin+0x68>
    11c0:	bc c0       	rjmp	.+376    	; 0x133a <GPIO_writePin+0x1c6>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <GPIO_writePin+0x5a>
    11cc:	5f c0       	rjmp	.+190    	; 0x128c <GPIO_writePin+0x118>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	91 05       	cpc	r25, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <GPIO_writePin+0x66>
    11d8:	85 c0       	rjmp	.+266    	; 0x12e4 <GPIO_writePin+0x170>
    11da:	af c0       	rjmp	.+350    	; 0x133a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	a1 f4       	brne	.+40     	; 0x120a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_writePin+0x8c>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_writePin+0x88>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	98 c0       	rjmp	.+304    	; 0x133a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_writePin+0xb4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_writePin+0xb0>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	83 c0       	rjmp	.+262    	; 0x133a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	a1 f4       	brne	.+40     	; 0x1262 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    123a:	a8 e3       	ldi	r26, 0x38	; 56
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_writePin+0xe4>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_writePin+0xe0>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	6c c0       	rjmp	.+216    	; 0x133a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1262:	a8 e3       	ldi	r26, 0x38	; 56
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0x10c>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0x108>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	57 c0       	rjmp	.+174    	; 0x133a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	a1 f4       	brne	.+40     	; 0x12ba <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1292:	a5 e3       	ldi	r26, 0x35	; 53
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_writePin+0x13c>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_writePin+0x138>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	40 c0       	rjmp	.+128    	; 0x133a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12ba:	a5 e3       	ldi	r26, 0x35	; 53
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e3       	ldi	r30, 0x35	; 53
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0x164>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0x160>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	2b c0       	rjmp	.+86     	; 0x133a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	a1 f4       	brne	.+40     	; 0x1312 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12ea:	a2 e3       	ldi	r26, 0x32	; 50
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e2 e3       	ldi	r30, 0x32	; 50
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_writePin+0x194>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_writePin+0x190>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	14 c0       	rjmp	.+40     	; 0x133a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0x1bc>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0x1b8>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <GPIO_readPin+0x6>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <GPIO_readPin+0x8>
    1352:	0f 92       	push	r0
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	8a 83       	std	Y+2, r24	; 0x02
    135a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    135c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	08 f0       	brcs	.+2      	; 0x1366 <GPIO_readPin+0x1c>
    1364:	84 c0       	rjmp	.+264    	; 0x146e <GPIO_readPin+0x124>
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	08 f0       	brcs	.+2      	; 0x136e <GPIO_readPin+0x24>
    136c:	80 c0       	rjmp	.+256    	; 0x146e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3d 83       	std	Y+5, r19	; 0x05
    1376:	2c 83       	std	Y+4, r18	; 0x04
    1378:	4c 81       	ldd	r20, Y+4	; 0x04
    137a:	5d 81       	ldd	r21, Y+5	; 0x05
    137c:	41 30       	cpi	r20, 0x01	; 1
    137e:	51 05       	cpc	r21, r1
    1380:	79 f1       	breq	.+94     	; 0x13e0 <GPIO_readPin+0x96>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <GPIO_readPin+0x4e>
    138c:	2c 81       	ldd	r18, Y+4	; 0x04
    138e:	3d 81       	ldd	r19, Y+5	; 0x05
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	69 f0       	breq	.+26     	; 0x13b0 <GPIO_readPin+0x66>
    1396:	6b c0       	rjmp	.+214    	; 0x146e <GPIO_readPin+0x124>
    1398:	4c 81       	ldd	r20, Y+4	; 0x04
    139a:	5d 81       	ldd	r21, Y+5	; 0x05
    139c:	42 30       	cpi	r20, 0x02	; 2
    139e:	51 05       	cpc	r21, r1
    13a0:	b9 f1       	breq	.+110    	; 0x1410 <GPIO_readPin+0xc6>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <GPIO_readPin+0x64>
    13ac:	49 c0       	rjmp	.+146    	; 0x1440 <GPIO_readPin+0xf6>
    13ae:	5f c0       	rjmp	.+190    	; 0x146e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13b0:	e9 e3       	ldi	r30, 0x39	; 57
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <GPIO_readPin+0x7e>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <GPIO_readPin+0x7a>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	90 70       	andi	r25, 0x00	; 0
    13d2:	88 23       	and	r24, r24
    13d4:	19 f0       	breq	.+6      	; 0x13dc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	49 c0       	rjmp	.+146    	; 0x146e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	47 c0       	rjmp	.+142    	; 0x146e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13e0:	e6 e3       	ldi	r30, 0x36	; 54
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_readPin+0xae>
    13f4:	55 95       	asr	r21
    13f6:	47 95       	ror	r20
    13f8:	8a 95       	dec	r24
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_readPin+0xaa>
    13fc:	ca 01       	movw	r24, r20
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	90 70       	andi	r25, 0x00	; 0
    1402:	88 23       	and	r24, r24
    1404:	19 f0       	breq	.+6      	; 0x140c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	31 c0       	rjmp	.+98     	; 0x146e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	2f c0       	rjmp	.+94     	; 0x146e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1410:	e3 e3       	ldi	r30, 0x33	; 51
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_readPin+0xde>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_readPin+0xda>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	88 23       	and	r24, r24
    1434:	19 f0       	breq	.+6      	; 0x143c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	19 c0       	rjmp	.+50     	; 0x146e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    143c:	19 82       	std	Y+1, r1	; 0x01
    143e:	17 c0       	rjmp	.+46     	; 0x146e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1440:	e0 e3       	ldi	r30, 0x30	; 48
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_readPin+0x10e>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_readPin+0x10a>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	90 70       	andi	r25, 0x00	; 0
    1462:	88 23       	and	r24, r24
    1464:	19 f0       	breq	.+6      	; 0x146c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	01 c0       	rjmp	.+2      	; 0x146e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    146c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_setupPortDirection+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_setupPortDirection+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	90 f5       	brcc	.+100    	; 0x14fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	d1 f0       	breq	.+52     	; 0x14de <GPIO_setupPortDirection+0x5e>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <GPIO_setupPortDirection+0x3e>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <GPIO_setupPortDirection+0x54>
    14bc:	1e c0       	rjmp	.+60     	; 0x14fa <GPIO_setupPortDirection+0x7a>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <GPIO_setupPortDirection+0x68>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	81 f0       	breq	.+32     	; 0x14f2 <GPIO_setupPortDirection+0x72>
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14d4:	ea e3       	ldi	r30, 0x3A	; 58
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14de:	e7 e3       	ldi	r30, 0x37	; 55
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14e8:	e4 e3       	ldi	r30, 0x34	; 52
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14f2:	e1 e3       	ldi	r30, 0x31	; 49
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_writePort+0x6>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_writePort+0x8>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	90 f5       	brcc	.+100    	; 0x1582 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3c 83       	std	Y+4, r19	; 0x04
    1526:	2b 83       	std	Y+3, r18	; 0x03
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	d1 f0       	breq	.+52     	; 0x1566 <GPIO_writePort+0x5e>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <GPIO_writePort+0x3e>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	61 f0       	breq	.+24     	; 0x155c <GPIO_writePort+0x54>
    1544:	1e c0       	rjmp	.+60     	; 0x1582 <GPIO_writePort+0x7a>
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	81 f0       	breq	.+32     	; 0x1570 <GPIO_writePort+0x68>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	91 05       	cpc	r25, r1
    1558:	81 f0       	breq	.+32     	; 0x157a <GPIO_writePort+0x72>
    155a:	13 c0       	rjmp	.+38     	; 0x1582 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1566:	e8 e3       	ldi	r30, 0x38	; 56
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1570:	e5 e3       	ldi	r30, 0x35	; 53
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	80 83       	st	Z, r24
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	80 83       	st	Z, r24
			break;
		}
	}
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_readPort+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <GPIO_readPort+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	84 30       	cpi	r24, 0x04	; 4
    15a4:	90 f5       	brcc	.+100    	; 0x160a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <GPIO_readPort+0x5e>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <GPIO_readPort+0x3e>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <GPIO_readPort+0x54>
    15cc:	1e c0       	rjmp	.+60     	; 0x160a <GPIO_readPort+0x7a>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <GPIO_readPort+0x68>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <GPIO_readPort+0x72>
    15e2:	13 c0       	rjmp	.+38     	; 0x160a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15ee:	e6 e3       	ldi	r30, 0x36	; 54
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15f8:	e3 e3       	ldi	r30, 0x33	; 51
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	04 c0       	rjmp	.+8      	; 0x160a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1602:	e0 e3       	ldi	r30, 0x30	; 48
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <KEYPAD_getPressedKey+0x6>
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1626:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1628:	1b 82       	std	Y+3, r1	; 0x03
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	98 2f       	mov	r25, r24
    1638:	9c 5f       	subi	r25, 0xFC	; 252
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	69 2f       	mov	r22, r25
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 cf 07 	call	0xf9e	; 0xf9e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9c 01       	movw	r18, r24
    164c:	2c 5f       	subi	r18, 0xFC	; 252
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 c0       	rjmp	.+4      	; 0x165a <KEYPAD_getPressedKey+0x40>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	2a 95       	dec	r18
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <KEYPAD_getPressedKey+0x3c>
    165e:	80 95       	com	r24
    1660:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	69 81       	ldd	r22, Y+1	; 0x01
    1666:	0e 94 84 0a 	call	0x1508	; 0x1508 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    166a:	1a 82       	std	Y+2, r1	; 0x02
    166c:	1c c0       	rjmp	.+56     	; 0x16a6 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	6a 81       	ldd	r22, Y+2	; 0x02
    1672:	0e 94 a5 09 	call	0x134a	; 0x134a <GPIO_readPin>
    1676:	88 23       	and	r24, r24
    1678:	99 f4       	brne	.+38     	; 0x16a0 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	98 2f       	mov	r25, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	89 0f       	add	r24, r25
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	8a 83       	std	Y+2, r24	; 0x02
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	08 f3       	brcs	.-62     	; 0x166e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	8f 5f       	subi	r24, 0xFF	; 255
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	08 f4       	brcc	.+2      	; 0x16ba <KEYPAD_getPressedKey+0xa0>
    16b8:	b9 cf       	rjmp	.-142    	; 0x162c <KEYPAD_getPressedKey+0x12>
    16ba:	b6 cf       	rjmp	.-148    	; 0x1628 <KEYPAD_getPressedKey+0xe>

000016bc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    16ca:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3c 83       	std	Y+4, r19	; 0x04
    16d4:	2b 83       	std	Y+3, r18	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    16e0:	70 c0       	rjmp	.+224    	; 0x17c2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    16e2:	2b 81       	ldd	r18, Y+3	; 0x03
    16e4:	3c 81       	ldd	r19, Y+4	; 0x04
    16e6:	29 30       	cpi	r18, 0x09	; 9
    16e8:	31 05       	cpc	r19, r1
    16ea:	5c f5       	brge	.+86     	; 0x1742 <KEYPAD_4x4_adjustKeyNumber+0x86>
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    16f6:	59 c0       	rjmp	.+178    	; 0x17aa <KEYPAD_4x4_adjustKeyNumber+0xee>
    16f8:	2b 81       	ldd	r18, Y+3	; 0x03
    16fa:	3c 81       	ldd	r19, Y+4	; 0x04
    16fc:	25 30       	cpi	r18, 0x05	; 5
    16fe:	31 05       	cpc	r19, r1
    1700:	9c f4       	brge	.+38     	; 0x1728 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <KEYPAD_4x4_adjustKeyNumber+0x52>
    170c:	48 c0       	rjmp	.+144    	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    170e:	2b 81       	ldd	r18, Y+3	; 0x03
    1710:	3c 81       	ldd	r19, Y+4	; 0x04
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	31 05       	cpc	r19, r1
    1716:	0c f0       	brlt	.+2      	; 0x171a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1718:	45 c0       	rjmp	.+138    	; 0x17a4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1724:	39 c0       	rjmp	.+114    	; 0x1798 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1726:	67 c0       	rjmp	.+206    	; 0x17f6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	26 30       	cpi	r18, 0x06	; 6
    172e:	31 05       	cpc	r19, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1732:	41 c0       	rjmp	.+130    	; 0x17b6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	87 30       	cpi	r24, 0x07	; 7
    173a:	91 05       	cpc	r25, r1
    173c:	0c f0       	brlt	.+2      	; 0x1740 <KEYPAD_4x4_adjustKeyNumber+0x84>
    173e:	3e c0       	rjmp	.+124    	; 0x17bc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1740:	37 c0       	rjmp	.+110    	; 0x17b0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1742:	2b 81       	ldd	r18, Y+3	; 0x03
    1744:	3c 81       	ldd	r19, Y+4	; 0x04
    1746:	2c 30       	cpi	r18, 0x0C	; 12
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <KEYPAD_4x4_adjustKeyNumber+0x92>
    174c:	46 c0       	rjmp	.+140    	; 0x17da <KEYPAD_4x4_adjustKeyNumber+0x11e>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	8d 30       	cpi	r24, 0x0D	; 13
    1754:	91 05       	cpc	r25, r1
    1756:	5c f4       	brge	.+22     	; 0x176e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	2a 30       	cpi	r18, 0x0A	; 10
    175e:	31 05       	cpc	r19, r1
    1760:	b1 f1       	breq	.+108    	; 0x17ce <KEYPAD_4x4_adjustKeyNumber+0x112>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	8b 30       	cpi	r24, 0x0B	; 11
    1768:	91 05       	cpc	r25, r1
    176a:	a4 f5       	brge	.+104    	; 0x17d4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    176c:	2d c0       	rjmp	.+90     	; 0x17c8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	2e 30       	cpi	r18, 0x0E	; 14
    1774:	31 05       	cpc	r19, r1
    1776:	b9 f1       	breq	.+110    	; 0x17e6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	8e 30       	cpi	r24, 0x0E	; 14
    177e:	91 05       	cpc	r25, r1
    1780:	7c f1       	brlt	.+94     	; 0x17e0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	2f 30       	cpi	r18, 0x0F	; 15
    1788:	31 05       	cpc	r19, r1
    178a:	79 f1       	breq	.+94     	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x12e>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	80 31       	cpi	r24, 0x10	; 16
    1792:	91 05       	cpc	r25, r1
    1794:	69 f1       	breq	.+90     	; 0x17f0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1796:	2f c0       	rjmp	.+94     	; 0x17f6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	2e c0       	rjmp	.+92     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    179e:	88 e0       	ldi	r24, 0x08	; 8
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	2b c0       	rjmp	.+86     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    17a4:	89 e0       	ldi	r24, 0x09	; 9
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	28 c0       	rjmp	.+80     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    17aa:	85 e2       	ldi	r24, 0x25	; 37
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	25 c0       	rjmp	.+74     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	22 c0       	rjmp	.+68     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    17bc:	86 e0       	ldi	r24, 0x06	; 6
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	1c c0       	rjmp	.+56     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    17c2:	8a e2       	ldi	r24, 0x2A	; 42
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	19 c0       	rjmp	.+50     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	16 c0       	rjmp	.+44     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	13 c0       	rjmp	.+38     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    17da:	8d e2       	ldi	r24, 0x2D	; 45
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	0d c0       	rjmp	.+26     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    17e0:	8d e0       	ldi	r24, 0x0D	; 13
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    17e6:	19 82       	std	Y+1, r1	; 0x01
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    17ea:	8d e3       	ldi	r24, 0x3D	; 61
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    17f0:	8b e2       	ldi	r24, 0x2B	; 43
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
} 
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 cf 07 	call	0xf9e	; 0xf9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 cf 07 	call	0xf9e	; 0xf9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	62 e0       	ldi	r22, 0x02	; 2
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	6f ef       	ldi	r22, 0xFF	; 255
    1834:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1838:	88 e3       	ldi	r24, 0x38	; 56
    183a:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    183e:	8c e0       	ldi	r24, 0x0C	; 12
    1840:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_sendCommand>
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	ea 97       	sbiw	r28, 0x3a	; 58
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1866:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e8       	ldi	r26, 0x80	; 128
    1882:	bf e3       	ldi	r27, 0x3F	; 63
    1884:	8d ab       	std	Y+53, r24	; 0x35
    1886:	9e ab       	std	Y+54, r25	; 0x36
    1888:	af ab       	std	Y+55, r26	; 0x37
    188a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188c:	6d a9       	ldd	r22, Y+53	; 0x35
    188e:	7e a9       	ldd	r23, Y+54	; 0x36
    1890:	8f a9       	ldd	r24, Y+55	; 0x37
    1892:	98 ad       	ldd	r25, Y+56	; 0x38
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	4a ef       	ldi	r20, 0xFA	; 250
    189a:	54 e4       	ldi	r21, 0x44	; 68
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	89 ab       	std	Y+49, r24	; 0x31
    18a6:	9a ab       	std	Y+50, r25	; 0x32
    18a8:	ab ab       	std	Y+51, r26	; 0x33
    18aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ac:	69 a9       	ldd	r22, Y+49	; 0x31
    18ae:	7a a9       	ldd	r23, Y+50	; 0x32
    18b0:	8b a9       	ldd	r24, Y+51	; 0x33
    18b2:	9c a9       	ldd	r25, Y+52	; 0x34
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5f e3       	ldi	r21, 0x3F	; 63
    18bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <LCD_sendCommand+0x7e>
		__ticks = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	98 ab       	std	Y+48, r25	; 0x30
    18ca:	8f a7       	std	Y+47, r24	; 0x2f
    18cc:	3f c0       	rjmp	.+126    	; 0x194c <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    18ce:	69 a9       	ldd	r22, Y+49	; 0x31
    18d0:	7a a9       	ldd	r23, Y+50	; 0x32
    18d2:	8b a9       	ldd	r24, Y+51	; 0x33
    18d4:	9c a9       	ldd	r25, Y+52	; 0x34
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	3f ef       	ldi	r19, 0xFF	; 255
    18da:	4f e7       	ldi	r20, 0x7F	; 127
    18dc:	57 e4       	ldi	r21, 0x47	; 71
    18de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	4c f5       	brge	.+82     	; 0x1938 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	6d a9       	ldd	r22, Y+53	; 0x35
    18e8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ea:	8f a9       	ldd	r24, Y+55	; 0x37
    18ec:	98 ad       	ldd	r25, Y+56	; 0x38
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e2       	ldi	r20, 0x20	; 32
    18f4:	51 e4       	ldi	r21, 0x41	; 65
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	98 ab       	std	Y+48, r25	; 0x30
    190c:	8f a7       	std	Y+47, r24	; 0x2f
    190e:	0f c0       	rjmp	.+30     	; 0x192e <LCD_sendCommand+0xde>
    1910:	88 ec       	ldi	r24, 0xC8	; 200
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9e a7       	std	Y+46, r25	; 0x2e
    1916:	8d a7       	std	Y+45, r24	; 0x2d
    1918:	8d a5       	ldd	r24, Y+45	; 0x2d
    191a:	9e a5       	ldd	r25, Y+46	; 0x2e
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_sendCommand+0xcc>
    1920:	9e a7       	std	Y+46, r25	; 0x2e
    1922:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	98 ab       	std	Y+48, r25	; 0x30
    192c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1930:	98 a9       	ldd	r25, Y+48	; 0x30
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	69 f7       	brne	.-38     	; 0x1910 <LCD_sendCommand+0xc0>
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1938:	69 a9       	ldd	r22, Y+49	; 0x31
    193a:	7a a9       	ldd	r23, Y+50	; 0x32
    193c:	8b a9       	ldd	r24, Y+51	; 0x33
    193e:	9c a9       	ldd	r25, Y+52	; 0x34
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	98 ab       	std	Y+48, r25	; 0x30
    194a:	8f a7       	std	Y+47, r24	; 0x2f
    194c:	8f a5       	ldd	r24, Y+47	; 0x2f
    194e:	98 a9       	ldd	r25, Y+48	; 0x30
    1950:	9c a7       	std	Y+44, r25	; 0x2c
    1952:	8b a7       	std	Y+43, r24	; 0x2b
    1954:	8b a5       	ldd	r24, Y+43	; 0x2b
    1956:	9c a5       	ldd	r25, Y+44	; 0x2c
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_sendCommand+0x108>
    195c:	9c a7       	std	Y+44, r25	; 0x2c
    195e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e8       	ldi	r26, 0x80	; 128
    1970:	bf e3       	ldi	r27, 0x3F	; 63
    1972:	8f a3       	std	Y+39, r24	; 0x27
    1974:	98 a7       	std	Y+40, r25	; 0x28
    1976:	a9 a7       	std	Y+41, r26	; 0x29
    1978:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6f a1       	ldd	r22, Y+39	; 0x27
    197c:	78 a5       	ldd	r23, Y+40	; 0x28
    197e:	89 a5       	ldd	r24, Y+41	; 0x29
    1980:	9a a5       	ldd	r25, Y+42	; 0x2a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a ef       	ldi	r20, 0xFA	; 250
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8b a3       	std	Y+35, r24	; 0x23
    1994:	9c a3       	std	Y+36, r25	; 0x24
    1996:	ad a3       	std	Y+37, r26	; 0x25
    1998:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    199a:	6b a1       	ldd	r22, Y+35	; 0x23
    199c:	7c a1       	ldd	r23, Y+36	; 0x24
    199e:	8d a1       	ldd	r24, Y+37	; 0x25
    19a0:	9e a1       	ldd	r25, Y+38	; 0x26
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <LCD_sendCommand+0x16c>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    19bc:	6b a1       	ldd	r22, Y+35	; 0x23
    19be:	7c a1       	ldd	r23, Y+36	; 0x24
    19c0:	8d a1       	ldd	r24, Y+37	; 0x25
    19c2:	9e a1       	ldd	r25, Y+38	; 0x26
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6f a1       	ldd	r22, Y+39	; 0x27
    19d6:	78 a5       	ldd	r23, Y+40	; 0x28
    19d8:	89 a5       	ldd	r24, Y+41	; 0x29
    19da:	9a a5       	ldd	r25, Y+42	; 0x2a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9a a3       	std	Y+34, r25	; 0x22
    19fa:	89 a3       	std	Y+33, r24	; 0x21
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <LCD_sendCommand+0x1cc>
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	98 a3       	std	Y+32, r25	; 0x20
    1a04:	8f 8f       	std	Y+31, r24	; 0x1f
    1a06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a08:	98 a1       	ldd	r25, Y+32	; 0x20
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0x1ba>
    1a0e:	98 a3       	std	Y+32, r25	; 0x20
    1a10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	89 a1       	ldd	r24, Y+33	; 0x21
    1a14:	9a a1       	ldd	r25, Y+34	; 0x22
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <LCD_sendCommand+0x1ae>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	6b a1       	ldd	r22, Y+35	; 0x23
    1a28:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9a a3       	std	Y+34, r25	; 0x22
    1a38:	89 a3       	std	Y+33, r24	; 0x21
    1a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a40:	8d 8f       	std	Y+29, r24	; 0x1d
    1a42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_sendCommand+0x1f6>
    1a4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	6a ad       	ldd	r22, Y+58	; 0x3a
    1a52:	0e 94 84 0a 	call	0x1508	; 0x1508 <GPIO_writePort>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_sendCommand+0x258>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_sendCommand+0x2b8>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0x2a6>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_sendCommand+0x29a>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_sendCommand+0x2e2>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	8b 87       	std	Y+11, r24	; 0x0b
    1b4e:	9c 87       	std	Y+12, r25	; 0x0c
    1b50:	ad 87       	std	Y+13, r26	; 0x0d
    1b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f 83       	std	Y+7, r24	; 0x07
    1b6e:	98 87       	std	Y+8, r25	; 0x08
    1b70:	a9 87       	std	Y+9, r26	; 0x09
    1b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_sendCommand+0x346>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_sendCommand+0x3a6>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x394>
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_sendCommand+0x388>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_sendCommand+0x3d0>
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c28:	ea 96       	adiw	r28, 0x3a	; 58
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	ea 97       	sbiw	r28, 0x3a	; 58
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1c50:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e8       	ldi	r26, 0x80	; 128
    1c6c:	bf e3       	ldi	r27, 0x3F	; 63
    1c6e:	8d ab       	std	Y+53, r24	; 0x35
    1c70:	9e ab       	std	Y+54, r25	; 0x36
    1c72:	af ab       	std	Y+55, r26	; 0x37
    1c74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6d a9       	ldd	r22, Y+53	; 0x35
    1c78:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	89 ab       	std	Y+49, r24	; 0x31
    1c90:	9a ab       	std	Y+50, r25	; 0x32
    1c92:	ab ab       	std	Y+51, r26	; 0x33
    1c94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cba:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	98 ab       	std	Y+48, r25	; 0x30
    1cf6:	8f a7       	std	Y+47, r24	; 0x2f
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_displayCharacter+0xde>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9e a7       	std	Y+46, r25	; 0x2e
    1d00:	8d a7       	std	Y+45, r24	; 0x2d
    1d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_displayCharacter+0xcc>
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d10:	98 a9       	ldd	r25, Y+48	; 0x30
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_displayCharacter+0xc0>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	69 a9       	ldd	r22, Y+49	; 0x31
    1d24:	7a a9       	ldd	r23, Y+50	; 0x32
    1d26:	8b a9       	ldd	r24, Y+51	; 0x33
    1d28:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	98 ab       	std	Y+48, r25	; 0x30
    1d34:	8f a7       	std	Y+47, r24	; 0x2f
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	9c a7       	std	Y+44, r25	; 0x2c
    1d3c:	8b a7       	std	Y+43, r24	; 0x2b
    1d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_displayCharacter+0x108>
    1d46:	9c a7       	std	Y+44, r25	; 0x2c
    1d48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	8f a3       	std	Y+39, r24	; 0x27
    1d5e:	98 a7       	std	Y+40, r25	; 0x28
    1d60:	a9 a7       	std	Y+41, r26	; 0x29
    1d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6f a1       	ldd	r22, Y+39	; 0x27
    1d66:	78 a5       	ldd	r23, Y+40	; 0x28
    1d68:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8b a3       	std	Y+35, r24	; 0x23
    1d7e:	9c a3       	std	Y+36, r25	; 0x24
    1d80:	ad a3       	std	Y+37, r26	; 0x25
    1d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d84:	6b a1       	ldd	r22, Y+35	; 0x23
    1d86:	7c a1       	ldd	r23, Y+36	; 0x24
    1d88:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1da6:	6b a1       	ldd	r22, Y+35	; 0x23
    1da8:	7c a1       	ldd	r23, Y+36	; 0x24
    1daa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dac:	9e a1       	ldd	r25, Y+38	; 0x26
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a a3       	std	Y+34, r25	; 0x22
    1de4:	89 a3       	std	Y+33, r24	; 0x21
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_displayCharacter+0x1cc>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	98 a3       	std	Y+32, r25	; 0x20
    1dee:	8f 8f       	std	Y+31, r24	; 0x1f
    1df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df2:	98 a1       	ldd	r25, Y+32	; 0x20
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_displayCharacter+0x1ba>
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_displayCharacter+0x1ae>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6b a1       	ldd	r22, Y+35	; 0x23
    1e12:	7c a1       	ldd	r23, Y+36	; 0x24
    1e14:	8d a1       	ldd	r24, Y+37	; 0x25
    1e16:	9e a1       	ldd	r25, Y+38	; 0x26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	9a a1       	ldd	r25, Y+34	; 0x22
    1e28:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_displayCharacter+0x1f6>
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e3c:	0e 94 84 0a 	call	0x1508	; 0x1508 <GPIO_writePort>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e8       	ldi	r26, 0x80	; 128
    1e46:	bf e3       	ldi	r27, 0x3F	; 63
    1e48:	89 8f       	std	Y+25, r24	; 0x19
    1e4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a ef       	ldi	r20, 0xFA	; 250
    1e5e:	54 e4       	ldi	r21, 0x44	; 68
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <LCD_displayCharacter+0x258>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <LCD_displayCharacter+0x2b8>
    1ed4:	88 ec       	ldi	r24, 0xC8	; 200
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_displayCharacter+0x2a6>
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <LCD_displayCharacter+0x29a>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	8b 89       	ldd	r24, Y+19	; 0x13
    1f12:	9c 89       	ldd	r25, Y+20	; 0x14
    1f14:	98 8b       	std	Y+16, r25	; 0x10
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	98 89       	ldd	r25, Y+16	; 0x10
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_displayCharacter+0x2e2>
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	8b 87       	std	Y+11, r24	; 0x0b
    1f38:	9c 87       	std	Y+12, r25	; 0x0c
    1f3a:	ad 87       	std	Y+13, r26	; 0x0d
    1f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8f 83       	std	Y+7, r24	; 0x07
    1f58:	98 87       	std	Y+8, r25	; 0x08
    1f5a:	a9 87       	std	Y+9, r26	; 0x09
    1f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_displayCharacter+0x3a6>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_displayCharacter+0x394>
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_displayCharacter+0x388>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_displayCharacter+0x3d0>
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2012:	ea 96       	adiw	r28, 0x3a	; 58
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <LCD_displayString+0x6>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	fc 01       	movw	r30, r24
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
    2048:	80 81       	ld	r24, Z
    204a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_displayCharacter>
		i++;
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	80 81       	ld	r24, Z
    2066:	88 23       	and	r24, r24
    2068:	39 f7       	brne	.-50     	; 0x2038 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <LCD_moveCursor+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <LCD_moveCursor+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3d 83       	std	Y+5, r19	; 0x05
    2090:	2c 83       	std	Y+4, r18	; 0x04
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	c1 f0       	breq	.+48     	; 0x20cc <LCD_moveCursor+0x56>
    209c:	2c 81       	ldd	r18, Y+4	; 0x04
    209e:	3d 81       	ldd	r19, Y+5	; 0x05
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_moveCursor+0x3a>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <LCD_moveCursor+0x50>
    20ae:	19 c0       	rjmp	.+50     	; 0x20e2 <LCD_moveCursor+0x6c>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	69 f0       	breq	.+26     	; 0x20d4 <LCD_moveCursor+0x5e>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	61 f0       	breq	.+24     	; 0x20dc <LCD_moveCursor+0x66>
    20c4:	0e c0       	rjmp	.+28     	; 0x20e2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	80 5c       	subi	r24, 0xC0	; 192
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	07 c0       	rjmp	.+14     	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	80 5f       	subi	r24, 0xF0	; 240
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	80 5b       	subi	r24, 0xB0	; 176
    20e0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	80 68       	ori	r24, 0x80	; 128
    20e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_sendCommand>
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <LCD_displayStringRowColumn+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <LCD_displayStringRowColumn+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	6a 83       	std	Y+2, r22	; 0x02
    210a:	5c 83       	std	Y+4, r21	; 0x04
    210c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	6a 81       	ldd	r22, Y+2	; 0x02
    2112:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_displayString>
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	62 97       	sbiw	r28, 0x12	; 18
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	9a 89       	ldd	r25, Y+18	; 0x12
    2148:	9e 01       	movw	r18, r28
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	b9 01       	movw	r22, r18
    2150:	4a e0       	ldi	r20, 0x0A	; 10
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_displayString>
}
    2160:	62 96       	adiw	r28, 0x12	; 18
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_sendCommand>
}
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <main>:
#include "uart.h"
#include "check_password.h"

extern state;
int main(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	2c 97       	sbiw	r28, 0x0c	; 12
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType Config = {data_8_bit,Enabled_Even,Stop_1_bit,9600 };
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	99 87       	std	Y+9, r25	; 0x09
    21a0:	88 87       	std	Y+8, r24	; 0x08
    21a2:	e4 ef       	ldi	r30, 0xF4	; 244
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	fb 87       	std	Y+11, r31	; 0x0b
    21a8:	ea 87       	std	Y+10, r30	; 0x0a
    21aa:	f7 e0       	ldi	r31, 0x07	; 7
    21ac:	fc 87       	std	Y+12, r31	; 0x0c
    21ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    21b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    21b2:	00 80       	ld	r0, Z
    21b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	9b 87       	std	Y+11, r25	; 0x0b
    21bc:	8a 87       	std	Y+10, r24	; 0x0a
    21be:	e8 85       	ldd	r30, Y+8	; 0x08
    21c0:	f9 85       	ldd	r31, Y+9	; 0x09
    21c2:	00 82       	st	Z, r0
    21c4:	88 85       	ldd	r24, Y+8	; 0x08
    21c6:	99 85       	ldd	r25, Y+9	; 0x09
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	99 87       	std	Y+9, r25	; 0x09
    21cc:	88 87       	std	Y+8, r24	; 0x08
    21ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    21d0:	91 50       	subi	r25, 0x01	; 1
    21d2:	9c 87       	std	Y+12, r25	; 0x0c
    21d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    21d6:	ee 23       	and	r30, r30
    21d8:	51 f7       	brne	.-44     	; 0x21ae <main+0x28>
	UART_init(&Config);
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_init>
	LCD_init();
    21e2:	0e 94 05 0c 	call	0x180a	; 0x180a <LCD_init>
	while(1)
	{

		getPassword();
    21e6:	0e 94 4a 06 	call	0xc94	; 0xc94 <getPassword>
		state=UART_recieveByte();
    21ea:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	90 93 05 01 	sts	0x0105, r25
    21f6:	80 93 04 01 	sts	0x0104, r24
		if (state ==RIGHT)
    21fa:	80 91 04 01 	lds	r24, 0x0104
    21fe:	90 91 05 01 	lds	r25, 0x0105
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	91 05       	cpc	r25, r1
    2206:	19 f4       	brne	.+6      	; 0x220e <main+0x88>
		{
			mainOptions();
    2208:	0e 94 77 06 	call	0xcee	; 0xcee <mainOptions>
    220c:	ec cf       	rjmp	.-40     	; 0x21e6 <main+0x60>
		}
		else if(state ==WRONG)
    220e:	80 91 04 01 	lds	r24, 0x0104
    2212:	90 91 05 01 	lds	r25, 0x0105
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	29 f7       	brne	.-54     	; 0x21e6 <main+0x60>
		{
			getPassword();
    221c:	0e 94 4a 06 	call	0xc94	; 0xc94 <getPassword>
    2220:	e2 cf       	rjmp	.-60     	; 0x21e6 <main+0x60>

00002222 <__vector_9>:


static void (*Timer1_CALLBACK_Fptr) (void)=NULL;

ISR(TIMER1_OVF_vect)
{
    2222:	1f 92       	push	r1
    2224:	0f 92       	push	r0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	2f 93       	push	r18
    222e:	3f 93       	push	r19
    2230:	4f 93       	push	r20
    2232:	5f 93       	push	r21
    2234:	6f 93       	push	r22
    2236:	7f 93       	push	r23
    2238:	8f 93       	push	r24
    223a:	9f 93       	push	r25
    223c:	af 93       	push	r26
    223e:	bf 93       	push	r27
    2240:	ef 93       	push	r30
    2242:	ff 93       	push	r31
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_CALLBACK_Fptr != NULL)
    224c:	80 91 fd 00 	lds	r24, 0x00FD
    2250:	90 91 fe 00 	lds	r25, 0x00FE
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	29 f0       	breq	.+10     	; 0x2262 <__vector_9+0x40>
	{
		(*Timer1_CALLBACK_Fptr)();
    2258:	e0 91 fd 00 	lds	r30, 0x00FD
    225c:	f0 91 fe 00 	lds	r31, 0x00FE
    2260:	09 95       	icall
	}
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	bf 91       	pop	r27
    226c:	af 91       	pop	r26
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	7f 91       	pop	r23
    2274:	6f 91       	pop	r22
    2276:	5f 91       	pop	r21
    2278:	4f 91       	pop	r20
    227a:	3f 91       	pop	r19
    227c:	2f 91       	pop	r18
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti

00002288 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2288:	1f 92       	push	r1
    228a:	0f 92       	push	r0
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	0f 92       	push	r0
    2290:	11 24       	eor	r1, r1
    2292:	2f 93       	push	r18
    2294:	3f 93       	push	r19
    2296:	4f 93       	push	r20
    2298:	5f 93       	push	r21
    229a:	6f 93       	push	r22
    229c:	7f 93       	push	r23
    229e:	8f 93       	push	r24
    22a0:	9f 93       	push	r25
    22a2:	af 93       	push	r26
    22a4:	bf 93       	push	r27
    22a6:	ef 93       	push	r30
    22a8:	ff 93       	push	r31
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_CALLBACK_Fptr != NULL)
    22b2:	80 91 fd 00 	lds	r24, 0x00FD
    22b6:	90 91 fe 00 	lds	r25, 0x00FE
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <__vector_7+0x40>
	{
		(*Timer1_CALLBACK_Fptr)();
    22be:	e0 91 fd 00 	lds	r30, 0x00FD
    22c2:	f0 91 fe 00 	lds	r31, 0x00FE
    22c6:	09 95       	icall
	}
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	ff 91       	pop	r31
    22ce:	ef 91       	pop	r30
    22d0:	bf 91       	pop	r27
    22d2:	af 91       	pop	r26
    22d4:	9f 91       	pop	r25
    22d6:	8f 91       	pop	r24
    22d8:	7f 91       	pop	r23
    22da:	6f 91       	pop	r22
    22dc:	5f 91       	pop	r21
    22de:	4f 91       	pop	r20
    22e0:	3f 91       	pop	r19
    22e2:	2f 91       	pop	r18
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <Timer1_init+0x6>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR1A,FOC1A);
    22fc:	af e4       	ldi	r26, 0x4F	; 79
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e4       	ldi	r30, 0x4F	; 79
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	88 60       	ori	r24, 0x08	; 8
    2308:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    230a:	af e4       	ldi	r26, 0x4F	; 79
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	84 60       	ori	r24, 0x04	; 4
    2316:	8c 93       	st	X, r24
	TCCR1B = Config_Ptr->prescaler;
    2318:	ae e4       	ldi	r26, 0x4E	; 78
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e9 81       	ldd	r30, Y+1	; 0x01
    231e:	fa 81       	ldd	r31, Y+2	; 0x02
    2320:	85 81       	ldd	r24, Z+5	; 0x05
    2322:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    2324:	ac e4       	ldi	r26, 0x4C	; 76
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	9c 93       	st	X, r25
    2334:	8e 93       	st	-X, r24
	if((Config_Ptr->mode) == TIMER1_NORMAL_MODE)
    2336:	e9 81       	ldd	r30, Y+1	; 0x01
    2338:	fa 81       	ldd	r31, Y+2	; 0x02
    233a:	84 81       	ldd	r24, Z+4	; 0x04
    233c:	88 23       	and	r24, r24
    233e:	79 f4       	brne	.+30     	; 0x235e <Timer1_init+0x70>
	{
		SET_BIT(TIMSK,TOIE1);
    2340:	a9 e5       	ldi	r26, 0x59	; 89
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e9 e5       	ldi	r30, 0x59	; 89
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	84 60       	ori	r24, 0x04	; 4
    234c:	8c 93       	st	X, r24
		SET_BIT(TIFR,TOV1);
    234e:	a8 e5       	ldi	r26, 0x58	; 88
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e8 e5       	ldi	r30, 0x58	; 88
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	84 60       	ori	r24, 0x04	; 4
    235a:	8c 93       	st	X, r24
    235c:	23 c0       	rjmp	.+70     	; 0x23a4 <Timer1_init+0xb6>
	}
	else if((Config_Ptr->mode) == TIMER1_COMPARE_MODE)
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	84 81       	ldd	r24, Z+4	; 0x04
    2364:	84 30       	cpi	r24, 0x04	; 4
    2366:	f1 f4       	brne	.+60     	; 0x23a4 <Timer1_init+0xb6>
	{
		SET_BIT(TCCR1B,WGM12);
    2368:	ae e4       	ldi	r26, 0x4E	; 78
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ee e4       	ldi	r30, 0x4E	; 78
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	88 60       	ori	r24, 0x08	; 8
    2374:	8c 93       	st	X, r24
		OCR1A=Config_Ptr->compare_value;
    2376:	aa e4       	ldi	r26, 0x4A	; 74
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e9 81       	ldd	r30, Y+1	; 0x01
    237c:	fa 81       	ldd	r31, Y+2	; 0x02
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	11 96       	adiw	r26, 0x01	; 1
    2384:	9c 93       	st	X, r25
    2386:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);
    2388:	a9 e5       	ldi	r26, 0x59	; 89
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e9 e5       	ldi	r30, 0x59	; 89
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	80 61       	ori	r24, 0x10	; 16
    2394:	8c 93       	st	X, r24
		SET_BIT(TIFR,OCF1A);
    2396:	a8 e5       	ldi	r26, 0x58	; 88
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e8 e5       	ldi	r30, 0x58	; 88
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 61       	ori	r24, 0x10	; 16
    23a2:	8c 93       	st	X, r24
	}
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <Timer1_deInit>:
void Timer1_deInit(void)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    23b6:	ef e4       	ldi	r30, 0x4F	; 79
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	10 82       	st	Z, r1
	TCCR1B = 0;
    23bc:	ee e4       	ldi	r30, 0x4E	; 78
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	10 82       	st	Z, r1
	TCNT1 =  0;
    23c2:	ec e4       	ldi	r30, 0x4C	; 76
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	11 82       	std	Z+1, r1	; 0x01
    23c8:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);
    23ca:	a9 e5       	ldi	r26, 0x59	; 89
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e9 e5       	ldi	r30, 0x59	; 89
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8b 7f       	andi	r24, 0xFB	; 251
    23d6:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV1);
    23d8:	a8 e5       	ldi	r26, 0x58	; 88
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e8 e5       	ldi	r30, 0x58	; 88
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8b 7f       	andi	r24, 0xFB	; 251
    23e4:	8c 93       	st	X, r24
	OCR1A = 0;
    23e6:	ea e4       	ldi	r30, 0x4A	; 74
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	11 82       	std	Z+1, r1	; 0x01
    23ec:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    23ee:	a9 e5       	ldi	r26, 0x59	; 89
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e9 e5       	ldi	r30, 0x59	; 89
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	8f 7e       	andi	r24, 0xEF	; 239
    23fa:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);
    23fc:	a8 e5       	ldi	r26, 0x58	; 88
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e8 e5       	ldi	r30, 0x58	; 88
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 7e       	andi	r24, 0xEF	; 239
    2408:	8c 93       	st	X, r24
	Timer1_CALLBACK_Fptr = NULL;
    240a:	10 92 fe 00 	sts	0x00FE, r1
    240e:	10 92 fd 00 	sts	0x00FD, r1
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <delay>:
/* timer to count second*/
uint8 g_tick;
void delay(uint32 seconds){
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	28 97       	sbiw	r28, 0x08	; 8
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	6d 83       	std	Y+5, r22	; 0x05
    242e:	7e 83       	std	Y+6, r23	; 0x06
    2430:	8f 83       	std	Y+7, r24	; 0x07
    2432:	98 87       	std	Y+8, r25	; 0x08

	g_tick = 0;
    2434:	10 92 0f 01 	sts	0x010F, r1
	uint32 tick = seconds;
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	af 81       	ldd	r26, Y+7	; 0x07
    243e:	b8 85       	ldd	r27, Y+8	; 0x08
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	ab 83       	std	Y+3, r26	; 0x03
    2446:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_setCallBack(&timer_tick);
    2448:	82 e4       	ldi	r24, 0x42	; 66
    244a:	92 e1       	ldi	r25, 0x12	; 18
    244c:	0e 94 4e 12 	call	0x249c	; 0x249c <Timer1_setCallBack>
	while(g_tick  < tick);
    2450:	80 91 0f 01 	lds	r24, 0x010F
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	ab 81       	ldd	r26, Y+3	; 0x03
    2462:	bc 81       	ldd	r27, Y+4	; 0x04
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	4a 07       	cpc	r20, r26
    246a:	5b 07       	cpc	r21, r27
    246c:	88 f3       	brcs	.-30     	; 0x2450 <delay+0x38>
	Timer1_deInit();
    246e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Timer1_deInit>
}
    2472:	28 96       	adiw	r28, 0x08	; 8
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <timer_tick>:
void timer_tick(void){
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    248c:	80 91 0f 01 	lds	r24, 0x010F
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	80 93 0f 01 	sts	0x010F, r24
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <Timer1_setCallBack+0x6>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	9a 83       	std	Y+2, r25	; 0x02
    24a8:	89 83       	std	Y+1, r24	; 0x01
	Timer1_CALLBACK_Fptr = a_ptr;
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	90 93 fe 00 	sts	0x00FE, r25
    24b2:	80 93 fd 00 	sts	0x00FD, r24
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <UART_init>:
 * 2.insert the required Stop value.
 * 3.insert the required data value.
 * 4.insert the required Baud Rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <UART_init+0xa>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <UART_init+0xc>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    24d4:	eb e2       	ldi	r30, 0x2B	; 43
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    24dc:	ea e2       	ldi	r30, 0x2A	; 42
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	88 e1       	ldi	r24, 0x18	; 24
    24e2:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    24e4:	e0 e4       	ldi	r30, 0x40	; 64
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	80 83       	st	Z, r24
	/* insert the required parity value in the four and five  bits (UPM1, and UPM0)
		  of UCSRC Register*/
	UCSRC =  (UCSRC  & 0XCF)|((Config_Ptr ->PARITY)<<4) ;
    24ec:	a0 e4       	ldi	r26, 0x40	; 64
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e0 e4       	ldi	r30, 0x40	; 64
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	28 2f       	mov	r18, r24
    24f8:	2f 7c       	andi	r18, 0xCF	; 207
    24fa:	eb 81       	ldd	r30, Y+3	; 0x03
    24fc:	fc 81       	ldd	r31, Y+4	; 0x04
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	82 95       	swap	r24
    2506:	92 95       	swap	r25
    2508:	90 7f       	andi	r25, 0xF0	; 240
    250a:	98 27       	eor	r25, r24
    250c:	80 7f       	andi	r24, 0xF0	; 240
    250e:	98 27       	eor	r25, r24
    2510:	82 2b       	or	r24, r18
    2512:	8c 93       	st	X, r24
	/* insert the required Stop value in the three bit (USBS)
			  of UCSRC Register*/
	UCSRC =  (UCSRC & 0xF7 )|((Config_Ptr->STOP)<<3);
    2514:	a0 e4       	ldi	r26, 0x40	; 64
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e0 e4       	ldi	r30, 0x40	; 64
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	28 2f       	mov	r18, r24
    2520:	27 7f       	andi	r18, 0xF7	; 247
    2522:	eb 81       	ldd	r30, Y+3	; 0x03
    2524:	fc 81       	ldd	r31, Y+4	; 0x04
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	82 2b       	or	r24, r18
    253a:	8c 93       	st	X, r24
	/* insert the required data value in the one and two  bits (UCSZ2, and UCSZ1)
			  of UCSRC Register*/
	UCSRC = (UCSRC& 0xF9 ) |((Config_Ptr->DATA)<<1);
    253c:	a0 e4       	ldi	r26, 0x40	; 64
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e0 e4       	ldi	r30, 0x40	; 64
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	28 2f       	mov	r18, r24
    2548:	29 7f       	andi	r18, 0xF9	; 249
    254a:	eb 81       	ldd	r30, Y+3	; 0x03
    254c:	fc 81       	ldd	r31, Y+4	; 0x04
    254e:	80 81       	ld	r24, Z
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	82 2b       	or	r24, r18
    255a:	8c 93       	st	X, r24
	/* insert the required Baud Rate ,Calculate the UBRR register value*/
	uint16 ubrr_value = (Config_Ptr-> Baud_Rate);
    255c:	eb 81       	ldd	r30, Y+3	; 0x03
    255e:	fc 81       	ldd	r31, Y+4	; 0x04
    2560:	83 81       	ldd	r24, Z+3	; 0x03
    2562:	94 81       	ldd	r25, Z+4	; 0x04
    2564:	a5 81       	ldd	r26, Z+5	; 0x05
    2566:	b6 81       	ldd	r27, Z+6	; 0x06
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (((((F_CPU / (ubrr_value * 8UL))) - 1))>>8);
    256c:	00 e4       	ldi	r16, 0x40	; 64
    256e:	10 e0       	ldi	r17, 0x00	; 0
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	cc 01       	movw	r24, r24
    2576:	a0 e0       	ldi	r26, 0x00	; 0
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	aa 1f       	adc	r26, r26
    2580:	bb 1f       	adc	r27, r27
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	aa 1f       	adc	r26, r26
    2588:	bb 1f       	adc	r27, r27
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	aa 1f       	adc	r26, r26
    2590:	bb 1f       	adc	r27, r27
    2592:	9c 01       	movw	r18, r24
    2594:	ad 01       	movw	r20, r26
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	92 e1       	ldi	r25, 0x12	; 18
    259a:	aa e7       	ldi	r26, 0x7A	; 122
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 9b 13 	call	0x2736	; 0x2736 <__udivmodsi4>
    25a6:	da 01       	movw	r26, r20
    25a8:	c9 01       	movw	r24, r18
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	a1 09       	sbc	r26, r1
    25ae:	b1 09       	sbc	r27, r1
    25b0:	89 2f       	mov	r24, r25
    25b2:	9a 2f       	mov	r25, r26
    25b4:	ab 2f       	mov	r26, r27
    25b6:	bb 27       	eor	r27, r27
    25b8:	f8 01       	movw	r30, r16
    25ba:	80 83       	st	Z, r24
	UBRRL = (((F_CPU / (ubrr_value * 8UL))) - 1);
    25bc:	09 e2       	ldi	r16, 0x29	; 41
    25be:	10 e0       	ldi	r17, 0x00	; 0
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	cc 01       	movw	r24, r24
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	aa 1f       	adc	r26, r26
    25d0:	bb 1f       	adc	r27, r27
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	aa 1f       	adc	r26, r26
    25d8:	bb 1f       	adc	r27, r27
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	aa 1f       	adc	r26, r26
    25e0:	bb 1f       	adc	r27, r27
    25e2:	9c 01       	movw	r18, r24
    25e4:	ad 01       	movw	r20, r26
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	92 e1       	ldi	r25, 0x12	; 18
    25ea:	aa e7       	ldi	r26, 0x7A	; 122
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 9b 13 	call	0x2736	; 0x2736 <__udivmodsi4>
    25f6:	da 01       	movw	r26, r20
    25f8:	c9 01       	movw	r24, r18
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 83       	st	Z, r24
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	08 95       	ret

00002612 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	0f 92       	push	r0
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    261e:	eb e2       	ldi	r30, 0x2B	; 43
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	80 72       	andi	r24, 0x20	; 32
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	b9 f3       	breq	.-18     	; 0x261e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2630:	ec e2       	ldi	r30, 0x2C	; 44
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2648:	eb e2       	ldi	r30, 0x2B	; 43
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 23       	and	r24, r24
    2650:	dc f7       	brge	.-10     	; 0x2648 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2652:	ec e2       	ldi	r30, 0x2C	; 44
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <UART_sendString+0x6>
    2664:	0f 92       	push	r0
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	9b 83       	std	Y+3, r25	; 0x03
    266c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    266e:	19 82       	std	Y+1, r1	; 0x01
    2670:	0e c0       	rjmp	.+28     	; 0x268e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	fc 01       	movw	r30, r24
    267e:	e2 0f       	add	r30, r18
    2680:	f3 1f       	adc	r31, r19
    2682:	80 81       	ld	r24, Z
    2684:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_sendByte>
		i++;
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	9b 81       	ldd	r25, Y+3	; 0x03
    2698:	fc 01       	movw	r30, r24
    269a:	e2 0f       	add	r30, r18
    269c:	f3 1f       	adc	r31, r19
    269e:	80 81       	ld	r24, Z
    26a0:	88 23       	and	r24, r24
    26a2:	39 f7       	brne	.-50     	; 0x2672 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <UART_receiveString+0xa>
    26ba:	0f 92       	push	r0
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	9b 83       	std	Y+3, r25	; 0x03
    26c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26c4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	9b 81       	ldd	r25, Y+3	; 0x03
    26d0:	8c 01       	movw	r16, r24
    26d2:	02 0f       	add	r16, r18
    26d4:	13 1f       	adc	r17, r19
    26d6:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
    26da:	f8 01       	movw	r30, r16
    26dc:	80 83       	st	Z, r24
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	8c 01       	movw	r16, r24
    26f2:	02 0f       	add	r16, r18
    26f4:	13 1f       	adc	r17, r19
    26f6:	0e 94 20 13 	call	0x2640	; 0x2640 <UART_recieveByte>
    26fa:	f8 01       	movw	r30, r16
    26fc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	e2 0f       	add	r30, r18
    270c:	f3 1f       	adc	r31, r19
    270e:	80 81       	ld	r24, Z
    2710:	83 32       	cpi	r24, 0x23	; 35
    2712:	31 f7       	brne	.-52     	; 0x26e0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	10 82       	st	Z, r1
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	08 95       	ret

00002736 <__udivmodsi4>:
    2736:	a1 e2       	ldi	r26, 0x21	; 33
    2738:	1a 2e       	mov	r1, r26
    273a:	aa 1b       	sub	r26, r26
    273c:	bb 1b       	sub	r27, r27
    273e:	fd 01       	movw	r30, r26
    2740:	0d c0       	rjmp	.+26     	; 0x275c <__udivmodsi4_ep>

00002742 <__udivmodsi4_loop>:
    2742:	aa 1f       	adc	r26, r26
    2744:	bb 1f       	adc	r27, r27
    2746:	ee 1f       	adc	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	a2 17       	cp	r26, r18
    274c:	b3 07       	cpc	r27, r19
    274e:	e4 07       	cpc	r30, r20
    2750:	f5 07       	cpc	r31, r21
    2752:	20 f0       	brcs	.+8      	; 0x275c <__udivmodsi4_ep>
    2754:	a2 1b       	sub	r26, r18
    2756:	b3 0b       	sbc	r27, r19
    2758:	e4 0b       	sbc	r30, r20
    275a:	f5 0b       	sbc	r31, r21

0000275c <__udivmodsi4_ep>:
    275c:	66 1f       	adc	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	1a 94       	dec	r1
    2766:	69 f7       	brne	.-38     	; 0x2742 <__udivmodsi4_loop>
    2768:	60 95       	com	r22
    276a:	70 95       	com	r23
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	9b 01       	movw	r18, r22
    2772:	ac 01       	movw	r20, r24
    2774:	bd 01       	movw	r22, r26
    2776:	cf 01       	movw	r24, r30
    2778:	08 95       	ret

0000277a <__prologue_saves__>:
    277a:	2f 92       	push	r2
    277c:	3f 92       	push	r3
    277e:	4f 92       	push	r4
    2780:	5f 92       	push	r5
    2782:	6f 92       	push	r6
    2784:	7f 92       	push	r7
    2786:	8f 92       	push	r8
    2788:	9f 92       	push	r9
    278a:	af 92       	push	r10
    278c:	bf 92       	push	r11
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	ca 1b       	sub	r28, r26
    27a4:	db 0b       	sbc	r29, r27
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	09 94       	ijmp

000027b2 <__epilogue_restores__>:
    27b2:	2a 88       	ldd	r2, Y+18	; 0x12
    27b4:	39 88       	ldd	r3, Y+17	; 0x11
    27b6:	48 88       	ldd	r4, Y+16	; 0x10
    27b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    27bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    27be:	8c 84       	ldd	r8, Y+12	; 0x0c
    27c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27c4:	b9 84       	ldd	r11, Y+9	; 0x09
    27c6:	c8 84       	ldd	r12, Y+8	; 0x08
    27c8:	df 80       	ldd	r13, Y+7	; 0x07
    27ca:	ee 80       	ldd	r14, Y+6	; 0x06
    27cc:	fd 80       	ldd	r15, Y+5	; 0x05
    27ce:	0c 81       	ldd	r16, Y+4	; 0x04
    27d0:	1b 81       	ldd	r17, Y+3	; 0x03
    27d2:	aa 81       	ldd	r26, Y+2	; 0x02
    27d4:	b9 81       	ldd	r27, Y+1	; 0x01
    27d6:	ce 0f       	add	r28, r30
    27d8:	d1 1d       	adc	r29, r1
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	ed 01       	movw	r28, r26
    27e6:	08 95       	ret

000027e8 <itoa>:
    27e8:	fb 01       	movw	r30, r22
    27ea:	9f 01       	movw	r18, r30
    27ec:	e8 94       	clt
    27ee:	42 30       	cpi	r20, 0x02	; 2
    27f0:	c4 f0       	brlt	.+48     	; 0x2822 <itoa+0x3a>
    27f2:	45 32       	cpi	r20, 0x25	; 37
    27f4:	b4 f4       	brge	.+44     	; 0x2822 <itoa+0x3a>
    27f6:	4a 30       	cpi	r20, 0x0A	; 10
    27f8:	29 f4       	brne	.+10     	; 0x2804 <itoa+0x1c>
    27fa:	97 fb       	bst	r25, 7
    27fc:	1e f4       	brtc	.+6      	; 0x2804 <itoa+0x1c>
    27fe:	90 95       	com	r25
    2800:	81 95       	neg	r24
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	64 2f       	mov	r22, r20
    2806:	77 27       	eor	r23, r23
    2808:	0e 94 25 14 	call	0x284a	; 0x284a <__udivmodhi4>
    280c:	80 5d       	subi	r24, 0xD0	; 208
    280e:	8a 33       	cpi	r24, 0x3A	; 58
    2810:	0c f0       	brlt	.+2      	; 0x2814 <itoa+0x2c>
    2812:	89 5d       	subi	r24, 0xD9	; 217
    2814:	81 93       	st	Z+, r24
    2816:	cb 01       	movw	r24, r22
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	a1 f7       	brne	.-24     	; 0x2804 <itoa+0x1c>
    281c:	16 f4       	brtc	.+4      	; 0x2822 <itoa+0x3a>
    281e:	5d e2       	ldi	r21, 0x2D	; 45
    2820:	51 93       	st	Z+, r21
    2822:	10 82       	st	Z, r1
    2824:	c9 01       	movw	r24, r18
    2826:	0c 94 15 14 	jmp	0x282a	; 0x282a <strrev>

0000282a <strrev>:
    282a:	dc 01       	movw	r26, r24
    282c:	fc 01       	movw	r30, r24
    282e:	67 2f       	mov	r22, r23
    2830:	71 91       	ld	r23, Z+
    2832:	77 23       	and	r23, r23
    2834:	e1 f7       	brne	.-8      	; 0x282e <strrev+0x4>
    2836:	32 97       	sbiw	r30, 0x02	; 2
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <strrev+0x18>
    283a:	7c 91       	ld	r23, X
    283c:	6d 93       	st	X+, r22
    283e:	70 83       	st	Z, r23
    2840:	62 91       	ld	r22, -Z
    2842:	ae 17       	cp	r26, r30
    2844:	bf 07       	cpc	r27, r31
    2846:	c8 f3       	brcs	.-14     	; 0x283a <strrev+0x10>
    2848:	08 95       	ret

0000284a <__udivmodhi4>:
    284a:	aa 1b       	sub	r26, r26
    284c:	bb 1b       	sub	r27, r27
    284e:	51 e1       	ldi	r21, 0x11	; 17
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <__udivmodhi4_ep>

00002852 <__udivmodhi4_loop>:
    2852:	aa 1f       	adc	r26, r26
    2854:	bb 1f       	adc	r27, r27
    2856:	a6 17       	cp	r26, r22
    2858:	b7 07       	cpc	r27, r23
    285a:	10 f0       	brcs	.+4      	; 0x2860 <__udivmodhi4_ep>
    285c:	a6 1b       	sub	r26, r22
    285e:	b7 0b       	sbc	r27, r23

00002860 <__udivmodhi4_ep>:
    2860:	88 1f       	adc	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	5a 95       	dec	r21
    2866:	a9 f7       	brne	.-22     	; 0x2852 <__udivmodhi4_loop>
    2868:	80 95       	com	r24
    286a:	90 95       	com	r25
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	08 95       	ret

00002872 <_exit>:
    2872:	f8 94       	cli

00002874 <__stop_program>:
    2874:	ff cf       	rjmp	.-2      	; 0x2874 <__stop_program>
