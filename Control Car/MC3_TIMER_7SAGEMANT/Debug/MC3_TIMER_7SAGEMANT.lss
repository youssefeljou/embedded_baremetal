
MC3_TIMER_7SAGEMANT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00005bc4  00005c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800174  00800174  00005d6c  2**0
                  ALLOC
  3 .stab         00006078  00000000  00000000  00005d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000031e5  00000000  00000000  0000bde4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000efc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f169  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f35b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011766  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001417a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__vector_4>
      14:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_5>
      18:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_6>
      1c:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_9>
      28:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_10>
      2c:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <main>
      8a:	0c 94 e0 2d 	jmp	0x5bc0	; 0x5bc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 2d 	jmp	0x5af0	; 0x5af0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 2d 	jmp	0x5af0	; 0x5af0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 2d 	jmp	0x5b00	; 0x5b00 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9c 2d 	jmp	0x5b38	; 0x5b38 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 88 2d 	jmp	0x5b10	; 0x5b10 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 80 2d 	jmp	0x5b00	; 0x5b00 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9c 2d 	jmp	0x5b38	; 0x5b38 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_Enabled>:
#include "../LIB/std_types.h"
#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include"GIE.h"
#include<avr/io.h>
void GIE_Enabled(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_Disabled>:
void GIE_Disabled(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_setupPinDirection+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <GPIO_setupPinDirection+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	88 30       	cpi	r24, 0x08	; 8
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <GPIO_setupPinDirection+0x1c>
     e80:	d5 c0       	rjmp	.+426    	; 0x102c <GPIO_setupPinDirection+0x1c6>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f0       	brcs	.+2      	; 0xe8a <GPIO_setupPinDirection+0x24>
     e88:	d1 c0       	rjmp	.+418    	; 0x102c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <GPIO_setupPinDirection+0x3a>
     e9e:	43 c0       	rjmp	.+134    	; 0xf26 <GPIO_setupPinDirection+0xc0>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <GPIO_setupPinDirection+0x4e>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	71 f0       	breq	.+28     	; 0xece <GPIO_setupPinDirection+0x68>
     eb2:	bc c0       	rjmp	.+376    	; 0x102c <GPIO_setupPinDirection+0x1c6>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <GPIO_setupPinDirection+0x5a>
     ebe:	5f c0       	rjmp	.+190    	; 0xf7e <GPIO_setupPinDirection+0x118>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <GPIO_setupPinDirection+0x66>
     eca:	85 c0       	rjmp	.+266    	; 0xfd6 <GPIO_setupPinDirection+0x170>
     ecc:	af c0       	rjmp	.+350    	; 0x102c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_setupPinDirection+0x8c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_setupPinDirection+0x88>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	98 c0       	rjmp	.+304    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0xb4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0xb0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	83 c0       	rjmp	.+262    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_setupPinDirection+0xe4>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_setupPinDirection+0xe0>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	6c c0       	rjmp	.+216    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_setupPinDirection+0x10c>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_setupPinDirection+0x108>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	57 c0       	rjmp	.+174    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	a1 f4       	brne	.+40     	; 0xfac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f84:	a4 e3       	ldi	r26, 0x34	; 52
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e3       	ldi	r30, 0x34	; 52
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_setupPinDirection+0x13c>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_setupPinDirection+0x138>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	40 c0       	rjmp	.+128    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_setupPinDirection+0x164>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_setupPinDirection+0x160>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	2b c0       	rjmp	.+86     	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_setupPinDirection+0x194>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_setupPinDirection+0x190>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	14 c0       	rjmp	.+40     	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_setupPinDirection+0x1bc>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_setupPinDirection+0x1b8>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_writePin+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <GPIO_writePin+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	08 f0       	brcs	.+2      	; 0x1058 <GPIO_writePin+0x1c>
    1056:	d5 c0       	rjmp	.+426    	; 0x1202 <GPIO_writePin+0x1c6>
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	08 f0       	brcs	.+2      	; 0x1060 <GPIO_writePin+0x24>
    105e:	d1 c0       	rjmp	.+418    	; 0x1202 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <GPIO_writePin+0x3a>
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <GPIO_writePin+0xc0>
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <GPIO_writePin+0x4e>
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	71 f0       	breq	.+28     	; 0x10a4 <GPIO_writePin+0x68>
    1088:	bc c0       	rjmp	.+376    	; 0x1202 <GPIO_writePin+0x1c6>
    108a:	2c 81       	ldd	r18, Y+4	; 0x04
    108c:	3d 81       	ldd	r19, Y+5	; 0x05
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <GPIO_writePin+0x5a>
    1094:	5f c0       	rjmp	.+190    	; 0x1154 <GPIO_writePin+0x118>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <GPIO_writePin+0x66>
    10a0:	85 c0       	rjmp	.+266    	; 0x11ac <GPIO_writePin+0x170>
    10a2:	af c0       	rjmp	.+350    	; 0x1202 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	a1 f4       	brne	.+40     	; 0x10d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_writePin+0x8c>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_writePin+0x88>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	98 c0       	rjmp	.+304    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_writePin+0xb4>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_writePin+0xb0>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	83 c0       	rjmp	.+262    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	a1 f4       	brne	.+40     	; 0x112a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GPIO_writePin+0xe4>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <GPIO_writePin+0xe0>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	6c c0       	rjmp	.+216    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_writePin+0x10c>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_writePin+0x108>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	57 c0       	rjmp	.+174    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	a1 f4       	brne	.+40     	; 0x1182 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    115a:	a5 e3       	ldi	r26, 0x35	; 53
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e3       	ldi	r30, 0x35	; 53
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_writePin+0x13c>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <GPIO_writePin+0x138>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_writePin+0x164>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_writePin+0x160>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	2b c0       	rjmp	.+86     	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	a1 f4       	brne	.+40     	; 0x11da <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_writePin+0x194>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_writePin+0x190>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_writePin+0x1bc>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_writePin+0x1b8>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <GPIO_readPin+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_readPin+0x8>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1224:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	08 f0       	brcs	.+2      	; 0x122e <GPIO_readPin+0x1c>
    122c:	84 c0       	rjmp	.+264    	; 0x1336 <GPIO_readPin+0x124>
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <GPIO_readPin+0x24>
    1234:	80 c0       	rjmp	.+256    	; 0x1336 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	4c 81       	ldd	r20, Y+4	; 0x04
    1242:	5d 81       	ldd	r21, Y+5	; 0x05
    1244:	41 30       	cpi	r20, 0x01	; 1
    1246:	51 05       	cpc	r21, r1
    1248:	79 f1       	breq	.+94     	; 0x12a8 <GPIO_readPin+0x96>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	34 f4       	brge	.+12     	; 0x1260 <GPIO_readPin+0x4e>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	69 f0       	breq	.+26     	; 0x1278 <GPIO_readPin+0x66>
    125e:	6b c0       	rjmp	.+214    	; 0x1336 <GPIO_readPin+0x124>
    1260:	4c 81       	ldd	r20, Y+4	; 0x04
    1262:	5d 81       	ldd	r21, Y+5	; 0x05
    1264:	42 30       	cpi	r20, 0x02	; 2
    1266:	51 05       	cpc	r21, r1
    1268:	b9 f1       	breq	.+110    	; 0x12d8 <GPIO_readPin+0xc6>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <GPIO_readPin+0x64>
    1274:	49 c0       	rjmp	.+146    	; 0x1308 <GPIO_readPin+0xf6>
    1276:	5f c0       	rjmp	.+190    	; 0x1336 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1278:	e9 e3       	ldi	r30, 0x39	; 57
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_readPin+0x7e>
    128c:	55 95       	asr	r21
    128e:	47 95       	ror	r20
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_readPin+0x7a>
    1294:	ca 01       	movw	r24, r20
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	90 70       	andi	r25, 0x00	; 0
    129a:	88 23       	and	r24, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12a4:	19 82       	std	Y+1, r1	; 0x01
    12a6:	47 c0       	rjmp	.+142    	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_readPin+0xae>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_readPin+0xaa>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	88 23       	and	r24, r24
    12cc:	19 f0       	breq	.+6      	; 0x12d4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	31 c0       	rjmp	.+98     	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	2f c0       	rjmp	.+94     	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12d8:	e3 e3       	ldi	r30, 0x33	; 51
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_readPin+0xde>
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	8a 95       	dec	r24
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_readPin+0xda>
    12f4:	ca 01       	movw	r24, r20
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	90 70       	andi	r25, 0x00	; 0
    12fa:	88 23       	and	r24, r24
    12fc:	19 f0       	breq	.+6      	; 0x1304 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	17 c0       	rjmp	.+46     	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1308:	e0 e3       	ldi	r30, 0x30	; 48
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a9 01       	movw	r20, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <GPIO_readPin+0x10e>
    131c:	55 95       	asr	r21
    131e:	47 95       	ror	r20
    1320:	8a 95       	dec	r24
    1322:	e2 f7       	brpl	.-8      	; 0x131c <GPIO_readPin+0x10a>
    1324:	ca 01       	movw	r24, r20
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	90 70       	andi	r25, 0x00	; 0
    132a:	88 23       	and	r24, r24
    132c:	19 f0       	breq	.+6      	; 0x1334 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1334:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_setupPortDirection+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <GPIO_setupPortDirection+0x8>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	90 f5       	brcc	.+100    	; 0x13c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3c 83       	std	Y+4, r19	; 0x04
    1366:	2b 83       	std	Y+3, r18	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <GPIO_setupPortDirection+0x5e>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <GPIO_setupPortDirection+0x3e>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <GPIO_setupPortDirection+0x54>
    1384:	1e c0       	rjmp	.+60     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	81 f0       	breq	.+32     	; 0x13b0 <GPIO_setupPortDirection+0x68>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <GPIO_setupPortDirection+0x72>
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    139c:	ea e3       	ldi	r30, 0x3A	; 58
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13b0:	e4 e3       	ldi	r30, 0x34	; 52
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <GPIO_writePort+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <GPIO_writePort+0x8>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	90 f5       	brcc	.+100    	; 0x144a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	d1 f0       	breq	.+52     	; 0x142e <GPIO_writePort+0x5e>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <GPIO_writePort+0x3e>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <GPIO_writePort+0x54>
    140c:	1e c0       	rjmp	.+60     	; 0x144a <GPIO_writePort+0x7a>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <GPIO_writePort+0x68>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	81 f0       	breq	.+32     	; 0x1442 <GPIO_writePort+0x72>
    1422:	13 c0       	rjmp	.+38     	; 0x144a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
    142c:	0e c0       	rjmp	.+28     	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
    1436:	09 c0       	rjmp	.+18     	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	04 c0       	rjmp	.+8      	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
			break;
		}
	}
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <GPIO_readPort+0x6>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <GPIO_readPort+0x8>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1466:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	90 f5       	brcc	.+100    	; 0x14d2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3c 83       	std	Y+4, r19	; 0x04
    1476:	2b 83       	std	Y+3, r18	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	d1 f0       	breq	.+52     	; 0x14b6 <GPIO_readPort+0x5e>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <GPIO_readPort+0x3e>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <GPIO_readPort+0x54>
    1494:	1e c0       	rjmp	.+60     	; 0x14d2 <GPIO_readPort+0x7a>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <GPIO_readPort+0x68>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	81 f0       	breq	.+32     	; 0x14ca <GPIO_readPort+0x72>
    14aa:	13 c0       	rjmp	.+38     	; 0x14d2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14ac:	e9 e3       	ldi	r30, 0x39	; 57
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14c0:	e3 e3       	ldi	r30, 0x33	; 51
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14ca:	e0 e3       	ldi	r30, 0x30	; 48
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <INT0_Init>:
#include "gpio.h"
#define INT0_Rising
#define INT1_Rising
#define INT2_Rising
void INT0_Init(void)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);//config interrupt as input
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT0);                  //enable interrupt
    14f4:	ab e5       	ldi	r26, 0x5B	; 91
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e5       	ldi	r30, 0x5B	; 91
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1502:	af e5       	ldi	r26, 0x5F	; 95
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ef e5       	ldi	r30, 0x5F	; 95
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24
#ifdef  INT0_Rising

	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	83 60       	ori	r24, 0x03	; 3
    151c:	8c 93       	st	X, r24
#else
	MCUCR |= (1<<ISC00);
	MCUCR &= ~(1<<ISC01);
#endif
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <INT1_Init>:

void INT1_Init(void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);//config interrupt as input
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT1);//enable interrupt
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1544:	af e5       	ldi	r26, 0x5F	; 95
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ef e5       	ldi	r30, 0x5F	; 95
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
#ifdef  INT1_Rising

	MCUCR |= (1<<ISC11) | (1<<ISC10);   // Trigger INT0 with the raising edge
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8c 60       	ori	r24, 0x0C	; 12
    155e:	8c 93       	st	X, r24
#else
	MCUCR |= (1<<ISC11);
	MCUCR &= ~(1<<ISC10);
#endif
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <INT2_Init>:
void INT2_Init(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);//config interrupt as input
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT2);//enable interrupt
    1578:	ab e5       	ldi	r26, 0x5B	; 91
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	eb e5       	ldi	r30, 0x5B	; 91
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
#ifdef  INT2_Rising

	MCUCSR |= (1<<ISC2);  // Trigger INT0 with the raising edge
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	8c 93       	st	X, r24
#else
	MCUCSR &= ~(1<<ISC2);
#endif
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster( SPI_PRESCALLER  Config_Ptr)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	64 e0       	ldi	r22, 0x04	; 4
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	66 e0       	ldi	r22, 0x06	; 6
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	67 e0       	ldi	r22, 0x07	; 7
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	 * MSTR    = 1 Enable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    15dc:	ed e2       	ldi	r30, 0x2D	; 45
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 e5       	ldi	r24, 0x50	; 80
    15e2:	80 83       	st	Z, r24
	SPCR |= Config_Ptr; /* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
    15e4:	ad e2       	ldi	r26, 0x2D	; 45
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ed e2       	ldi	r30, 0x2D	; 45
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	90 81       	ld	r25, Z
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	89 2b       	or	r24, r25
    15f2:	8c 93       	st	X, r24
	SPSR &= ~(1<<SPI2X);
    15f4:	ae e2       	ldi	r26, 0x2E	; 46
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ee e2       	ldi	r30, 0x2E	; 46
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8e 7f       	andi	r24, 0xFE	; 254
    1600:	8c 93       	st	X, r24
#ifdef DOUBLE_SPEED
	SPSR |= (1<<SPI2X);
    1602:	ae e2       	ldi	r26, 0x2E	; 46
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e2       	ldi	r30, 0x2E	; 46
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	81 60       	ori	r24, 0x01	; 1
    160e:	8c 93       	st	X, r24
#endif
}
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	65 e0       	ldi	r22, 0x05	; 5
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	66 e0       	ldi	r22, 0x06	; 6
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	67 e0       	ldi	r22, 0x07	; 7
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	CLEAR_BIT(SPCR,SPCR_MSTR);
    1648:	ad e2       	ldi	r26, 0x2D	; 45
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ed e2       	ldi	r30, 0x2D	; 45
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7e       	andi	r24, 0xEF	; 239
    1654:	8c 93       	st	X, r24
	SPCR = (1<<SPE);
    1656:	ed e2       	ldi	r30, 0x2D	; 45
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 e4       	ldi	r24, 0x40	; 64
    165c:	80 83       	st	Z, r24

#ifdef DOUBLE_SPEED
	SPSR |= (1<<SPI2X);
    165e:	ae e2       	ldi	r26, 0x2E	; 46
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ee e2       	ldi	r30, 0x2E	; 46
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	8c 93       	st	X, r24
#endif
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    167e:	ef e2       	ldi	r30, 0x2F	; 47
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    1686:	ee e2       	ldi	r30, 0x2E	; 46
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    1690:	ef e2       	ldi	r30, 0x2F	; 47
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
}
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <SPI_sendString+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <SPI_sendString+0x8>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    16ae:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	fc 01       	movw	r30, r24
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	80 81       	ld	r24, Z
    16c6:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    16ca:	89 83       	std	Y+1, r24	; 0x01
		i++;
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	fc 01       	movw	r30, r24
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	80 81       	ld	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	31 f7       	brne	.-52     	; 0x16b4 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <SPI_receiveString+0xa>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    170a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	8c 01       	movw	r16, r24
    1718:	02 0f       	add	r16, r18
    171a:	13 1f       	adc	r17, r19
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	10 c0       	rjmp	.+32     	; 0x1748 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	8c 01       	movw	r16, r24
    173a:	02 0f       	add	r16, r18
    173c:	13 1f       	adc	r17, r19
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	fc 01       	movw	r30, r24
    1754:	e2 0f       	add	r30, r18
    1756:	f3 1f       	adc	r31, r19
    1758:	80 81       	ld	r24, Z
    175a:	83 32       	cpi	r24, 0x23	; 35
    175c:	29 f7       	brne	.-54     	; 0x1728 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	9b 81       	ldd	r25, Y+3	; 0x03
    1768:	fc 01       	movw	r30, r24
    176a:	e2 0f       	add	r30, r18
    176c:	f3 1f       	adc	r31, r19
    176e:	10 82       	st	Z, r1
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <__vector_5>:
uint16 g_timePeriod = 0;
uint16 g_timePeriodPlusHigh = 0;
*/

 ISR(TIMER2_OVF_vect)
{
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_CALLBACK_Fptr != NULL_PTR)
    17aa:	80 91 78 01 	lds	r24, 0x0178
    17ae:	90 91 79 01 	lds	r25, 0x0179
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <__vector_5+0x40>
	{
		(*Timer2_CALLBACK_Fptr)();
    17b6:	e0 91 78 01 	lds	r30, 0x0178
    17ba:	f0 91 79 01 	lds	r31, 0x0179
    17be:	09 95       	icall
	}
}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_6>:
	}

}
*/
ISR(TIMER1_CAPT_vect)
{
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1810:	80 91 7a 01 	lds	r24, 0x017A
    1814:	90 91 7b 01 	lds	r25, 0x017B
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	29 f0       	breq	.+10     	; 0x1826 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    181c:	e0 91 7a 01 	lds	r30, 0x017A
    1820:	f0 91 7b 01 	lds	r31, 0x017B
    1824:	09 95       	icall
	}
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	bf 91       	pop	r27
    1830:	af 91       	pop	r26
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	7f 91       	pop	r23
    1838:	6f 91       	pop	r22
    183a:	5f 91       	pop	r21
    183c:	4f 91       	pop	r20
    183e:	3f 91       	pop	r19
    1840:	2f 91       	pop	r18
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_CALLBACK_Fptr != NULL_PTR)
    1876:	80 91 76 01 	lds	r24, 0x0176
    187a:	90 91 77 01 	lds	r25, 0x0177
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	29 f0       	breq	.+10     	; 0x188c <__vector_9+0x40>
	{
		(*Timer1_CALLBACK_Fptr)();
    1882:	e0 91 76 01 	lds	r30, 0x0176
    1886:	f0 91 77 01 	lds	r31, 0x0177
    188a:	09 95       	icall
	}
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_11>:
		(*Timer1_CALLBACK_Fptr)();
	}
}
 */
ISR(TIMER0_OVF_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    18dc:	80 91 74 01 	lds	r24, 0x0174
    18e0:	90 91 75 01 	lds	r25, 0x0175
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <__vector_11+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    18e8:	e0 91 74 01 	lds	r30, 0x0174
    18ec:	f0 91 75 01 	lds	r31, 0x0175
    18f0:	09 95       	icall
	}
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    1942:	80 91 74 01 	lds	r24, 0x0174
    1946:	90 91 75 01 	lds	r25, 0x0175
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	29 f0       	breq	.+10     	; 0x1958 <__vector_10+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    194e:	e0 91 74 01 	lds	r30, 0x0174
    1952:	f0 91 75 01 	lds	r31, 0x0175
    1956:	09 95       	icall
	}
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <TIMER0_init>:


void TIMER0_init(const Timer0_ConfigType * Config_Ptr)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <TIMER0_init+0x6>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |= Config_Ptr->prescaler;
    198c:	a3 e5       	ldi	r26, 0x53	; 83
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e3 e5       	ldi	r30, 0x53	; 83
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	90 81       	ld	r25, Z
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	85 81       	ldd	r24, Z+5	; 0x05
    199c:	89 2b       	or	r24, r25
    199e:	8c 93       	st	X, r24
	TCNT0 = Config_Ptr->initial_value;
    19a0:	a2 e5       	ldi	r26, 0x52	; 82
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    19ae:	a9 e5       	ldi	r26, 0x59	; 89
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e9 e5       	ldi	r30, 0x59	; 89
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	81 60       	ori	r24, 0x01	; 1
    19ba:	8c 93       	st	X, r24
	if ((Config_Ptr->mode) == TIMER0_NORMAL_MODE)
    19bc:	e9 81       	ldd	r30, Y+1	; 0x01
    19be:	fa 81       	ldd	r31, Y+2	; 0x02
    19c0:	84 81       	ldd	r24, Z+4	; 0x04
    19c2:	88 23       	and	r24, r24
    19c4:	21 f5       	brne	.+72     	; 0x1a0e <TIMER0_init+0x90>
	{
		SET_BIT(TCCR0,FOC0);//disable non-pwm
    19c6:	a3 e5       	ldi	r26, 0x53	; 83
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e3 e5       	ldi	r30, 0x53	; 83
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    19d4:	a3 e5       	ldi	r26, 0x53	; 83
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e3 e5       	ldi	r30, 0x53	; 83
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7b       	andi	r24, 0xBF	; 191
    19e0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);//choose normal mode
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	87 7f       	andi	r24, 0xF7	; 247
    19ee:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    19f0:	a3 e5       	ldi	r26, 0x53	; 83
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e5       	ldi	r30, 0x53	; 83
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 7e       	andi	r24, 0xEF	; 239
    19fc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);//normal operation OC0 disconnected
    19fe:	a3 e5       	ldi	r26, 0x53	; 83
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8f 7d       	andi	r24, 0xDF	; 223
    1a0a:	8c 93       	st	X, r24
    1a0c:	7a c0       	rjmp	.+244    	; 0x1b02 <TIMER0_init+0x184>
		//enable interrupt

	}
	else if ((Config_Ptr->mode) == TIMER0_PWM_PHASE_COTROL)
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	84 81       	ldd	r24, Z+4	; 0x04
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	e9 f4       	brne	.+58     	; 0x1a52 <TIMER0_init+0xd4>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);
    1a18:	a3 e5       	ldi	r26, 0x53	; 83
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e3 e5       	ldi	r30, 0x53	; 83
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 64       	ori	r24, 0x40	; 64
    1a24:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);//choose PHASE_CONTROL
    1a26:	a3 e5       	ldi	r26, 0x53	; 83
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e3 e5       	ldi	r30, 0x53	; 83
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1a34:	a3 e5       	ldi	r26, 0x53	; 83
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e3 e5       	ldi	r30, 0x53	; 83
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8f 7e       	andi	r24, 0xEF	; 239
    1a40:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);//normal operation OC0 disconnected
    1a42:	a3 e5       	ldi	r26, 0x53	; 83
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e3 e5       	ldi	r30, 0x53	; 83
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	8c 93       	st	X, r24
    1a50:	58 c0       	rjmp	.+176    	; 0x1b02 <TIMER0_init+0x184>

	}

	else if ((Config_Ptr->mode) == TIMER0_COMPARE_MODE)
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	84 81       	ldd	r24, Z+4	; 0x04
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	91 f5       	brne	.+100    	; 0x1ac0 <TIMER0_init+0x142>

	{
		SET_BIT(TCCR0,FOC0);//disable non-pwm
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24

		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1a6a:	a3 e5       	ldi	r26, 0x53	; 83
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e3 e5       	ldi	r30, 0x53	; 83
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 7b       	andi	r24, 0xBF	; 191
    1a76:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);//enable COMPARE mode
    1a78:	a3 e5       	ldi	r26, 0x53	; 83
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e3 e5       	ldi	r30, 0x53	; 83
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 60       	ori	r24, 0x08	; 8
    1a84:	8c 93       	st	X, r24
		//disconnect oc0 and meke compare normal mode
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1a86:	a3 e5       	ldi	r26, 0x53	; 83
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e3 e5       	ldi	r30, 0x53	; 83
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7e       	andi	r24, 0xEF	; 239
    1a92:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1a94:	a3 e5       	ldi	r26, 0x53	; 83
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e3 e5       	ldi	r30, 0x53	; 83
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,OCIE0);
    1aa2:	a9 e5       	ldi	r26, 0x59	; 89
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e9 e5       	ldi	r30, 0x59	; 89
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 60       	ori	r24, 0x02	; 2
    1aae:	8c 93       	st	X, r24
		OCR0=Config_Ptr->compare_value;//compare value
    1ab0:	ac e5       	ldi	r26, 0x5C	; 92
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	8c 93       	st	X, r24
    1abe:	21 c0       	rjmp	.+66     	; 0x1b02 <TIMER0_init+0x184>
	}
	else if((Config_Ptr->mode) == TIMER0_FAST_PWM_MODE)
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	84 81       	ldd	r24, Z+4	; 0x04
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	e1 f4       	brne	.+56     	; 0x1b02 <TIMER0_init+0x184>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);
    1aca:	a3 e5       	ldi	r26, 0x53	; 83
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e3 e5       	ldi	r30, 0x53	; 83
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 64       	ori	r24, 0x40	; 64
    1ad6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);//enable FAST PWM MODE
    1ad8:	a3 e5       	ldi	r26, 0x53	; 83
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e3 e5       	ldi	r30, 0x53	; 83
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24

		//disconnect oc0 and meke FAST PWM NORMAL MODE
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1ae6:	a3 e5       	ldi	r26, 0x53	; 83
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e3 e5       	ldi	r30, 0x53	; 83
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7e       	andi	r24, 0xEF	; 239
    1af2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1af4:	a3 e5       	ldi	r26, 0x53	; 83
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e3 e5       	ldi	r30, 0x53	; 83
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8f 7d       	andi	r24, 0xDF	; 223
    1b00:	8c 93       	st	X, r24
	}

}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <TIMER0_deInit>:

void TIMER0_deInit(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	10 82       	st	Z, r1
	TCNT0 = 0;
    1b1a:	e2 e5       	ldi	r30, 0x52	; 82
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);
    1b20:	a9 e5       	ldi	r26, 0x59	; 89
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e9 e5       	ldi	r30, 0x59	; 89
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	8e 7f       	andi	r24, 0xFE	; 254
    1b2c:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);
    1b2e:	a8 e5       	ldi	r26, 0x58	; 88
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e8 e5       	ldi	r30, 0x58	; 88
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8e 7f       	andi	r24, 0xFE	; 254
    1b3a:	8c 93       	st	X, r24
	OCR0 = 0;
    1b3c:	ec e5       	ldi	r30, 0x5C	; 92
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1b42:	a9 e5       	ldi	r26, 0x59	; 89
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e9 e5       	ldi	r30, 0x59	; 89
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF0);
    1b50:	a8 e5       	ldi	r26, 0x58	; 88
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e5       	ldi	r30, 0x58	; 88
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8d 7f       	andi	r24, 0xFD	; 253
    1b5c:	8c 93       	st	X, r24
	Timer0_CALLBACK_Fptr = NULL_PTR;
    1b5e:	10 92 75 01 	sts	0x0175, r1
    1b62:	10 92 74 01 	sts	0x0174, r1
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <delay0>:




void delay0(uint32 seconds)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	28 97       	sbiw	r28, 0x08	; 8
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	6d 83       	std	Y+5, r22	; 0x05
    1b82:	7e 83       	std	Y+6, r23	; 0x06
    1b84:	8f 83       	std	Y+7, r24	; 0x07
    1b86:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    1b88:	10 92 98 01 	sts	0x0198, r1
    1b8c:	10 92 99 01 	sts	0x0199, r1
    1b90:	10 92 9a 01 	sts	0x019A, r1
    1b94:	10 92 9b 01 	sts	0x019B, r1
	uint32 tick = seconds;
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	af 81       	ldd	r26, Y+7	; 0x07
    1b9e:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04
	TIMER0_setCallBack(&TIMER0_tick);
    1ba8:	84 ef       	ldi	r24, 0xF4	; 244
    1baa:	9d e0       	ldi	r25, 0x0D	; 13
    1bac:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <TIMER0_setCallBack>
	while(g_tick  < tick);
    1bb0:	20 91 98 01 	lds	r18, 0x0198
    1bb4:	30 91 99 01 	lds	r19, 0x0199
    1bb8:	40 91 9a 01 	lds	r20, 0x019A
    1bbc:	50 91 9b 01 	lds	r21, 0x019B
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1bc8:	28 17       	cp	r18, r24
    1bca:	39 07       	cpc	r19, r25
    1bcc:	4a 07       	cpc	r20, r26
    1bce:	5b 07       	cpc	r21, r27
    1bd0:	78 f3       	brcs	.-34     	; 0x1bb0 <delay0+0x44>
	TIMER0_deInit();
    1bd2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TIMER0_deInit>
}
    1bd6:	28 96       	adiw	r28, 0x08	; 8
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <TIMER0_tick>:

void TIMER0_tick(void)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1bf0:	80 91 98 01 	lds	r24, 0x0198
    1bf4:	90 91 99 01 	lds	r25, 0x0199
    1bf8:	a0 91 9a 01 	lds	r26, 0x019A
    1bfc:	b0 91 9b 01 	lds	r27, 0x019B
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	b1 1d       	adc	r27, r1
    1c06:	80 93 98 01 	sts	0x0198, r24
    1c0a:	90 93 99 01 	sts	0x0199, r25
    1c0e:	a0 93 9a 01 	sts	0x019A, r26
    1c12:	b0 93 9b 01 	sts	0x019B, r27
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <TIMER0_setCallBack>:

void TIMER0_setCallBack(void(*Copy_pvCallBackFunc)(void))
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <TIMER0_setCallBack+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CALLBACK_Fptr=Copy_pvCallBackFunc;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	90 93 75 01 	sts	0x0175, r25
    1c32:	80 93 74 01 	sts	0x0174, r24
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <PWM_TIMER0_Start>:

void PWM_TIMER0_Start(uint8 duty_cycle)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <PWM_TIMER0_Start+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 timer_value=((uint16)(duty_cycle*255)/100);
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	48 2f       	mov	r20, r24
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	ca 01       	movw	r24, r20
    1c54:	9c 01       	movw	r18, r24
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	96 95       	lsr	r25
    1c5e:	98 2f       	mov	r25, r24
    1c60:	88 27       	eor	r24, r24
    1c62:	97 95       	ror	r25
    1c64:	87 95       	ror	r24
    1c66:	82 1b       	sub	r24, r18
    1c68:	93 0b       	sbc	r25, r19
    1c6a:	84 0f       	add	r24, r20
    1c6c:	95 1f       	adc	r25, r21
    1c6e:	24 e6       	ldi	r18, 0x64	; 100
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	b9 01       	movw	r22, r18
    1c74:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <__udivmodhi4>
    1c78:	cb 01       	movw	r24, r22
    1c7a:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR0,TCNT0);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	e2 e5       	ldi	r30, 0x52	; 82
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <PWM_TIMER0_Start+0x5c>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	2a 95       	dec	r18
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <PWM_TIMER0_Start+0x58>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_FOC0);
    1ca6:	a3 e5       	ldi	r26, 0x53	; 83
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e3 e5       	ldi	r30, 0x53	; 83
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 77       	andi	r24, 0x7F	; 127
    1cb2:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    1cb4:	a9 e5       	ldi	r26, 0x59	; 89
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 e5       	ldi	r30, 0x59	; 89
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	81 60       	ori	r24, 0x01	; 1
    1cc0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01); //non inverting mode
    1cc2:	a3 e5       	ldi	r26, 0x53	; 83
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e3 e5       	ldi	r30, 0x53	; 83
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 62       	ori	r24, 0x20	; 32
    1cce:	8c 93       	st	X, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	63 e0       	ldi	r22, 0x03	; 3
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	OCR0=timer_value;
    1cda:	ec e5       	ldi	r30, 0x5C	; 92
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	80 83       	st	Z, r24
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <TIMER1_init>:


void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <TIMER1_init+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = Config_Ptr->prescaler;
    1cfa:	ae e4       	ldi	r26, 0x4E	; 78
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	87 81       	ldd	r24, Z+7	; 0x07
    1d04:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    1d06:	ac e4       	ldi	r26, 0x4C	; 76
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	9c 93       	st	X, r25
    1d16:	8e 93       	st	-X, r24
	CLEAR_BIT(TCCR1A,COM1A0);
    1d18:	af e4       	ldi	r26, 0x4F	; 79
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ef e4       	ldi	r30, 0x4F	; 79
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 7b       	andi	r24, 0xBF	; 191
    1d24:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1B0);
    1d26:	af e4       	ldi	r26, 0x4F	; 79
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ef e4       	ldi	r30, 0x4F	; 79
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 7e       	andi	r24, 0xEF	; 239
    1d32:	8c 93       	st	X, r24

	if ((Config_Ptr->mode)==TIMER1_NORMAL_MODE)
    1d34:	e9 81       	ldd	r30, Y+1	; 0x01
    1d36:	fa 81       	ldd	r31, Y+2	; 0x02
    1d38:	86 81       	ldd	r24, Z+6	; 0x06
    1d3a:	88 23       	and	r24, r24
    1d3c:	21 f5       	brne	.+72     	; 0x1d86 <TIMER1_init+0x9a>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1d3e:	af e4       	ldi	r26, 0x4F	; 79
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	ef e4       	ldi	r30, 0x4F	; 79
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8e 7f       	andi	r24, 0xFE	; 254
    1d4a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1d4c:	af e4       	ldi	r26, 0x4F	; 79
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ef e4       	ldi	r30, 0x4F	; 79
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8d 7f       	andi	r24, 0xFD	; 253
    1d58:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1d5a:	ae e4       	ldi	r26, 0x4E	; 78
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ee e4       	ldi	r30, 0x4E	; 78
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	87 7f       	andi	r24, 0xF7	; 247
    1d66:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    1d68:	ae e4       	ldi	r26, 0x4E	; 78
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ee e4       	ldi	r30, 0x4E	; 78
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8f 7e       	andi	r24, 0xEF	; 239
    1d74:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE1);
    1d76:	a9 e5       	ldi	r26, 0x59	; 89
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e9 e5       	ldi	r30, 0x59	; 89
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	84 60       	ori	r24, 0x04	; 4
    1d82:	8c 93       	st	X, r24
    1d84:	d4 c0       	rjmp	.+424    	; 0x1f2e <TIMER1_init+0x242>
	}
	else if ((Config_Ptr->mode)==TIMER1_COMPARE_OCR1A)
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	86 81       	ldd	r24, Z+6	; 0x06
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	31 f5       	brne	.+76     	; 0x1ddc <TIMER1_init+0xf0>
	{
		TIMSK |= (1<<TIMSK_OCIE1);
    1d90:	a9 e5       	ldi	r26, 0x59	; 89
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e9 e5       	ldi	r30, 0x59	; 89
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE1A);
    1d9e:	a9 e5       	ldi	r26, 0x59	; 89
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e9 e5       	ldi	r30, 0x59	; 89
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 61       	ori	r24, 0x10	; 16
    1daa:	8c 93       	st	X, r24
		TCCR1A |= (1<<FOC1A);
    1dac:	af e4       	ldi	r26, 0x4F	; 79
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ef e4       	ldi	r30, 0x4F	; 79
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 60       	ori	r24, 0x08	; 8
    1db8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1dba:	ae e4       	ldi	r26, 0x4E	; 78
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ee e4       	ldi	r30, 0x4E	; 78
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 60       	ori	r24, 0x08	; 8
    1dc6:	8c 93       	st	X, r24
		OCR1A=Config_Ptr->compare_value_A;
    1dc8:	aa e4       	ldi	r26, 0x4A	; 74
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dce:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	9c 93       	st	X, r25
    1dd8:	8e 93       	st	-X, r24
    1dda:	a9 c0       	rjmp	.+338    	; 0x1f2e <TIMER1_init+0x242>

	}

	else if  ((Config_Ptr->mode)==TIMER1_PWM_Phase_Correct_ICR1)
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	86 81       	ldd	r24, Z+6	; 0x06
    1de2:	8a 30       	cpi	r24, 0x0A	; 10
    1de4:	e9 f4       	brne	.+58     	; 0x1e20 <TIMER1_init+0x134>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1de6:	af e4       	ldi	r26, 0x4F	; 79
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ef e4       	ldi	r30, 0x4F	; 79
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	8e 7f       	andi	r24, 0xFE	; 254
    1df2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1df4:	af e4       	ldi	r26, 0x4F	; 79
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ef e4       	ldi	r30, 0x4F	; 79
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1e02:	ae e4       	ldi	r26, 0x4E	; 78
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ee e4       	ldi	r30, 0x4E	; 78
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	87 7f       	andi	r24, 0xF7	; 247
    1e0e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e10:	ae e4       	ldi	r26, 0x4E	; 78
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ee e4       	ldi	r30, 0x4E	; 78
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 61       	ori	r24, 0x10	; 16
    1e1c:	8c 93       	st	X, r24
    1e1e:	87 c0       	rjmp	.+270    	; 0x1f2e <TIMER1_init+0x242>
	}
	else if  ((Config_Ptr->mode)==TIMER1_PWM_Phase_Correct_OCR1A)
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	86 81       	ldd	r24, Z+6	; 0x06
    1e26:	8b 30       	cpi	r24, 0x0B	; 11
    1e28:	e9 f4       	brne	.+58     	; 0x1e64 <TIMER1_init+0x178>
	{
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1e2a:	af e4       	ldi	r26, 0x4F	; 79
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ef e4       	ldi	r30, 0x4F	; 79
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1e38:	af e4       	ldi	r26, 0x4F	; 79
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e4       	ldi	r30, 0x4F	; 79
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	82 60       	ori	r24, 0x02	; 2
    1e44:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1e46:	ae e4       	ldi	r26, 0x4E	; 78
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ee e4       	ldi	r30, 0x4E	; 78
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	87 7f       	andi	r24, 0xF7	; 247
    1e52:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e54:	ae e4       	ldi	r26, 0x4E	; 78
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ee e4       	ldi	r30, 0x4E	; 78
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	80 61       	ori	r24, 0x10	; 16
    1e60:	8c 93       	st	X, r24
    1e62:	65 c0       	rjmp	.+202    	; 0x1f2e <TIMER1_init+0x242>
	}
	else if  ((Config_Ptr->mode)==TIMER1_COMPARE_ICR1)
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	86 81       	ldd	r24, Z+6	; 0x06
    1e6a:	8c 30       	cpi	r24, 0x0C	; 12
    1e6c:	e9 f4       	brne	.+58     	; 0x1ea8 <TIMER1_init+0x1bc>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1e6e:	af e4       	ldi	r26, 0x4F	; 79
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	ef e4       	ldi	r30, 0x4F	; 79
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1e7c:	af e4       	ldi	r26, 0x4F	; 79
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ef e4       	ldi	r30, 0x4F	; 79
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1e8a:	ae e4       	ldi	r26, 0x4E	; 78
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ee e4       	ldi	r30, 0x4E	; 78
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 60       	ori	r24, 0x08	; 8
    1e96:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e98:	ae e4       	ldi	r26, 0x4E	; 78
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	ee e4       	ldi	r30, 0x4E	; 78
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 61       	ori	r24, 0x10	; 16
    1ea4:	8c 93       	st	X, r24
    1ea6:	43 c0       	rjmp	.+134    	; 0x1f2e <TIMER1_init+0x242>
	}
	else if  ((Config_Ptr->mode)==TIMER1_FAST_PWM_ICR1)
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	86 81       	ldd	r24, Z+6	; 0x06
    1eae:	8e 30       	cpi	r24, 0x0E	; 14
    1eb0:	e9 f4       	brne	.+58     	; 0x1eec <TIMER1_init+0x200>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1eb2:	af e4       	ldi	r26, 0x4F	; 79
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	ef e4       	ldi	r30, 0x4F	; 79
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8e 7f       	andi	r24, 0xFE	; 254
    1ebe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1ec0:	af e4       	ldi	r26, 0x4F	; 79
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ef e4       	ldi	r30, 0x4F	; 79
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ece:	ae e4       	ldi	r26, 0x4E	; 78
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	ee e4       	ldi	r30, 0x4E	; 78
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 60       	ori	r24, 0x08	; 8
    1eda:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1edc:	ae e4       	ldi	r26, 0x4E	; 78
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ee e4       	ldi	r30, 0x4E	; 78
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 61       	ori	r24, 0x10	; 16
    1ee8:	8c 93       	st	X, r24
    1eea:	21 c0       	rjmp	.+66     	; 0x1f2e <TIMER1_init+0x242>
	}
	else if  ((Config_Ptr->mode)==TIMER1_FAST_PWM_OCR1A)
    1eec:	e9 81       	ldd	r30, Y+1	; 0x01
    1eee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef0:	86 81       	ldd	r24, Z+6	; 0x06
    1ef2:	8f 30       	cpi	r24, 0x0F	; 15
    1ef4:	e1 f4       	brne	.+56     	; 0x1f2e <TIMER1_init+0x242>
	{
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1ef6:	af e4       	ldi	r26, 0x4F	; 79
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	ef e4       	ldi	r30, 0x4F	; 79
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	81 60       	ori	r24, 0x01	; 1
    1f02:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f04:	af e4       	ldi	r26, 0x4F	; 79
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ef e4       	ldi	r30, 0x4F	; 79
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	82 60       	ori	r24, 0x02	; 2
    1f10:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f12:	ae e4       	ldi	r26, 0x4E	; 78
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ee e4       	ldi	r30, 0x4E	; 78
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 60       	ori	r24, 0x08	; 8
    1f1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f20:	ae e4       	ldi	r26, 0x4E	; 78
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ee e4       	ldi	r30, 0x4E	; 78
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 61       	ori	r24, 0x10	; 16
    1f2c:	8c 93       	st	X, r24
	}



#ifdef OCIE1A
	SET_BIT(TIMSK,OCIE1A);
    1f2e:	a9 e5       	ldi	r26, 0x59	; 89
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 e5       	ldi	r30, 0x59	; 89
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	80 61       	ori	r24, 0x10	; 16
    1f3a:	8c 93       	st	X, r24
	OCR1A=Config_Ptr->compare_value_A;
    1f3c:	aa e4       	ldi	r26, 0x4A	; 74
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e9 81       	ldd	r30, Y+1	; 0x01
    1f42:	fa 81       	ldd	r31, Y+2	; 0x02
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24

#endif
#ifdef OCIE1B
	SET_BIT(TIMSK,OCIE1B);
    1f4e:	a9 e5       	ldi	r26, 0x59	; 89
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e9 e5       	ldi	r30, 0x59	; 89
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 60       	ori	r24, 0x08	; 8
    1f5a:	8c 93       	st	X, r24
	OCR1B=Config_Ptr->compare_value_B;
    1f5c:	a8 e4       	ldi	r26, 0x48	; 72
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e9 81       	ldd	r30, Y+1	; 0x01
    1f62:	fa 81       	ldd	r31, Y+2	; 0x02
    1f64:	84 81       	ldd	r24, Z+4	; 0x04
    1f66:	95 81       	ldd	r25, Z+5	; 0x05
    1f68:	11 96       	adiw	r26, 0x01	; 1
    1f6a:	9c 93       	st	X, r25
    1f6c:	8e 93       	st	-X, r24
#endif
#ifdef TICIE1
	SET_BIT(TIMSK,TICIE1);
    1f6e:	a9 e5       	ldi	r26, 0x59	; 89
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e9 e5       	ldi	r30, 0x59	; 89
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 62       	ori	r24, 0x20	; 32
    1f7a:	8c 93       	st	X, r24
#endif
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <TIMER1_deInit>:



void TIMER1_deInit(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1f8e:	ef e4       	ldi	r30, 0x4F	; 79
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	10 82       	st	Z, r1
	TCCR1B = 0;
    1f94:	ee e4       	ldi	r30, 0x4E	; 78
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	10 82       	st	Z, r1
	TCNT1 =  0;
    1f9a:	ec e4       	ldi	r30, 0x4C	; 76
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	11 82       	std	Z+1, r1	; 0x01
    1fa0:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);
    1fa2:	a9 e5       	ldi	r26, 0x59	; 89
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e9 e5       	ldi	r30, 0x59	; 89
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8b 7f       	andi	r24, 0xFB	; 251
    1fae:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV1);
    1fb0:	a8 e5       	ldi	r26, 0x58	; 88
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e8 e5       	ldi	r30, 0x58	; 88
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8b 7f       	andi	r24, 0xFB	; 251
    1fbc:	8c 93       	st	X, r24
	OCR1A = 0;
    1fbe:	ea e4       	ldi	r30, 0x4A	; 74
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	11 82       	std	Z+1, r1	; 0x01
    1fc4:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    1fc6:	a9 e5       	ldi	r26, 0x59	; 89
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e9 e5       	ldi	r30, 0x59	; 89
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 7e       	andi	r24, 0xEF	; 239
    1fd2:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);
    1fd4:	a8 e5       	ldi	r26, 0x58	; 88
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e8 e5       	ldi	r30, 0x58	; 88
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 7e       	andi	r24, 0xEF	; 239
    1fe0:	8c 93       	st	X, r24
	Timer1_CALLBACK_Fptr = NULL_PTR;
    1fe2:	10 92 77 01 	sts	0x0177, r1
    1fe6:	10 92 76 01 	sts	0x0176, r1
}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <delay1>:
/* timer to count second*/

void delay1(uint32 seconds){
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	28 97       	sbiw	r28, 0x08	; 8
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	6d 83       	std	Y+5, r22	; 0x05
    2006:	7e 83       	std	Y+6, r23	; 0x06
    2008:	8f 83       	std	Y+7, r24	; 0x07
    200a:	98 87       	std	Y+8, r25	; 0x08

	g_tick1 = 0;
    200c:	10 92 94 01 	sts	0x0194, r1
    2010:	10 92 95 01 	sts	0x0195, r1
    2014:	10 92 96 01 	sts	0x0196, r1
    2018:	10 92 97 01 	sts	0x0197, r1
	uint32 tick = seconds;
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	af 81       	ldd	r26, Y+7	; 0x07
    2022:	b8 85       	ldd	r27, Y+8	; 0x08
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	ab 83       	std	Y+3, r26	; 0x03
    202a:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_setCallBack(&TIMER1_tick);
    202c:	86 e3       	ldi	r24, 0x36	; 54
    202e:	90 e1       	ldi	r25, 0x10	; 16
    2030:	0e 94 50 10 	call	0x20a0	; 0x20a0 <TIMER1_setCallBack>
	while(g_tick1  < tick);
    2034:	20 91 94 01 	lds	r18, 0x0194
    2038:	30 91 95 01 	lds	r19, 0x0195
    203c:	40 91 96 01 	lds	r20, 0x0196
    2040:	50 91 97 01 	lds	r21, 0x0197
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	ab 81       	ldd	r26, Y+3	; 0x03
    204a:	bc 81       	ldd	r27, Y+4	; 0x04
    204c:	28 17       	cp	r18, r24
    204e:	39 07       	cpc	r19, r25
    2050:	4a 07       	cpc	r20, r26
    2052:	5b 07       	cpc	r21, r27
    2054:	78 f3       	brcs	.-34     	; 0x2034 <delay1+0x44>
	TIMER1_deInit();
    2056:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <TIMER1_deInit>
}
    205a:	28 96       	adiw	r28, 0x08	; 8
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <TIMER1_tick>:
void TIMER1_tick(void){
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
	g_tick1++;
    2074:	80 91 94 01 	lds	r24, 0x0194
    2078:	90 91 95 01 	lds	r25, 0x0195
    207c:	a0 91 96 01 	lds	r26, 0x0196
    2080:	b0 91 97 01 	lds	r27, 0x0197
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	a1 1d       	adc	r26, r1
    2088:	b1 1d       	adc	r27, r1
    208a:	80 93 94 01 	sts	0x0194, r24
    208e:	90 93 95 01 	sts	0x0195, r25
    2092:	a0 93 96 01 	sts	0x0196, r26
    2096:	b0 93 97 01 	sts	0x0197, r27
}
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <TIMER1_setCallBack>:
void TIMER1_setCallBack(void(*a_ptr)(void))
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <TIMER1_setCallBack+0x6>
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
	Timer1_CALLBACK_Fptr = a_ptr;
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	90 93 77 01 	sts	0x0177, r25
    20b6:	80 93 76 01 	sts	0x0176, r24
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <TIMER1_ICU_Enable>:

void TIMER1_ICU_Enable(const Icu_ConfigType * Config_Ptr)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <TIMER1_ICU_Enable+0x6>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	66 e0       	ldi	r22, 0x06	; 6
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    20dc:	ef e4       	ldi	r30, 0x4F	; 79
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8c e0       	ldi	r24, 0x0C	; 12
    20e2:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    20e4:	ae e4       	ldi	r26, 0x4E	; 78
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	ee e4       	ldi	r30, 0x4E	; 78
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	98 2f       	mov	r25, r24
    20f0:	98 7f       	andi	r25, 0xF8	; 248
    20f2:	e9 81       	ldd	r30, Y+1	; 0x01
    20f4:	fa 81       	ldd	r31, Y+2	; 0x02
    20f6:	80 81       	ld	r24, Z
    20f8:	89 2b       	or	r24, r25
    20fa:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    20fc:	ae e4       	ldi	r26, 0x4E	; 78
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ee e4       	ldi	r30, 0x4E	; 78
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	28 2f       	mov	r18, r24
    2108:	2f 7b       	andi	r18, 0xBF	; 191
    210a:	e9 81       	ldd	r30, Y+1	; 0x01
    210c:	fa 81       	ldd	r31, Y+2	; 0x02
    210e:	81 81       	ldd	r24, Z+1	; 0x01
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	00 24       	eor	r0, r0
    2116:	96 95       	lsr	r25
    2118:	87 95       	ror	r24
    211a:	07 94       	ror	r0
    211c:	96 95       	lsr	r25
    211e:	87 95       	ror	r24
    2120:	07 94       	ror	r0
    2122:	98 2f       	mov	r25, r24
    2124:	80 2d       	mov	r24, r0
    2126:	82 2b       	or	r24, r18
    2128:	8c 93       	st	X, r24
	/* Initial Value for the input capture register */
	ICR1 = 0;
    212a:	e6 e4       	ldi	r30, 0x46	; 70
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	11 82       	std	Z+1, r1	; 0x01
    2130:	10 82       	st	Z, r1
	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2132:	ec e4       	ldi	r30, 0x4C	; 76
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	11 82       	std	Z+1, r1	; 0x01
    2138:	10 82       	st	Z, r1

	TIMSK |= (1<<TICIE1);/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
    213a:	a9 e5       	ldi	r26, 0x59	; 89
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e9 e5       	ldi	r30, 0x59	; 89
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	80 62       	ori	r24, 0x20	; 32
    2146:	8c 93       	st	X, r24

}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <TIMER1_ICU_Disable>:

void TIMER1_ICU_Disable(void)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    215a:	a9 e5       	ldi	r26, 0x59	; 89
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e9 e5       	ldi	r30, 0x59	; 89
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8f 7d       	andi	r24, 0xDF	; 223
    2166:	8c 93       	st	X, r24
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <TIMER1_ICU_GetTCNT1>:

uint16 TIMER1_ICU_GetTCNT1(void)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2176:	e6 e4       	ldi	r30, 0x46	; 70
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <TIMER1_ICU_SetTCNT1>:

void TIMER1_ICU_SetTCNT1(uint16 new_tcnt1)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <TIMER1_ICU_SetTCNT1+0x6>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L = new_tcnt1;
    2192:	ec e4       	ldi	r30, 0x4C	; 76
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	80 83       	st	Z, r24
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <Icu_setCallBack>:


void Icu_setCallBack(void(*a_ptr)(void))
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <Icu_setCallBack+0x6>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	90 93 7b 01 	sts	0x017B, r25
    21ba:	80 93 7a 01 	sts	0x017A, r24
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <Icu_setEdgeDetectionType>:

void Icu_setEdgeDetectionType(uint8 a_edgeType)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    21d4:	ae e4       	ldi	r26, 0x4E	; 78
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ee e4       	ldi	r30, 0x4E	; 78
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	28 2f       	mov	r18, r24
    21e0:	2f 7b       	andi	r18, 0xBF	; 191
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	00 24       	eor	r0, r0
    21ea:	96 95       	lsr	r25
    21ec:	87 95       	ror	r24
    21ee:	07 94       	ror	r0
    21f0:	96 95       	lsr	r25
    21f2:	87 95       	ror	r24
    21f4:	07 94       	ror	r0
    21f6:	98 2f       	mov	r25, r24
    21f8:	80 2d       	mov	r24, r0
    21fa:	82 2b       	or	r24, r18
    21fc:	8c 93       	st	X, r24
}
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <Icu_clearTimerValue>:
void Icu_clearTimerValue(void)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    220e:	ec e4       	ldi	r30, 0x4C	; 76
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	11 82       	std	Z+1, r1	; 0x01
    2214:	10 82       	st	Z, r1
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <TIMER2_init>:
	}
}
 */

void TIMER2_init(const Timer2_ConfigType * Config_Ptr)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <TIMER2_init+0x6>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01

	TCCR2 = Config_Ptr->prescaler;
    222a:	a5 e4       	ldi	r26, 0x45	; 69
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	85 81       	ldd	r24, Z+5	; 0x05
    2234:	8c 93       	st	X, r24
	TCNT2 = Config_Ptr->initial_value;
    2236:	a4 e4       	ldi	r26, 0x44	; 68
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE2);
    2244:	a9 e5       	ldi	r26, 0x59	; 89
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e9 e5       	ldi	r30, 0x59	; 89
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 64       	ori	r24, 0x40	; 64
    2250:	8c 93       	st	X, r24
	if ((Config_Ptr->mode) == TIMER2_NORMAL_MODE)
    2252:	e9 81       	ldd	r30, Y+1	; 0x01
    2254:	fa 81       	ldd	r31, Y+2	; 0x02
    2256:	84 81       	ldd	r24, Z+4	; 0x04
    2258:	88 23       	and	r24, r24
    225a:	59 f5       	brne	.+86     	; 0x22b2 <TIMER2_init+0x96>
	{
		SET_BIT(TCCR2,TCCR2_FOC02);//disable non-pwm
    225c:	a5 e4       	ldi	r26, 0x45	; 69
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e4       	ldi	r30, 0x45	; 69
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
    226a:	a5 e4       	ldi	r26, 0x45	; 69
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e5 e4       	ldi	r30, 0x45	; 69
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8f 7b       	andi	r24, 0xBF	; 191
    2276:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    2278:	a5 e4       	ldi	r26, 0x45	; 69
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e5 e4       	ldi	r30, 0x45	; 69
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	87 7f       	andi	r24, 0xF7	; 247
    2284:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    2286:	a5 e4       	ldi	r26, 0x45	; 69
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e5 e4       	ldi	r30, 0x45	; 69
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 7e       	andi	r24, 0xEF	; 239
    2292:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2294:	a5 e4       	ldi	r26, 0x45	; 69
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e5 e4       	ldi	r30, 0x45	; 69
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8f 7d       	andi	r24, 0xDF	; 223
    22a0:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,TIMSK_TOIE2);
    22a2:	a9 e5       	ldi	r26, 0x59	; 89
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e9 e5       	ldi	r30, 0x59	; 89
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	8c 93       	st	X, r24
    22b0:	7a c0       	rjmp	.+244    	; 0x23a6 <TIMER2_init+0x18a>
	}
	else if ((Config_Ptr->mode) == TIMER2_PWM_PHASE_COTROL)
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	84 81       	ldd	r24, Z+4	; 0x04
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	e9 f4       	brne	.+58     	; 0x22f6 <TIMER2_init+0xda>
	{

		SET_BIT(TCCR2,TCCR2_WGM20);
    22bc:	a5 e4       	ldi	r26, 0x45	; 69
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e5 e4       	ldi	r30, 0x45	; 69
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	80 64       	ori	r24, 0x40	; 64
    22c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    22ca:	a5 e4       	ldi	r26, 0x45	; 69
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e5 e4       	ldi	r30, 0x45	; 69
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	87 7f       	andi	r24, 0xF7	; 247
    22d6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    22d8:	a5 e4       	ldi	r26, 0x45	; 69
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e5 e4       	ldi	r30, 0x45	; 69
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 7e       	andi	r24, 0xEF	; 239
    22e4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    22e6:	a5 e4       	ldi	r26, 0x45	; 69
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e5 e4       	ldi	r30, 0x45	; 69
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	8f 7d       	andi	r24, 0xDF	; 223
    22f2:	8c 93       	st	X, r24
    22f4:	58 c0       	rjmp	.+176    	; 0x23a6 <TIMER2_init+0x18a>

	}

	else if ((Config_Ptr->mode) == TIMER2_COMPARE_MODE)
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	84 81       	ldd	r24, Z+4	; 0x04
    22fc:	82 30       	cpi	r24, 0x02	; 2
    22fe:	91 f5       	brne	.+100    	; 0x2364 <TIMER2_init+0x148>

	{
		SET_BIT(TCCR2,TCCR2_FOC02);//enable non-pwm
    2300:	a5 e4       	ldi	r26, 0x45	; 69
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e5 e4       	ldi	r30, 0x45	; 69
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 68       	ori	r24, 0x80	; 128
    230c:	8c 93       	st	X, r24
		OCR2=Config_Ptr->compare_value;//compare value
    230e:	a3 e4       	ldi	r26, 0x43	; 67
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e9 81       	ldd	r30, Y+1	; 0x01
    2314:	fa 81       	ldd	r31, Y+2	; 0x02
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
    231c:	a5 e4       	ldi	r26, 0x45	; 69
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e5 e4       	ldi	r30, 0x45	; 69
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8f 7b       	andi	r24, 0xBF	; 191
    2328:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    232a:	a5 e4       	ldi	r26, 0x45	; 69
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e5 e4       	ldi	r30, 0x45	; 69
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 60       	ori	r24, 0x08	; 8
    2336:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    2338:	a5 e4       	ldi	r26, 0x45	; 69
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e5 e4       	ldi	r30, 0x45	; 69
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8f 7e       	andi	r24, 0xEF	; 239
    2344:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2346:	a5 e4       	ldi	r26, 0x45	; 69
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e5 e4       	ldi	r30, 0x45	; 69
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,TIMSK_OCIE2);
    2354:	a9 e5       	ldi	r26, 0x59	; 89
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e9 e5       	ldi	r30, 0x59	; 89
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	80 68       	ori	r24, 0x80	; 128
    2360:	8c 93       	st	X, r24
    2362:	21 c0       	rjmp	.+66     	; 0x23a6 <TIMER2_init+0x18a>
	}
	else if((Config_Ptr->mode) == TIMER2_FAST_PWM_MODE)
    2364:	e9 81       	ldd	r30, Y+1	; 0x01
    2366:	fa 81       	ldd	r31, Y+2	; 0x02
    2368:	84 81       	ldd	r24, Z+4	; 0x04
    236a:	83 30       	cpi	r24, 0x03	; 3
    236c:	e1 f4       	brne	.+56     	; 0x23a6 <TIMER2_init+0x18a>
	{
		SET_BIT(TCCR2,TCCR2_WGM20);
    236e:	a5 e4       	ldi	r26, 0x45	; 69
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e4       	ldi	r30, 0x45	; 69
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	80 64       	ori	r24, 0x40	; 64
    237a:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    237c:	a5 e4       	ldi	r26, 0x45	; 69
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e4       	ldi	r30, 0x45	; 69
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 60       	ori	r24, 0x08	; 8
    2388:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    238a:	a5 e4       	ldi	r26, 0x45	; 69
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e5 e4       	ldi	r30, 0x45	; 69
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8f 7e       	andi	r24, 0xEF	; 239
    2396:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2398:	a5 e4       	ldi	r26, 0x45	; 69
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e4       	ldi	r30, 0x45	; 69
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 7d       	andi	r24, 0xDF	; 223
    23a4:	8c 93       	st	X, r24
	}

}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <TIMER2_deInit>:

void TIMER2_deInit(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    23b8:	e5 e4       	ldi	r30, 0x45	; 69
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	10 82       	st	Z, r1
	TCNT2 = 0;
    23be:	e4 e4       	ldi	r30, 0x44	; 68
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TIMSK_TOIE2);
    23c4:	a9 e5       	ldi	r26, 0x59	; 89
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e9 e5       	ldi	r30, 0x59	; 89
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 7b       	andi	r24, 0xBF	; 191
    23d0:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV2);
    23d2:	a8 e5       	ldi	r26, 0x58	; 88
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e8 e5       	ldi	r30, 0x58	; 88
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8f 7b       	andi	r24, 0xBF	; 191
    23de:	8c 93       	st	X, r24
	OCR2 = 0;
    23e0:	e3 e4       	ldi	r30, 0x43	; 67
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TIMSK_OCIE2);
    23e6:	a9 e5       	ldi	r26, 0x59	; 89
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 e5       	ldi	r30, 0x59	; 89
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8f 77       	andi	r24, 0x7F	; 127
    23f2:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF2);
    23f4:	a8 e5       	ldi	r26, 0x58	; 88
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e8 e5       	ldi	r30, 0x58	; 88
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 77       	andi	r24, 0x7F	; 127
    2400:	8c 93       	st	X, r24
	Timer2_CALLBACK_Fptr = NULL_PTR;
    2402:	10 92 79 01 	sts	0x0179, r1
    2406:	10 92 78 01 	sts	0x0178, r1
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <delay2>:

void delay2(uint32 seconds)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	28 97       	sbiw	r28, 0x08	; 8
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	6d 83       	std	Y+5, r22	; 0x05
    2426:	7e 83       	std	Y+6, r23	; 0x06
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    242c:	10 92 98 01 	sts	0x0198, r1
    2430:	10 92 99 01 	sts	0x0199, r1
    2434:	10 92 9a 01 	sts	0x019A, r1
    2438:	10 92 9b 01 	sts	0x019B, r1
	uint32 tick = seconds;
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	af 81       	ldd	r26, Y+7	; 0x07
    2442:	b8 85       	ldd	r27, Y+8	; 0x08
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	ab 83       	std	Y+3, r26	; 0x03
    244a:	bc 83       	std	Y+4, r27	; 0x04
	TIMER2_setCallBack(&TIMER2_tick);
    244c:	86 e4       	ldi	r24, 0x46	; 70
    244e:	92 e1       	ldi	r25, 0x12	; 18
    2450:	0e 94 60 12 	call	0x24c0	; 0x24c0 <TIMER2_setCallBack>
	while(g_tick  < tick);
    2454:	20 91 98 01 	lds	r18, 0x0198
    2458:	30 91 99 01 	lds	r19, 0x0199
    245c:	40 91 9a 01 	lds	r20, 0x019A
    2460:	50 91 9b 01 	lds	r21, 0x019B
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	ab 81       	ldd	r26, Y+3	; 0x03
    246a:	bc 81       	ldd	r27, Y+4	; 0x04
    246c:	28 17       	cp	r18, r24
    246e:	39 07       	cpc	r19, r25
    2470:	4a 07       	cpc	r20, r26
    2472:	5b 07       	cpc	r21, r27
    2474:	78 f3       	brcs	.-34     	; 0x2454 <delay2+0x44>
	TIMER2_deInit();
    2476:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TIMER2_deInit>
}
    247a:	28 96       	adiw	r28, 0x08	; 8
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <TIMER2_tick>:

void TIMER2_tick(void)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2494:	80 91 98 01 	lds	r24, 0x0198
    2498:	90 91 99 01 	lds	r25, 0x0199
    249c:	a0 91 9a 01 	lds	r26, 0x019A
    24a0:	b0 91 9b 01 	lds	r27, 0x019B
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	a1 1d       	adc	r26, r1
    24a8:	b1 1d       	adc	r27, r1
    24aa:	80 93 98 01 	sts	0x0198, r24
    24ae:	90 93 99 01 	sts	0x0199, r25
    24b2:	a0 93 9a 01 	sts	0x019A, r26
    24b6:	b0 93 9b 01 	sts	0x019B, r27
}
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <TIMER2_setCallBack>:

void TIMER2_setCallBack(void(*Copy_pvCallBackFunc)(void))
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <TIMER2_setCallBack+0x6>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	Timer2_CALLBACK_Fptr=Copy_pvCallBackFunc;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	90 93 79 01 	sts	0x0179, r25
    24d6:	80 93 78 01 	sts	0x0178, r24
}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <PWM_TIMER2_Start>:


void PWM_TIMER2_Start(uint8 duty_cycle)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <PWM_TIMER2_Start+0x6>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_value=((uint16)(duty_cycle*255)/100);
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	48 2f       	mov	r20, r24
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	ca 01       	movw	r24, r20
    24f8:	9c 01       	movw	r18, r24
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	c9 01       	movw	r24, r18
    2500:	96 95       	lsr	r25
    2502:	98 2f       	mov	r25, r24
    2504:	88 27       	eor	r24, r24
    2506:	97 95       	ror	r25
    2508:	87 95       	ror	r24
    250a:	82 1b       	sub	r24, r18
    250c:	93 0b       	sbc	r25, r19
    250e:	84 0f       	add	r24, r20
    2510:	95 1f       	adc	r25, r21
    2512:	24 e6       	ldi	r18, 0x64	; 100
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	b9 01       	movw	r22, r18
    2518:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <__udivmodhi4>
    251c:	cb 01       	movw	r24, r22
    251e:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR2,TCNT2);
    2520:	a5 e4       	ldi	r26, 0x45	; 69
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e5 e4       	ldi	r30, 0x45	; 69
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	48 2f       	mov	r20, r24
    252c:	e4 e4       	ldi	r30, 0x44	; 68
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <PWM_TIMER2_Start+0x5c>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	2a 95       	dec	r18
    2542:	e2 f7       	brpl	.-8      	; 0x253c <PWM_TIMER2_Start+0x58>
    2544:	80 95       	com	r24
    2546:	84 23       	and	r24, r20
    2548:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_FOC02);
    254a:	a5 e4       	ldi	r26, 0x45	; 69
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e5 e4       	ldi	r30, 0x45	; 69
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 77       	andi	r24, 0x7F	; 127
    2556:	8c 93       	st	X, r24
	TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    2558:	a5 e4       	ldi	r26, 0x45	; 69
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e5 e4       	ldi	r30, 0x45	; 69
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8c 66       	ori	r24, 0x6C	; 108
    2564:	8c 93       	st	X, r24
	GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	67 e0       	ldi	r22, 0x07	; 7
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	OCR2=timer_value;
    2570:	e3 e4       	ldi	r30, 0x43	; 67
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	80 83       	st	Z, r24
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <TWI_init>:

#include <avr/io.h>
#include "../LIB/common_macros.h"

void TWI_init(uint8 Copy_uint8MasterAddress)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    258e:	e0 e2       	ldi	r30, 0x20	; 32
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	80 83       	st	Z, r24
	TWSR = 0x00;
    2596:	e1 e2       	ldi	r30, 0x21	; 33
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	if(Copy_uint8MasterAddress!=0)
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 23       	and	r24, r24
    25a0:	29 f0       	breq	.+10     	; 0x25ac <TWI_init+0x2a>
	{
		TWAR=Copy_uint8MasterAddress<<1;
    25a2:	e2 e2       	ldi	r30, 0x22	; 34
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	88 0f       	add	r24, r24
    25aa:	80 83       	st	Z, r24
	} // my address = 0x01 :)

	TWCR = (1<<TWEN); /* enable TWI */
    25ac:	e6 e5       	ldi	r30, 0x56	; 86
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,6);
    25b4:	a6 e5       	ldi	r26, 0x56	; 86
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e6 e5       	ldi	r30, 0x56	; 86
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 64       	ori	r24, 0x40	; 64
    25c0:	8c 93       	st	X, r24
}
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(uint8 Copy_uint8SlaveAddress)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
	/*Initialization the node address*/
	TWAR=Copy_uint8SlaveAddress<<1;
    25d6:	e2 e2       	ldi	r30, 0x22	; 34
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	88 0f       	add	r24, r24
    25de:	80 83       	st	Z, r24
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    25e0:	a6 e5       	ldi	r26, 0x56	; 86
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e6 e5       	ldi	r30, 0x56	; 86
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	84 60       	ori	r24, 0x04	; 4
    25ec:	8c 93       	st	X, r24
}
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <TWI_start>:
void TWI_start(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	84 ea       	ldi	r24, 0xA4	; 164
    2604:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2606:	e6 e5       	ldi	r30, 0x56	; 86
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 23       	and	r24, r24
    260e:	dc f7       	brge	.-10     	; 0x2606 <TWI_start+0x10>
}
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <TWI_stop>:

void TWI_stop(void)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    261e:	e6 e5       	ldi	r30, 0x56	; 86
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	84 e9       	ldi	r24, 0x94	; 148
    2624:	80 83       	st	Z, r24
}
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <I2C_SendSlaveAddressWithWrite>:

I2C_ErrorState I2C_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAddress)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <I2C_SendSlaveAddressWithWrite+0x6>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    2638:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    263a:	a6 e5       	ldi	r26, 0x56	; 86
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e6 e5       	ldi	r30, 0x56	; 86
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8f 7d       	andi	r24, 0xDF	; 223
    2646:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    2648:	e3 e2       	ldi	r30, 0x23	; 35
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	88 0f       	add	r24, r24
    2650:	80 83       	st	Z, r24
	/*write request*/
	CLEAR_BIT(TWDR,0);
    2652:	a3 e2       	ldi	r26, 0x23	; 35
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e3 e2       	ldi	r30, 0x23	; 35
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8e 7f       	andi	r24, 0xFE	; 254
    265e:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    2660:	a6 e5       	ldi	r26, 0x56	; 86
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e6 e5       	ldi	r30, 0x56	; 86
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	80 68       	ori	r24, 0x80	; 128
    266c:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	dc f7       	brge	.-10     	; 0x266e <I2C_SendSlaveAddressWithWrite+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_WR_ACK)
    2678:	e1 e2       	ldi	r30, 0x21	; 33
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	88 7f       	andi	r24, 0xF8	; 248
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	88 31       	cpi	r24, 0x18	; 24
    2688:	91 05       	cpc	r25, r1
    268a:	11 f0       	breq	.+4      	; 0x2690 <I2C_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus=SlaveAddressWithWriteErr;
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    2690:	89 81       	ldd	r24, Y+1	; 0x01
}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <I2C_SendSlaveAddressWithRead>:
I2C_ErrorState I2C_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAddress)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <I2C_SendSlaveAddressWithRead+0x6>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    26a8:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    26aa:	a6 e5       	ldi	r26, 0x56	; 86
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e6 e5       	ldi	r30, 0x56	; 86
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 7d       	andi	r24, 0xDF	; 223
    26b6:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    26b8:	e3 e2       	ldi	r30, 0x23	; 35
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	88 0f       	add	r24, r24
    26c0:	80 83       	st	Z, r24
	/*read request*/
	SET_BIT(TWDR,0);
    26c2:	a3 e2       	ldi	r26, 0x23	; 35
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e3 e2       	ldi	r30, 0x23	; 35
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	81 60       	ori	r24, 0x01	; 1
    26ce:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    26d0:	a6 e5       	ldi	r26, 0x56	; 86
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 68       	ori	r24, 0x80	; 128
    26dc:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    26de:	e6 e5       	ldi	r30, 0x56	; 86
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	88 1f       	adc	r24, r24
    26e6:	88 27       	eor	r24, r24
    26e8:	88 1f       	adc	r24, r24
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	90 70       	andi	r25, 0x00	; 0
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	a9 f3       	breq	.-22     	; 0x26de <I2C_SendSlaveAddressWithRead+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_RD_ACK )
    26f4:	e1 e2       	ldi	r30, 0x21	; 33
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	88 7f       	andi	r24, 0xF8	; 248
    2700:	90 70       	andi	r25, 0x00	; 0
    2702:	80 34       	cpi	r24, 0x40	; 64
    2704:	91 05       	cpc	r25, r1
    2706:	11 f0       	breq	.+4      	; 0x270c <I2C_SendSlaveAddressWithRead+0x70>
	{
		Local_ErrStatus=SlaveAddressWithReadErr;
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	0f 92       	push	r0
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2724:	e3 e2       	ldi	r30, 0x23	; 35
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    272c:	e6 e5       	ldi	r30, 0x56	; 86
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	84 e8       	ldi	r24, 0x84	; 132
    2732:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2734:	e6 e5       	ldi	r30, 0x56	; 86
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	88 23       	and	r24, r24
    273c:	dc f7       	brge	.-10     	; 0x2734 <TWI_writeByte+0x1c>
}
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    274e:	e6 e5       	ldi	r30, 0x56	; 86
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	84 ec       	ldi	r24, 0xC4	; 196
    2754:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2756:	e6 e5       	ldi	r30, 0x56	; 86
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	dc f7       	brge	.-10     	; 0x2756 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2760:	e3 e2       	ldi	r30, 0x23	; 35
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
}
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2774:	e6 e5       	ldi	r30, 0x56	; 86
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	84 e8       	ldi	r24, 0x84	; 132
    277a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    277c:	e6 e5       	ldi	r30, 0x56	; 86
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	88 23       	and	r24, r24
    2784:	dc f7       	brge	.-10     	; 0x277c <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    2786:	e3 e2       	ldi	r30, 0x23	; 35
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
}
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    279c:	e1 e2       	ldi	r30, 0x21	; 33
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	88 7f       	andi	r24, 0xF8	; 248
    27a4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <UART_init+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <UART_init+0x8>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <UART_init+0xa>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	6b 83       	std	Y+3, r22	; 0x03
    27c0:	7c 83       	std	Y+4, r23	; 0x04
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    //Asynchronous
	uint16 ubrr_value = 0;
    27c6:	1a 82       	std	Y+2, r1	; 0x02
    27c8:	19 82       	std	Y+1, r1	; 0x01
    #ifdef  DOUBLE_SPEED
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    27ca:	eb e2       	ldi	r30, 0x2B	; 43
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    27d2:	ea e2       	ldi	r30, 0x2A	; 42
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	88 e1       	ldi	r24, 0x18	; 24
    27d8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    27da:	e0 e4       	ldi	r30, 0x40	; 64
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	86 e8       	ldi	r24, 0x86	; 134
    27e0:	80 83       	st	Z, r24

	 #ifdef  DOUBLE_SPEED
	/* Calculate the UBRR register value  DOUBLE SOEED MODE*/
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	ad 81       	ldd	r26, Y+5	; 0x05
    27e8:	be 81       	ldd	r27, Y+6	; 0x06
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	aa 1f       	adc	r26, r26
    27f0:	bb 1f       	adc	r27, r27
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	aa 1f       	adc	r26, r26
    27f8:	bb 1f       	adc	r27, r27
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	aa 1f       	adc	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	9c 01       	movw	r18, r24
    2804:	ad 01       	movw	r20, r26
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	92 e1       	ldi	r25, 0x12	; 18
    280a:	aa e7       	ldi	r26, 0x7A	; 122
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 56 2d 	call	0x5aac	; 0x5aac <__udivmodsi4>
    2816:	da 01       	movw	r26, r20
    2818:	c9 01       	movw	r24, r18
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01

#endif


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2820:	e0 e4       	ldi	r30, 0x40	; 64
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	89 2f       	mov	r24, r25
    282a:	99 27       	eor	r25, r25
    282c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    282e:	e9 e2       	ldi	r30, 0x29	; 41
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	80 83       	st	Z, r24
}
    2836:	26 96       	adiw	r28, 0x06	; 6
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2854:	eb e2       	ldi	r30, 0x2B	; 43
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	80 72       	andi	r24, 0x20	; 32
    2860:	90 70       	andi	r25, 0x00	; 0
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	b9 f3       	breq	.-18     	; 0x2854 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2866:	ec e2       	ldi	r30, 0x2C	; 44
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    287e:	eb e2       	ldi	r30, 0x2B	; 43
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 23       	and	r24, r24
    2886:	dc f7       	brge	.-10     	; 0x287e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2888:	ec e2       	ldi	r30, 0x2C	; 44
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <UART_sendString+0x6>
    289a:	0f 92       	push	r0
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28a4:	19 82       	std	Y+1, r1	; 0x01
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	fc 01       	movw	r30, r24
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	80 81       	ld	r24, Z
    28ba:	0e 94 24 14 	call	0x2848	; 0x2848 <UART_sendByte>
		i++;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	8f 5f       	subi	r24, 0xFF	; 255
    28c2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	fc 01       	movw	r30, r24
    28d0:	e2 0f       	add	r30, r18
    28d2:	f3 1f       	adc	r31, r19
    28d4:	80 81       	ld	r24, Z
    28d6:	88 23       	and	r24, r24
    28d8:	39 f7       	brne	.-50     	; 0x28a8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <UART_receiveString+0xa>
    28f0:	0f 92       	push	r0
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9b 83       	std	Y+3, r25	; 0x03
    28f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28fa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	8c 01       	movw	r16, r24
    2908:	02 0f       	add	r16, r18
    290a:	13 1f       	adc	r17, r19
    290c:	0e 94 3b 14 	call	0x2876	; 0x2876 <UART_recieveByte>
    2910:	f8 01       	movw	r30, r16
    2912:	80 83       	st	Z, r24
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	9b 81       	ldd	r25, Y+3	; 0x03
    2926:	8c 01       	movw	r16, r24
    2928:	02 0f       	add	r16, r18
    292a:	13 1f       	adc	r17, r19
    292c:	0e 94 3b 14 	call	0x2876	; 0x2876 <UART_recieveByte>
    2930:	f8 01       	movw	r30, r16
    2932:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	83 32       	cpi	r24, 0x23	; 35
    2948:	31 f7       	brne	.-52     	; 0x2916 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	9b 81       	ldd	r25, Y+3	; 0x03
    2954:	fc 01       	movw	r30, r24
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	10 82       	st	Z, r1
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	08 95       	ret

0000296c <INIT_SevenSegment_Display>:
#include <util/delay.h>
#include "../LIB/common_macros.h"
#include "../MCAL/gpio.h"

void INIT_SevenSegment_Display()
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
#ifdef COMMON_CATHOD

	GPIO_setupPinDirection(COMMON_CATHOD_PORT_ID,COMMON_CATHOD_PIN_ID,PIN_OUTPUT);     // configure pin 6 in PORTC as output pin
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	66 e0       	ldi	r22, 0x06	; 6
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(COMMON_CATHOD_PORT_ID, COMMON_CATHOD_PIN_ID, LOGIC_LOW);// Set pin 6 in PORTC with value 1 to enable the BJT NPN transistor to connect the first 7-segment common to the ground(common cathode)
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	66 e0       	ldi	r22, 0x06	; 6
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, PIN_OUTPUT);
#elif (SevenSegmentMode == 7)
	// configure pins as output from PA1 --> PA7
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, PIN_OUTPUT);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	61 e0       	ldi	r22, 0x01	; 1
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, PIN_OUTPUT);
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	62 e0       	ldi	r22, 0x02	; 2
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, PIN_OUTPUT);
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, PIN_OUTPUT);
    29a6:	82 e0       	ldi	r24, 0x02	; 2
    29a8:	64 e0       	ldi	r22, 0x04	; 4
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, PIN_OUTPUT);
    29b0:	82 e0       	ldi	r24, 0x02	; 2
    29b2:	65 e0       	ldi	r22, 0x05	; 5
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, PIN_OUTPUT);
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	66 e0       	ldi	r22, 0x06	; 6
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, PIN_OUTPUT);
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	67 e0       	ldi	r22, 0x07	; 7
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#endif
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <Display_SevenSegment>:
void Display_SevenSegment(unsigned char value)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <Display_SevenSegment+0x6>
    29da:	0f 92       	push	r0
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
	}


#elif (SevenSegmentMode == 7)
#ifdef COMMON_CATHOD
	switch(value)
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	3b 83       	std	Y+3, r19	; 0x03
    29ea:	2a 83       	std	Y+2, r18	; 0x02
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	9b 81       	ldd	r25, Y+3	; 0x03
    29f0:	84 30       	cpi	r24, 0x04	; 4
    29f2:	91 05       	cpc	r25, r1
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <Display_SevenSegment+0x24>
    29f6:	d7 c0       	rjmp	.+430    	; 0x2ba6 <Display_SevenSegment+0x1d2>
    29f8:	2a 81       	ldd	r18, Y+2	; 0x02
    29fa:	3b 81       	ldd	r19, Y+3	; 0x03
    29fc:	25 30       	cpi	r18, 0x05	; 5
    29fe:	31 05       	cpc	r19, r1
    2a00:	ec f4       	brge	.+58     	; 0x2a3c <Display_SevenSegment+0x68>
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	91 05       	cpc	r25, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <Display_SevenSegment+0x3a>
    2a0c:	60 c0       	rjmp	.+192    	; 0x2ace <Display_SevenSegment+0xfa>
    2a0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a10:	3b 81       	ldd	r19, Y+3	; 0x03
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <Display_SevenSegment+0x4e>
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	99 f1       	breq	.+102    	; 0x2a86 <Display_SevenSegment+0xb2>
    2a20:	99 c1       	rjmp	.+818    	; 0x2d54 <Display_SevenSegment+0x380>
    2a22:	2a 81       	ldd	r18, Y+2	; 0x02
    2a24:	3b 81       	ldd	r19, Y+3	; 0x03
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <Display_SevenSegment+0x5a>
    2a2c:	74 c0       	rjmp	.+232    	; 0x2b16 <Display_SevenSegment+0x142>
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <Display_SevenSegment+0x66>
    2a38:	92 c0       	rjmp	.+292    	; 0x2b5e <Display_SevenSegment+0x18a>
    2a3a:	8c c1       	rjmp	.+792    	; 0x2d54 <Display_SevenSegment+0x380>
    2a3c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a3e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a40:	27 30       	cpi	r18, 0x07	; 7
    2a42:	31 05       	cpc	r19, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <Display_SevenSegment+0x74>
    2a46:	1b c1       	rjmp	.+566    	; 0x2c7e <Display_SevenSegment+0x2aa>
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	91 05       	cpc	r25, r1
    2a50:	6c f4       	brge	.+26     	; 0x2a6c <Display_SevenSegment+0x98>
    2a52:	2a 81       	ldd	r18, Y+2	; 0x02
    2a54:	3b 81       	ldd	r19, Y+3	; 0x03
    2a56:	25 30       	cpi	r18, 0x05	; 5
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <Display_SevenSegment+0x8a>
    2a5c:	c8 c0       	rjmp	.+400    	; 0x2bee <Display_SevenSegment+0x21a>
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	86 30       	cpi	r24, 0x06	; 6
    2a64:	91 05       	cpc	r25, r1
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <Display_SevenSegment+0x96>
    2a68:	e6 c0       	rjmp	.+460    	; 0x2c36 <Display_SevenSegment+0x262>
    2a6a:	74 c1       	rjmp	.+744    	; 0x2d54 <Display_SevenSegment+0x380>
    2a6c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a6e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a70:	28 30       	cpi	r18, 0x08	; 8
    2a72:	31 05       	cpc	r19, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <Display_SevenSegment+0xa4>
    2a76:	27 c1       	rjmp	.+590    	; 0x2cc6 <Display_SevenSegment+0x2f2>
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	89 30       	cpi	r24, 0x09	; 9
    2a7e:	91 05       	cpc	r25, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <Display_SevenSegment+0xb0>
    2a82:	45 c1       	rjmp	.+650    	; 0x2d0e <Display_SevenSegment+0x33a>
    2a84:	67 c1       	rjmp	.+718    	; 0x2d54 <Display_SevenSegment+0x380>
	{
	case 0:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	62 e0       	ldi	r22, 0x02	; 2
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	63 e0       	ldi	r22, 0x03	; 3
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2aa4:	82 e0       	ldi	r24, 0x02	; 2
    2aa6:	64 e0       	ldi	r22, 0x04	; 4
    2aa8:	41 e0       	ldi	r20, 0x01	; 1
    2aaa:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	65 e0       	ldi	r22, 0x05	; 5
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	66 e0       	ldi	r22, 0x06	; 6
    2abc:	41 e0       	ldi	r20, 0x01	; 1
    2abe:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	67 e0       	ldi	r22, 0x07	; 7
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2acc:	43 c1       	rjmp	.+646    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 1:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_LOW);
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	61 e0       	ldi	r22, 0x01	; 1
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	63 e0       	ldi	r22, 0x03	; 3
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2aec:	82 e0       	ldi	r24, 0x02	; 2
    2aee:	64 e0       	ldi	r22, 0x04	; 4
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	65 e0       	ldi	r22, 0x05	; 5
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	66 e0       	ldi	r22, 0x06	; 6
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	67 e0       	ldi	r22, 0x07	; 7
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2b14:	1f c1       	rjmp	.+574    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 2:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	62 e0       	ldi	r22, 0x02	; 2
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_LOW);
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	63 e0       	ldi	r22, 0x03	; 3
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	64 e0       	ldi	r22, 0x04	; 4
    2b38:	41 e0       	ldi	r20, 0x01	; 1
    2b3a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	65 e0       	ldi	r22, 0x05	; 5
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	66 e0       	ldi	r22, 0x06	; 6
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	67 e0       	ldi	r22, 0x07	; 7
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2b5c:	fb c0       	rjmp	.+502    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 3:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	62 e0       	ldi	r22, 0x02	; 2
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    2b6e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	63 e0       	ldi	r22, 0x03	; 3
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	64 e0       	ldi	r22, 0x04	; 4
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	65 e0       	ldi	r22, 0x05	; 5
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	66 e0       	ldi	r22, 0x06	; 6
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	67 e0       	ldi	r22, 0x07	; 7
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2ba4:	d7 c0       	rjmp	.+430    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 4:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_LOW);
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	63 e0       	ldi	r22, 0x03	; 3
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	64 e0       	ldi	r22, 0x04	; 4
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	65 e0       	ldi	r22, 0x05	; 5
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	66 e0       	ldi	r22, 0x06	; 6
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	67 e0       	ldi	r22, 0x07	; 7
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2bec:	b3 c0       	rjmp	.+358    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 5:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2bee:	82 e0       	ldi	r24, 0x02	; 2
    2bf0:	61 e0       	ldi	r22, 0x01	; 1
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_LOW);
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	63 e0       	ldi	r22, 0x03	; 3
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	64 e0       	ldi	r22, 0x04	; 4
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	65 e0       	ldi	r22, 0x05	; 5
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	66 e0       	ldi	r22, 0x06	; 6
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	67 e0       	ldi	r22, 0x07	; 7
    2c2e:	41 e0       	ldi	r20, 0x01	; 1
    2c30:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2c34:	8f c0       	rjmp	.+286    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 6:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_LOW);
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	62 e0       	ldi	r22, 0x02	; 2
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	63 e0       	ldi	r22, 0x03	; 3
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2c54:	82 e0       	ldi	r24, 0x02	; 2
    2c56:	64 e0       	ldi	r22, 0x04	; 4
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	65 e0       	ldi	r22, 0x05	; 5
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	66 e0       	ldi	r22, 0x06	; 6
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2c7c:	6b c0       	rjmp	.+214    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 7:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	63 e0       	ldi	r22, 0x03	; 3
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	64 e0       	ldi	r22, 0x04	; 4
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	65 e0       	ldi	r22, 0x05	; 5
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	66 e0       	ldi	r22, 0x06	; 6
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	67 e0       	ldi	r22, 0x07	; 7
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2cc4:	47 c0       	rjmp	.+142    	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 8:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	62 e0       	ldi	r22, 0x02	; 2
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	63 e0       	ldi	r22, 0x03	; 3
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	64 e0       	ldi	r22, 0x04	; 4
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	65 e0       	ldi	r22, 0x05	; 5
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	66 e0       	ldi	r22, 0x06	; 6
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	67 e0       	ldi	r22, 0x07	; 7
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2d0c:	23 c0       	rjmp	.+70     	; 0x2d54 <Display_SevenSegment+0x380>
		break;
	case 9:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2d0e:	82 e0       	ldi	r24, 0x02	; 2
    2d10:	61 e0       	ldi	r22, 0x01	; 1
    2d12:	41 e0       	ldi	r20, 0x01	; 1
    2d14:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	62 e0       	ldi	r22, 0x02	; 2
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	63 e0       	ldi	r22, 0x03	; 3
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	64 e0       	ldi	r22, 0x04	; 4
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	65 e0       	ldi	r22, 0x05	; 5
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	66 e0       	ldi	r22, 0x06	; 6
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	67 e0       	ldi	r22, 0x07	; 7
    2d4e:	41 e0       	ldi	r20, 0x01	; 1
    2d50:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		}

#endif

#endif
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <EEPROM_writeByte+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <EEPROM_writeByte+0x8>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2d72:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2d76:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2d7a:	88 30       	cpi	r24, 0x08	; 8
    2d7c:	11 f0       	breq	.+4      	; 0x2d82 <EEPROM_writeByte+0x22>
        return ERROR;
    2d7e:	1c 82       	std	Y+4, r1	; 0x04
    2d80:	28 c0       	rjmp	.+80     	; 0x2dd2 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	80 70       	andi	r24, 0x00	; 0
    2d88:	97 70       	andi	r25, 0x07	; 7
    2d8a:	88 0f       	add	r24, r24
    2d8c:	89 2f       	mov	r24, r25
    2d8e:	88 1f       	adc	r24, r24
    2d90:	99 0b       	sbc	r25, r25
    2d92:	91 95       	neg	r25
    2d94:	80 6a       	ori	r24, 0xA0	; 160
    2d96:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2d9a:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2d9e:	88 31       	cpi	r24, 0x18	; 24
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <EEPROM_writeByte+0x46>
        return ERROR;
    2da2:	1c 82       	std	Y+4, r1	; 0x04
    2da4:	16 c0       	rjmp	.+44     	; 0x2dd2 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2dac:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2db0:	88 32       	cpi	r24, 0x28	; 40
    2db2:	11 f0       	breq	.+4      	; 0x2db8 <EEPROM_writeByte+0x58>
        return ERROR;
    2db4:	1c 82       	std	Y+4, r1	; 0x04
    2db6:	0d c0       	rjmp	.+26     	; 0x2dd2 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2dbe:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2dc2:	88 32       	cpi	r24, 0x28	; 40
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <EEPROM_writeByte+0x6a>
        return ERROR;
    2dc6:	1c 82       	std	Y+4, r1	; 0x04
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2dca:	0e 94 0b 13 	call	0x2616	; 0x2616 <TWI_stop>

    return SUCCESS;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	8c 83       	std	Y+4, r24	; 0x04
    2dd2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <EEPROM_readByte+0x6>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <EEPROM_readByte+0x8>
    2dea:	0f 92       	push	r0
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	7c 83       	std	Y+4, r23	; 0x04
    2df6:	6b 83       	std	Y+3, r22	; 0x03
    //*** we did that because the eeprom doesn't have a cpu to take decission****//



	/* Send the Start Bit */
    TWI_start();
    2df8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2dfc:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e00:	88 30       	cpi	r24, 0x08	; 8
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <EEPROM_readByte+0x26>
        return ERROR;
    2e04:	1d 82       	std	Y+5, r1	; 0x05
    2e06:	44 c0       	rjmp	.+136    	; 0x2e90 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	80 70       	andi	r24, 0x00	; 0
    2e0e:	97 70       	andi	r25, 0x07	; 7
    2e10:	88 0f       	add	r24, r24
    2e12:	89 2f       	mov	r24, r25
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 0b       	sbc	r25, r25
    2e18:	91 95       	neg	r25
    2e1a:	80 6a       	ori	r24, 0xA0	; 160
    2e1c:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2e20:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e24:	88 31       	cpi	r24, 0x18	; 24
    2e26:	11 f0       	breq	.+4      	; 0x2e2c <EEPROM_readByte+0x4a>
        return ERROR;
    2e28:	1d 82       	std	Y+5, r1	; 0x05
    2e2a:	32 c0       	rjmp	.+100    	; 0x2e90 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e32:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e36:	88 32       	cpi	r24, 0x28	; 40
    2e38:	11 f0       	breq	.+4      	; 0x2e3e <EEPROM_readByte+0x5c>
        return ERROR;
    2e3a:	1d 82       	std	Y+5, r1	; 0x05
    2e3c:	29 c0       	rjmp	.+82     	; 0x2e90 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2e3e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2e42:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e46:	80 31       	cpi	r24, 0x10	; 16
    2e48:	11 f0       	breq	.+4      	; 0x2e4e <EEPROM_readByte+0x6c>
        return ERROR;
    2e4a:	1d 82       	std	Y+5, r1	; 0x05
    2e4c:	21 c0       	rjmp	.+66     	; 0x2e90 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	80 70       	andi	r24, 0x00	; 0
    2e54:	97 70       	andi	r25, 0x07	; 7
    2e56:	88 0f       	add	r24, r24
    2e58:	89 2f       	mov	r24, r25
    2e5a:	88 1f       	adc	r24, r24
    2e5c:	99 0b       	sbc	r25, r25
    2e5e:	91 95       	neg	r25
    2e60:	81 6a       	ori	r24, 0xA1	; 161
    2e62:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2e66:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e6a:	80 34       	cpi	r24, 0x40	; 64
    2e6c:	11 f0       	breq	.+4      	; 0x2e72 <EEPROM_readByte+0x90>
        return ERROR;
    2e6e:	1d 82       	std	Y+5, r1	; 0x05
    2e70:	0f c0       	rjmp	.+30     	; 0x2e90 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2e72:	0e 94 b6 13 	call	0x276c	; 0x276c <TWI_readByteWithNACK>
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2e7c:	0e 94 c9 13 	call	0x2792	; 0x2792 <TWI_getStatus>
    2e80:	88 35       	cpi	r24, 0x58	; 88
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <EEPROM_readByte+0xa6>
        return ERROR;
    2e84:	1d 82       	std	Y+5, r1	; 0x05
    2e86:	04 c0       	rjmp	.+8      	; 0x2e90 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2e88:	0e 94 0b 13 	call	0x2616	; 0x2616 <TWI_stop>

    return SUCCESS;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	60 97       	sbiw	r28, 0x10	; 16
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	62 e0       	ldi	r22, 0x02	; 2
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	63 e0       	ldi	r22, 0x03	; 3
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_INPUT);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	64 e0       	ldi	r22, 0x04	; 4
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	65 e0       	ldi	r22, 0x05	; 5
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	66 e0       	ldi	r22, 0x06	; 6
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	67 e0       	ldi	r22, 0x07	; 7
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2f06:	1f 86       	std	Y+15, r1	; 0x0f
    2f08:	ab c0       	rjmp	.+342    	; 0x3060 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f0e:	41 e0       	ldi	r20, 0x01	; 1
    2f10:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2f1e:	18 8a       	std	Y+16, r1	; 0x10
    2f20:	22 c0       	rjmp	.+68     	; 0x2f66 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2f22:	88 89       	ldd	r24, Y+16	; 0x10
    2f24:	98 2f       	mov	r25, r24
    2f26:	9c 5f       	subi	r25, 0xFC	; 252
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	69 2f       	mov	r22, r25
    2f2c:	0e 94 09 09 	call	0x1212	; 0x1212 <GPIO_readPin>
    2f30:	88 23       	and	r24, r24
    2f32:	b1 f4       	brne	.+44     	; 0x2f60 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	98 2f       	mov	r25, r24
    2f44:	88 89       	ldd	r24, Y+16	; 0x10
    2f46:	89 0f       	add	r24, r25
    2f48:	8f 5f       	subi	r24, 0xFF	; 255
    2f4a:	0e 94 35 18 	call	0x306a	; 0x306a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(100);
		}
	}	
}
    2f4e:	60 96       	adiw	r28, 0x10	; 16
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2f60:	88 89       	ldd	r24, Y+16	; 0x10
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	88 8b       	std	Y+16, r24	; 0x10
    2f66:	88 89       	ldd	r24, Y+16	; 0x10
    2f68:	84 30       	cpi	r24, 0x04	; 4
    2f6a:	d8 f2       	brcs	.-74     	; 0x2f22 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	a8 ec       	ldi	r26, 0xC8	; 200
    2f7c:	b2 e4       	ldi	r27, 0x42	; 66
    2f7e:	8b 87       	std	Y+11, r24	; 0x0b
    2f80:	9c 87       	std	Y+12, r25	; 0x0c
    2f82:	ad 87       	std	Y+13, r26	; 0x0d
    2f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	4a ef       	ldi	r20, 0xFA	; 250
    2f94:	54 e4       	ldi	r21, 0x44	; 68
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	8f 83       	std	Y+7, r24	; 0x07
    2fa0:	98 87       	std	Y+8, r25	; 0x08
    2fa2:	a9 87       	std	Y+9, r26	; 0x09
    2fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fba:	88 23       	and	r24, r24
    2fbc:	2c f4       	brge	.+10     	; 0x2fc8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9e 83       	std	Y+6, r25	; 0x06
    2fc4:	8d 83       	std	Y+5, r24	; 0x05
    2fc6:	3f c0       	rjmp	.+126    	; 0x3046 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	3f ef       	ldi	r19, 0xFF	; 255
    2fd4:	4f e7       	ldi	r20, 0x7F	; 127
    2fd6:	57 e4       	ldi	r21, 0x47	; 71
    2fd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fdc:	18 16       	cp	r1, r24
    2fde:	4c f5       	brge	.+82     	; 0x3032 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
    3008:	0f c0       	rjmp	.+30     	; 0x3028 <KEYPAD_getPressedKey+0x186>
    300a:	88 ec       	ldi	r24, 0xC8	; 200
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9c 83       	std	Y+4, r25	; 0x04
    3010:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <KEYPAD_getPressedKey+0x174>
    301a:	9c 83       	std	Y+4, r25	; 0x04
    301c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	69 f7       	brne	.-38     	; 0x300a <KEYPAD_getPressedKey+0x168>
    3030:	14 c0       	rjmp	.+40     	; 0x305a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	9e 81       	ldd	r25, Y+6	; 0x06
    304a:	9a 83       	std	Y+2, r25	; 0x02
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <KEYPAD_getPressedKey+0x1b0>
    3056:	9a 83       	std	Y+2, r25	; 0x02
    3058:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    305a:	8f 85       	ldd	r24, Y+15	; 0x0f
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	8f 87       	std	Y+15, r24	; 0x0f
    3060:	8f 85       	ldd	r24, Y+15	; 0x0f
    3062:	84 30       	cpi	r24, 0x04	; 4
    3064:	08 f4       	brcc	.+2      	; 0x3068 <KEYPAD_getPressedKey+0x1c6>
    3066:	51 cf       	rjmp	.-350    	; 0x2f0a <KEYPAD_getPressedKey+0x68>
    3068:	4e cf       	rjmp	.-356    	; 0x2f06 <KEYPAD_getPressedKey+0x64>

0000306a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	00 d0       	rcall	.+0      	; 0x3070 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3070:	00 d0       	rcall	.+0      	; 0x3072 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3078:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	3c 83       	std	Y+4, r19	; 0x04
    3082:	2b 83       	std	Y+3, r18	; 0x03
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	88 30       	cpi	r24, 0x08	; 8
    308a:	91 05       	cpc	r25, r1
    308c:	09 f4       	brne	.+2      	; 0x3090 <KEYPAD_4x4_adjustKeyNumber+0x26>
    308e:	70 c0       	rjmp	.+224    	; 0x3170 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3090:	2b 81       	ldd	r18, Y+3	; 0x03
    3092:	3c 81       	ldd	r19, Y+4	; 0x04
    3094:	29 30       	cpi	r18, 0x09	; 9
    3096:	31 05       	cpc	r19, r1
    3098:	5c f5       	brge	.+86     	; 0x30f0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	84 30       	cpi	r24, 0x04	; 4
    30a0:	91 05       	cpc	r25, r1
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    30a4:	59 c0       	rjmp	.+178    	; 0x3158 <KEYPAD_4x4_adjustKeyNumber+0xee>
    30a6:	2b 81       	ldd	r18, Y+3	; 0x03
    30a8:	3c 81       	ldd	r19, Y+4	; 0x04
    30aa:	25 30       	cpi	r18, 0x05	; 5
    30ac:	31 05       	cpc	r19, r1
    30ae:	9c f4       	brge	.+38     	; 0x30d6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	82 30       	cpi	r24, 0x02	; 2
    30b6:	91 05       	cpc	r25, r1
    30b8:	09 f4       	brne	.+2      	; 0x30bc <KEYPAD_4x4_adjustKeyNumber+0x52>
    30ba:	48 c0       	rjmp	.+144    	; 0x314c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    30bc:	2b 81       	ldd	r18, Y+3	; 0x03
    30be:	3c 81       	ldd	r19, Y+4	; 0x04
    30c0:	23 30       	cpi	r18, 0x03	; 3
    30c2:	31 05       	cpc	r19, r1
    30c4:	0c f0       	brlt	.+2      	; 0x30c8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    30c6:	45 c0       	rjmp	.+138    	; 0x3152 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	91 05       	cpc	r25, r1
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    30d2:	39 c0       	rjmp	.+114    	; 0x3146 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    30d4:	67 c0       	rjmp	.+206    	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    30d6:	2b 81       	ldd	r18, Y+3	; 0x03
    30d8:	3c 81       	ldd	r19, Y+4	; 0x04
    30da:	26 30       	cpi	r18, 0x06	; 6
    30dc:	31 05       	cpc	r19, r1
    30de:	09 f4       	brne	.+2      	; 0x30e2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    30e0:	41 c0       	rjmp	.+130    	; 0x3164 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	87 30       	cpi	r24, 0x07	; 7
    30e8:	91 05       	cpc	r25, r1
    30ea:	0c f0       	brlt	.+2      	; 0x30ee <KEYPAD_4x4_adjustKeyNumber+0x84>
    30ec:	3e c0       	rjmp	.+124    	; 0x316a <KEYPAD_4x4_adjustKeyNumber+0x100>
    30ee:	37 c0       	rjmp	.+110    	; 0x315e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    30f0:	2b 81       	ldd	r18, Y+3	; 0x03
    30f2:	3c 81       	ldd	r19, Y+4	; 0x04
    30f4:	2c 30       	cpi	r18, 0x0C	; 12
    30f6:	31 05       	cpc	r19, r1
    30f8:	09 f4       	brne	.+2      	; 0x30fc <KEYPAD_4x4_adjustKeyNumber+0x92>
    30fa:	46 c0       	rjmp	.+140    	; 0x3188 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	8d 30       	cpi	r24, 0x0D	; 13
    3102:	91 05       	cpc	r25, r1
    3104:	5c f4       	brge	.+22     	; 0x311c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3106:	2b 81       	ldd	r18, Y+3	; 0x03
    3108:	3c 81       	ldd	r19, Y+4	; 0x04
    310a:	2a 30       	cpi	r18, 0x0A	; 10
    310c:	31 05       	cpc	r19, r1
    310e:	b1 f1       	breq	.+108    	; 0x317c <KEYPAD_4x4_adjustKeyNumber+0x112>
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	8b 30       	cpi	r24, 0x0B	; 11
    3116:	91 05       	cpc	r25, r1
    3118:	a4 f5       	brge	.+104    	; 0x3182 <KEYPAD_4x4_adjustKeyNumber+0x118>
    311a:	2d c0       	rjmp	.+90     	; 0x3176 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    311c:	2b 81       	ldd	r18, Y+3	; 0x03
    311e:	3c 81       	ldd	r19, Y+4	; 0x04
    3120:	2e 30       	cpi	r18, 0x0E	; 14
    3122:	31 05       	cpc	r19, r1
    3124:	b9 f1       	breq	.+110    	; 0x3194 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	9c 81       	ldd	r25, Y+4	; 0x04
    312a:	8e 30       	cpi	r24, 0x0E	; 14
    312c:	91 05       	cpc	r25, r1
    312e:	7c f1       	brlt	.+94     	; 0x318e <KEYPAD_4x4_adjustKeyNumber+0x124>
    3130:	2b 81       	ldd	r18, Y+3	; 0x03
    3132:	3c 81       	ldd	r19, Y+4	; 0x04
    3134:	2f 30       	cpi	r18, 0x0F	; 15
    3136:	31 05       	cpc	r19, r1
    3138:	79 f1       	breq	.+94     	; 0x3198 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	80 31       	cpi	r24, 0x10	; 16
    3140:	91 05       	cpc	r25, r1
    3142:	69 f1       	breq	.+90     	; 0x319e <KEYPAD_4x4_adjustKeyNumber+0x134>
    3144:	2f c0       	rjmp	.+94     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3146:	87 e0       	ldi	r24, 0x07	; 7
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	2e c0       	rjmp	.+92     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    314c:	88 e0       	ldi	r24, 0x08	; 8
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	2b c0       	rjmp	.+86     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3152:	89 e0       	ldi	r24, 0x09	; 9
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	28 c0       	rjmp	.+80     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3158:	85 e2       	ldi	r24, 0x25	; 37
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	25 c0       	rjmp	.+74     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    315e:	84 e0       	ldi	r24, 0x04	; 4
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	22 c0       	rjmp	.+68     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3164:	85 e0       	ldi	r24, 0x05	; 5
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	1f c0       	rjmp	.+62     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    316a:	86 e0       	ldi	r24, 0x06	; 6
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	1c c0       	rjmp	.+56     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3170:	8a e2       	ldi	r24, 0x2A	; 42
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	19 c0       	rjmp	.+50     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	16 c0       	rjmp	.+44     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	13 c0       	rjmp	.+38     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3182:	83 e0       	ldi	r24, 0x03	; 3
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	10 c0       	rjmp	.+32     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3188:	8d e2       	ldi	r24, 0x2D	; 45
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	0d c0       	rjmp	.+26     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    318e:	8d e0       	ldi	r24, 0x0D	; 13
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	0a c0       	rjmp	.+20     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3194:	19 82       	std	Y+1, r1	; 0x01
    3196:	08 c0       	rjmp	.+16     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3198:	8d e3       	ldi	r24, 0x3D	; 61
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    319e:	8b e2       	ldi	r24, 0x2B	; 43
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	2e 97       	sbiw	r28, 0x0e	; 14
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	63 e0       	ldi	r22, 0x03	; 3
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 ea       	ldi	r26, 0xA0	; 160
    31e6:	b1 e4       	ldi	r27, 0x41	; 65
    31e8:	8b 87       	std	Y+11, r24	; 0x0b
    31ea:	9c 87       	std	Y+12, r25	; 0x0c
    31ec:	ad 87       	std	Y+13, r26	; 0x0d
    31ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	4a ef       	ldi	r20, 0xFA	; 250
    31fe:	54 e4       	ldi	r21, 0x44	; 68
    3200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	8f 83       	std	Y+7, r24	; 0x07
    320a:	98 87       	std	Y+8, r25	; 0x08
    320c:	a9 87       	std	Y+9, r26	; 0x09
    320e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	2c f4       	brge	.+10     	; 0x3232 <LCD_init+0x7a>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
    3230:	3f c0       	rjmp	.+126    	; 0x32b0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	57 e4       	ldi	r21, 0x47	; 71
    3242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3246:	18 16       	cp	r1, r24
    3248:	4c f5       	brge	.+82     	; 0x329c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324a:	6b 85       	ldd	r22, Y+11	; 0x0b
    324c:	7c 85       	ldd	r23, Y+12	; 0x0c
    324e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3250:	9e 85       	ldd	r25, Y+14	; 0x0e
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e2       	ldi	r20, 0x20	; 32
    3258:	51 e4       	ldi	r21, 0x41	; 65
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	9e 83       	std	Y+6, r25	; 0x06
    3270:	8d 83       	std	Y+5, r24	; 0x05
    3272:	0f c0       	rjmp	.+30     	; 0x3292 <LCD_init+0xda>
    3274:	88 ec       	ldi	r24, 0xC8	; 200
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	9c 83       	std	Y+4, r25	; 0x04
    327a:	8b 83       	std	Y+3, r24	; 0x03
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <LCD_init+0xc8>
    3284:	9c 83       	std	Y+4, r25	; 0x04
    3286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	69 f7       	brne	.-38     	; 0x3274 <LCD_init+0xbc>
    329a:	14 c0       	rjmp	.+40     	; 0x32c4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329c:	6f 81       	ldd	r22, Y+7	; 0x07
    329e:	78 85       	ldd	r23, Y+8	; 0x08
    32a0:	89 85       	ldd	r24, Y+9	; 0x09
    32a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <LCD_init+0x104>
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	64 e0       	ldi	r22, 0x04	; 4
    32c8:	41 e0       	ldi	r20, 0x01	; 1
    32ca:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	65 e0       	ldi	r22, 0x05	; 5
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	66 e0       	ldi	r22, 0x06	; 6
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    32e2:	82 e0       	ldi	r24, 0x02	; 2
    32e4:	67 e0       	ldi	r22, 0x07	; 7
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	//send data by two parts nible by nible
	//init each line in lcd 4 bit
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    32ec:	83 e3       	ldi	r24, 0x33	; 51
    32ee:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    32f2:	82 e3       	ldi	r24, 0x32	; 50
    32f4:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    32f8:	88 e2       	ldi	r24, 0x28	; 40
    32fa:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    32fe:	8c e0       	ldi	r24, 0x0C	; 12
    3300:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
}
    330a:	2e 96       	adiw	r28, 0x0e	; 14
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	c3 56       	subi	r28, 0x63	; 99
    332a:	d0 40       	sbci	r29, 0x00	; 0
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	fe 01       	movw	r30, r28
    3338:	ed 59       	subi	r30, 0x9D	; 157
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	62 e0       	ldi	r22, 0x02	; 2
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3348:	fe 01       	movw	r30, r28
    334a:	e1 5a       	subi	r30, 0xA1	; 161
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	a0 e8       	ldi	r26, 0x80	; 128
    3354:	bf e3       	ldi	r27, 0x3F	; 63
    3356:	80 83       	st	Z, r24
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	a2 83       	std	Z+2, r26	; 0x02
    335c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	8e 01       	movw	r16, r28
    3360:	05 5a       	subi	r16, 0xA5	; 165
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	fe 01       	movw	r30, r28
    3366:	e1 5a       	subi	r30, 0xA1	; 161
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	4a ef       	ldi	r20, 0xFA	; 250
    3378:	54 e4       	ldi	r21, 0x44	; 68
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	f8 01       	movw	r30, r16
    3384:	80 83       	st	Z, r24
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	a2 83       	std	Z+2, r26	; 0x02
    338a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338c:	fe 01       	movw	r30, r28
    338e:	e5 5a       	subi	r30, 0xA5	; 165
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e8       	ldi	r20, 0x80	; 128
    33a0:	5f e3       	ldi	r21, 0x3F	; 63
    33a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a6:	88 23       	and	r24, r24
    33a8:	44 f4       	brge	.+16     	; 0x33ba <LCD_sendCommand+0x9e>
		__ticks = 1;
    33aa:	fe 01       	movw	r30, r28
    33ac:	e7 5a       	subi	r30, 0xA7	; 167
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
    33b8:	64 c0       	rjmp	.+200    	; 0x3482 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    33ba:	fe 01       	movw	r30, r28
    33bc:	e5 5a       	subi	r30, 0xA5	; 165
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	60 81       	ld	r22, Z
    33c2:	71 81       	ldd	r23, Z+1	; 0x01
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	93 81       	ldd	r25, Z+3	; 0x03
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	4f e7       	ldi	r20, 0x7F	; 127
    33ce:	57 e4       	ldi	r21, 0x47	; 71
    33d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d4:	18 16       	cp	r1, r24
    33d6:	0c f0       	brlt	.+2      	; 0x33da <LCD_sendCommand+0xbe>
    33d8:	43 c0       	rjmp	.+134    	; 0x3460 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33da:	fe 01       	movw	r30, r28
    33dc:	e1 5a       	subi	r30, 0xA1	; 161
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	8e 01       	movw	r16, r28
    33fa:	07 5a       	subi	r16, 0xA7	; 167
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	f8 01       	movw	r30, r16
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
    3410:	1f c0       	rjmp	.+62     	; 0x3450 <LCD_sendCommand+0x134>
    3412:	fe 01       	movw	r30, r28
    3414:	e9 5a       	subi	r30, 0xA9	; 169
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	88 ec       	ldi	r24, 0xC8	; 200
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
    3420:	fe 01       	movw	r30, r28
    3422:	e9 5a       	subi	r30, 0xA9	; 169
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <LCD_sendCommand+0x10e>
    342e:	fe 01       	movw	r30, r28
    3430:	e9 5a       	subi	r30, 0xA9	; 169
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3438:	de 01       	movw	r26, r28
    343a:	a7 5a       	subi	r26, 0xA7	; 167
    343c:	bf 4f       	sbci	r27, 0xFF	; 255
    343e:	fe 01       	movw	r30, r28
    3440:	e7 5a       	subi	r30, 0xA7	; 167
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	11 96       	adiw	r26, 0x01	; 1
    344c:	9c 93       	st	X, r25
    344e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3450:	fe 01       	movw	r30, r28
    3452:	e7 5a       	subi	r30, 0xA7	; 167
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	d1 f6       	brne	.-76     	; 0x3412 <LCD_sendCommand+0xf6>
    345e:	27 c0       	rjmp	.+78     	; 0x34ae <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	8e 01       	movw	r16, r28
    3462:	07 5a       	subi	r16, 0xA7	; 167
    3464:	1f 4f       	sbci	r17, 0xFF	; 255
    3466:	fe 01       	movw	r30, r28
    3468:	e5 5a       	subi	r30, 0xA5	; 165
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	f8 01       	movw	r30, r16
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
    3482:	de 01       	movw	r26, r28
    3484:	ab 5a       	subi	r26, 0xAB	; 171
    3486:	bf 4f       	sbci	r27, 0xFF	; 255
    3488:	fe 01       	movw	r30, r28
    348a:	e7 5a       	subi	r30, 0xA7	; 167
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	8d 93       	st	X+, r24
    3494:	9c 93       	st	X, r25
    3496:	fe 01       	movw	r30, r28
    3498:	eb 5a       	subi	r30, 0xAB	; 171
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_sendCommand+0x184>
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 5a       	subi	r30, 0xAB	; 171
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	63 e0       	ldi	r22, 0x03	; 3
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    34b8:	fe 01       	movw	r30, r28
    34ba:	ef 5a       	subi	r30, 0xAF	; 175
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a0 e8       	ldi	r26, 0x80	; 128
    34c4:	bf e3       	ldi	r27, 0x3F	; 63
    34c6:	80 83       	st	Z, r24
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	a2 83       	std	Z+2, r26	; 0x02
    34cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	8e 01       	movw	r16, r28
    34d0:	03 5b       	subi	r16, 0xB3	; 179
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	fe 01       	movw	r30, r28
    34d6:	ef 5a       	subi	r30, 0xAF	; 175
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4a ef       	ldi	r20, 0xFA	; 250
    34e8:	54 e4       	ldi	r21, 0x44	; 68
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	f8 01       	movw	r30, r16
    34f4:	80 83       	st	Z, r24
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	a2 83       	std	Z+2, r26	; 0x02
    34fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34fc:	fe 01       	movw	r30, r28
    34fe:	e3 5b       	subi	r30, 0xB3	; 179
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	82 81       	ldd	r24, Z+2	; 0x02
    3508:	93 81       	ldd	r25, Z+3	; 0x03
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3516:	88 23       	and	r24, r24
    3518:	44 f4       	brge	.+16     	; 0x352a <LCD_sendCommand+0x20e>
		__ticks = 1;
    351a:	fe 01       	movw	r30, r28
    351c:	e5 5b       	subi	r30, 0xB5	; 181
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	80 83       	st	Z, r24
    3528:	64 c0       	rjmp	.+200    	; 0x35f2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    352a:	fe 01       	movw	r30, r28
    352c:	e3 5b       	subi	r30, 0xB3	; 179
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	3f ef       	ldi	r19, 0xFF	; 255
    353c:	4f e7       	ldi	r20, 0x7F	; 127
    353e:	57 e4       	ldi	r21, 0x47	; 71
    3540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3544:	18 16       	cp	r1, r24
    3546:	0c f0       	brlt	.+2      	; 0x354a <LCD_sendCommand+0x22e>
    3548:	43 c0       	rjmp	.+134    	; 0x35d0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	fe 01       	movw	r30, r28
    354c:	ef 5a       	subi	r30, 0xAF	; 175
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8e 01       	movw	r16, r28
    356a:	05 5b       	subi	r16, 0xB5	; 181
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	f8 01       	movw	r30, r16
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    3580:	1f c0       	rjmp	.+62     	; 0x35c0 <LCD_sendCommand+0x2a4>
    3582:	fe 01       	movw	r30, r28
    3584:	e7 5b       	subi	r30, 0xB7	; 183
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	80 83       	st	Z, r24
    3590:	fe 01       	movw	r30, r28
    3592:	e7 5b       	subi	r30, 0xB7	; 183
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <LCD_sendCommand+0x27e>
    359e:	fe 01       	movw	r30, r28
    35a0:	e7 5b       	subi	r30, 0xB7	; 183
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a8:	de 01       	movw	r26, r28
    35aa:	a5 5b       	subi	r26, 0xB5	; 181
    35ac:	bf 4f       	sbci	r27, 0xFF	; 255
    35ae:	fe 01       	movw	r30, r28
    35b0:	e5 5b       	subi	r30, 0xB5	; 181
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 81       	ld	r24, Z
    35b6:	91 81       	ldd	r25, Z+1	; 0x01
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	11 96       	adiw	r26, 0x01	; 1
    35bc:	9c 93       	st	X, r25
    35be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 5b       	subi	r30, 0xB5	; 181
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	d1 f6       	brne	.-76     	; 0x3582 <LCD_sendCommand+0x266>
    35ce:	27 c0       	rjmp	.+78     	; 0x361e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	8e 01       	movw	r16, r28
    35d2:	05 5b       	subi	r16, 0xB5	; 181
    35d4:	1f 4f       	sbci	r17, 0xFF	; 255
    35d6:	fe 01       	movw	r30, r28
    35d8:	e3 5b       	subi	r30, 0xB3	; 179
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	60 81       	ld	r22, Z
    35de:	71 81       	ldd	r23, Z+1	; 0x01
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	93 81       	ldd	r25, Z+3	; 0x03
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    35f2:	de 01       	movw	r26, r28
    35f4:	a9 5b       	subi	r26, 0xB9	; 185
    35f6:	bf 4f       	sbci	r27, 0xFF	; 255
    35f8:	fe 01       	movw	r30, r28
    35fa:	e5 5b       	subi	r30, 0xB5	; 181
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	8d 93       	st	X+, r24
    3604:	9c 93       	st	X, r25
    3606:	fe 01       	movw	r30, r28
    3608:	e9 5b       	subi	r30, 0xB9	; 185
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <LCD_sendCommand+0x2f4>
    3614:	fe 01       	movw	r30, r28
    3616:	e9 5b       	subi	r30, 0xB9	; 185
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    361e:	fe 01       	movw	r30, r28
    3620:	ed 59       	subi	r30, 0x9D	; 157
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	80 71       	andi	r24, 0x10	; 16
    362c:	90 70       	andi	r25, 0x00	; 0
    362e:	95 95       	asr	r25
    3630:	87 95       	ror	r24
    3632:	95 95       	asr	r25
    3634:	87 95       	ror	r24
    3636:	95 95       	asr	r25
    3638:	87 95       	ror	r24
    363a:	95 95       	asr	r25
    363c:	87 95       	ror	r24
    363e:	98 2f       	mov	r25, r24
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	64 e0       	ldi	r22, 0x04	; 4
    3644:	49 2f       	mov	r20, r25
    3646:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    364a:	fe 01       	movw	r30, r28
    364c:	ed 59       	subi	r30, 0x9D	; 157
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	80 81       	ld	r24, Z
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	80 72       	andi	r24, 0x20	; 32
    3658:	90 70       	andi	r25, 0x00	; 0
    365a:	95 95       	asr	r25
    365c:	87 95       	ror	r24
    365e:	95 95       	asr	r25
    3660:	87 95       	ror	r24
    3662:	95 95       	asr	r25
    3664:	87 95       	ror	r24
    3666:	95 95       	asr	r25
    3668:	87 95       	ror	r24
    366a:	95 95       	asr	r25
    366c:	87 95       	ror	r24
    366e:	98 2f       	mov	r25, r24
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	65 e0       	ldi	r22, 0x05	; 5
    3674:	49 2f       	mov	r20, r25
    3676:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    367a:	fe 01       	movw	r30, r28
    367c:	ed 59       	subi	r30, 0x9D	; 157
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	80 74       	andi	r24, 0x40	; 64
    3688:	90 70       	andi	r25, 0x00	; 0
    368a:	08 2e       	mov	r0, r24
    368c:	89 2f       	mov	r24, r25
    368e:	00 0c       	add	r0, r0
    3690:	88 1f       	adc	r24, r24
    3692:	99 0b       	sbc	r25, r25
    3694:	00 0c       	add	r0, r0
    3696:	88 1f       	adc	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	98 2f       	mov	r25, r24
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	66 e0       	ldi	r22, 0x06	; 6
    36a0:	49 2f       	mov	r20, r25
    36a2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    36a6:	fe 01       	movw	r30, r28
    36a8:	ed 59       	subi	r30, 0x9D	; 157
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	80 81       	ld	r24, Z
    36ae:	98 2f       	mov	r25, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	99 27       	eor	r25, r25
    36b4:	99 1f       	adc	r25, r25
    36b6:	82 e0       	ldi	r24, 0x02	; 2
    36b8:	67 e0       	ldi	r22, 0x07	; 7
    36ba:	49 2f       	mov	r20, r25
    36bc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    36c0:	fe 01       	movw	r30, r28
    36c2:	ed 5b       	subi	r30, 0xBD	; 189
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 e8       	ldi	r26, 0x80	; 128
    36cc:	bf e3       	ldi	r27, 0x3F	; 63
    36ce:	80 83       	st	Z, r24
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	a2 83       	std	Z+2, r26	; 0x02
    36d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	8e 01       	movw	r16, r28
    36d8:	01 5c       	subi	r16, 0xC1	; 193
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 5b       	subi	r30, 0xBD	; 189
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	4a ef       	ldi	r20, 0xFA	; 250
    36f0:	54 e4       	ldi	r21, 0x44	; 68
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	80 83       	st	Z, r24
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	a2 83       	std	Z+2, r26	; 0x02
    3702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3704:	fe 01       	movw	r30, r28
    3706:	ff 96       	adiw	r30, 0x3f	; 63
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	2c f4       	brge	.+10     	; 0x372a <LCD_sendCommand+0x40e>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9e af       	std	Y+62, r25	; 0x3e
    3726:	8d af       	std	Y+61, r24	; 0x3d
    3728:	46 c0       	rjmp	.+140    	; 0x37b6 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    372a:	fe 01       	movw	r30, r28
    372c:	ff 96       	adiw	r30, 0x3f	; 63
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	3f ef       	ldi	r19, 0xFF	; 255
    373a:	4f e7       	ldi	r20, 0x7F	; 127
    373c:	57 e4       	ldi	r21, 0x47	; 71
    373e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3742:	18 16       	cp	r1, r24
    3744:	64 f5       	brge	.+88     	; 0x379e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3746:	fe 01       	movw	r30, r28
    3748:	ed 5b       	subi	r30, 0xBD	; 189
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e2       	ldi	r20, 0x20	; 32
    375a:	51 e4       	ldi	r21, 0x41	; 65
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	bc 01       	movw	r22, r24
    3766:	cd 01       	movw	r24, r26
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9e af       	std	Y+62, r25	; 0x3e
    3772:	8d af       	std	Y+61, r24	; 0x3d
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <LCD_sendCommand+0x478>
    3776:	88 ec       	ldi	r24, 0xC8	; 200
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9c af       	std	Y+60, r25	; 0x3c
    377c:	8b af       	std	Y+59, r24	; 0x3b
    377e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3780:	9c ad       	ldd	r25, Y+60	; 0x3c
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <LCD_sendCommand+0x466>
    3786:	9c af       	std	Y+60, r25	; 0x3c
    3788:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378a:	8d ad       	ldd	r24, Y+61	; 0x3d
    378c:	9e ad       	ldd	r25, Y+62	; 0x3e
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	9e af       	std	Y+62, r25	; 0x3e
    3792:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3794:	8d ad       	ldd	r24, Y+61	; 0x3d
    3796:	9e ad       	ldd	r25, Y+62	; 0x3e
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	69 f7       	brne	.-38     	; 0x3776 <LCD_sendCommand+0x45a>
    379c:	16 c0       	rjmp	.+44     	; 0x37ca <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379e:	fe 01       	movw	r30, r28
    37a0:	ff 96       	adiw	r30, 0x3f	; 63
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9e af       	std	Y+62, r25	; 0x3e
    37b4:	8d af       	std	Y+61, r24	; 0x3d
    37b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ba:	9a af       	std	Y+58, r25	; 0x3a
    37bc:	89 af       	std	Y+57, r24	; 0x39
    37be:	89 ad       	ldd	r24, Y+57	; 0x39
    37c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <LCD_sendCommand+0x4a6>
    37c6:	9a af       	std	Y+58, r25	; 0x3a
    37c8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	63 e0       	ldi	r22, 0x03	; 3
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 e8       	ldi	r26, 0x80	; 128
    37da:	bf e3       	ldi	r27, 0x3F	; 63
    37dc:	8d ab       	std	Y+53, r24	; 0x35
    37de:	9e ab       	std	Y+54, r25	; 0x36
    37e0:	af ab       	std	Y+55, r26	; 0x37
    37e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e4:	6d a9       	ldd	r22, Y+53	; 0x35
    37e6:	7e a9       	ldd	r23, Y+54	; 0x36
    37e8:	8f a9       	ldd	r24, Y+55	; 0x37
    37ea:	98 ad       	ldd	r25, Y+56	; 0x38
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	4a ef       	ldi	r20, 0xFA	; 250
    37f2:	54 e4       	ldi	r21, 0x44	; 68
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	89 ab       	std	Y+49, r24	; 0x31
    37fe:	9a ab       	std	Y+50, r25	; 0x32
    3800:	ab ab       	std	Y+51, r26	; 0x33
    3802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3804:	69 a9       	ldd	r22, Y+49	; 0x31
    3806:	7a a9       	ldd	r23, Y+50	; 0x32
    3808:	8b a9       	ldd	r24, Y+51	; 0x33
    380a:	9c a9       	ldd	r25, Y+52	; 0x34
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	40 e8       	ldi	r20, 0x80	; 128
    3812:	5f e3       	ldi	r21, 0x3F	; 63
    3814:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3818:	88 23       	and	r24, r24
    381a:	2c f4       	brge	.+10     	; 0x3826 <LCD_sendCommand+0x50a>
		__ticks = 1;
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	98 ab       	std	Y+48, r25	; 0x30
    3822:	8f a7       	std	Y+47, r24	; 0x2f
    3824:	3f c0       	rjmp	.+126    	; 0x38a4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3826:	69 a9       	ldd	r22, Y+49	; 0x31
    3828:	7a a9       	ldd	r23, Y+50	; 0x32
    382a:	8b a9       	ldd	r24, Y+51	; 0x33
    382c:	9c a9       	ldd	r25, Y+52	; 0x34
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	3f ef       	ldi	r19, 0xFF	; 255
    3832:	4f e7       	ldi	r20, 0x7F	; 127
    3834:	57 e4       	ldi	r21, 0x47	; 71
    3836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    383a:	18 16       	cp	r1, r24
    383c:	4c f5       	brge	.+82     	; 0x3890 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383e:	6d a9       	ldd	r22, Y+53	; 0x35
    3840:	7e a9       	ldd	r23, Y+54	; 0x36
    3842:	8f a9       	ldd	r24, Y+55	; 0x37
    3844:	98 ad       	ldd	r25, Y+56	; 0x38
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e2       	ldi	r20, 0x20	; 32
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	98 ab       	std	Y+48, r25	; 0x30
    3864:	8f a7       	std	Y+47, r24	; 0x2f
    3866:	0f c0       	rjmp	.+30     	; 0x3886 <LCD_sendCommand+0x56a>
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9e a7       	std	Y+46, r25	; 0x2e
    386e:	8d a7       	std	Y+45, r24	; 0x2d
    3870:	8d a5       	ldd	r24, Y+45	; 0x2d
    3872:	9e a5       	ldd	r25, Y+46	; 0x2e
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <LCD_sendCommand+0x558>
    3878:	9e a7       	std	Y+46, r25	; 0x2e
    387a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387c:	8f a5       	ldd	r24, Y+47	; 0x2f
    387e:	98 a9       	ldd	r25, Y+48	; 0x30
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	98 ab       	std	Y+48, r25	; 0x30
    3884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3886:	8f a5       	ldd	r24, Y+47	; 0x2f
    3888:	98 a9       	ldd	r25, Y+48	; 0x30
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	69 f7       	brne	.-38     	; 0x3868 <LCD_sendCommand+0x54c>
    388e:	14 c0       	rjmp	.+40     	; 0x38b8 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3890:	69 a9       	ldd	r22, Y+49	; 0x31
    3892:	7a a9       	ldd	r23, Y+50	; 0x32
    3894:	8b a9       	ldd	r24, Y+51	; 0x33
    3896:	9c a9       	ldd	r25, Y+52	; 0x34
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	98 ab       	std	Y+48, r25	; 0x30
    38a2:	8f a7       	std	Y+47, r24	; 0x2f
    38a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a6:	98 a9       	ldd	r25, Y+48	; 0x30
    38a8:	9c a7       	std	Y+44, r25	; 0x2c
    38aa:	8b a7       	std	Y+43, r24	; 0x2b
    38ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    38ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <LCD_sendCommand+0x594>
    38b4:	9c a7       	std	Y+44, r25	; 0x2c
    38b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    38b8:	82 e0       	ldi	r24, 0x02	; 2
    38ba:	63 e0       	ldi	r22, 0x03	; 3
    38bc:	41 e0       	ldi	r20, 0x01	; 1
    38be:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a0 e8       	ldi	r26, 0x80	; 128
    38c8:	bf e3       	ldi	r27, 0x3F	; 63
    38ca:	8f a3       	std	Y+39, r24	; 0x27
    38cc:	98 a7       	std	Y+40, r25	; 0x28
    38ce:	a9 a7       	std	Y+41, r26	; 0x29
    38d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d2:	6f a1       	ldd	r22, Y+39	; 0x27
    38d4:	78 a5       	ldd	r23, Y+40	; 0x28
    38d6:	89 a5       	ldd	r24, Y+41	; 0x29
    38d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4a ef       	ldi	r20, 0xFA	; 250
    38e0:	54 e4       	ldi	r21, 0x44	; 68
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	8b a3       	std	Y+35, r24	; 0x23
    38ec:	9c a3       	std	Y+36, r25	; 0x24
    38ee:	ad a3       	std	Y+37, r26	; 0x25
    38f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38f2:	6b a1       	ldd	r22, Y+35	; 0x23
    38f4:	7c a1       	ldd	r23, Y+36	; 0x24
    38f6:	8d a1       	ldd	r24, Y+37	; 0x25
    38f8:	9e a1       	ldd	r25, Y+38	; 0x26
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	2c f4       	brge	.+10     	; 0x3914 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
    3912:	3f c0       	rjmp	.+126    	; 0x3992 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3914:	6b a1       	ldd	r22, Y+35	; 0x23
    3916:	7c a1       	ldd	r23, Y+36	; 0x24
    3918:	8d a1       	ldd	r24, Y+37	; 0x25
    391a:	9e a1       	ldd	r25, Y+38	; 0x26
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	4f e7       	ldi	r20, 0x7F	; 127
    3922:	57 e4       	ldi	r21, 0x47	; 71
    3924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3928:	18 16       	cp	r1, r24
    392a:	4c f5       	brge	.+82     	; 0x397e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392c:	6f a1       	ldd	r22, Y+39	; 0x27
    392e:	78 a5       	ldd	r23, Y+40	; 0x28
    3930:	89 a5       	ldd	r24, Y+41	; 0x29
    3932:	9a a5       	ldd	r25, Y+42	; 0x2a
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e2       	ldi	r20, 0x20	; 32
    393a:	51 e4       	ldi	r21, 0x41	; 65
    393c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	bc 01       	movw	r22, r24
    3946:	cd 01       	movw	r24, r26
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9a a3       	std	Y+34, r25	; 0x22
    3952:	89 a3       	std	Y+33, r24	; 0x21
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <LCD_sendCommand+0x658>
    3956:	88 ec       	ldi	r24, 0xC8	; 200
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	98 a3       	std	Y+32, r25	; 0x20
    395c:	8f 8f       	std	Y+31, r24	; 0x1f
    395e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3960:	98 a1       	ldd	r25, Y+32	; 0x20
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <LCD_sendCommand+0x646>
    3966:	98 a3       	std	Y+32, r25	; 0x20
    3968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396a:	89 a1       	ldd	r24, Y+33	; 0x21
    396c:	9a a1       	ldd	r25, Y+34	; 0x22
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	9a a3       	std	Y+34, r25	; 0x22
    3972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3974:	89 a1       	ldd	r24, Y+33	; 0x21
    3976:	9a a1       	ldd	r25, Y+34	; 0x22
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	69 f7       	brne	.-38     	; 0x3956 <LCD_sendCommand+0x63a>
    397c:	14 c0       	rjmp	.+40     	; 0x39a6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397e:	6b a1       	ldd	r22, Y+35	; 0x23
    3980:	7c a1       	ldd	r23, Y+36	; 0x24
    3982:	8d a1       	ldd	r24, Y+37	; 0x25
    3984:	9e a1       	ldd	r25, Y+38	; 0x26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9a a3       	std	Y+34, r25	; 0x22
    3990:	89 a3       	std	Y+33, r24	; 0x21
    3992:	89 a1       	ldd	r24, Y+33	; 0x21
    3994:	9a a1       	ldd	r25, Y+34	; 0x22
    3996:	9e 8f       	std	Y+30, r25	; 0x1e
    3998:	8d 8f       	std	Y+29, r24	; 0x1d
    399a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    399c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <LCD_sendCommand+0x682>
    39a2:	9e 8f       	std	Y+30, r25	; 0x1e
    39a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    39a6:	fe 01       	movw	r30, r28
    39a8:	ed 59       	subi	r30, 0x9D	; 157
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	80 81       	ld	r24, Z
    39ae:	98 2f       	mov	r25, r24
    39b0:	91 70       	andi	r25, 0x01	; 1
    39b2:	82 e0       	ldi	r24, 0x02	; 2
    39b4:	64 e0       	ldi	r22, 0x04	; 4
    39b6:	49 2f       	mov	r20, r25
    39b8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    39bc:	fe 01       	movw	r30, r28
    39be:	ed 59       	subi	r30, 0x9D	; 157
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	80 81       	ld	r24, Z
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	82 70       	andi	r24, 0x02	; 2
    39ca:	90 70       	andi	r25, 0x00	; 0
    39cc:	95 95       	asr	r25
    39ce:	87 95       	ror	r24
    39d0:	98 2f       	mov	r25, r24
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	65 e0       	ldi	r22, 0x05	; 5
    39d6:	49 2f       	mov	r20, r25
    39d8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    39dc:	fe 01       	movw	r30, r28
    39de:	ed 59       	subi	r30, 0x9D	; 157
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	84 70       	andi	r24, 0x04	; 4
    39ea:	90 70       	andi	r25, 0x00	; 0
    39ec:	95 95       	asr	r25
    39ee:	87 95       	ror	r24
    39f0:	95 95       	asr	r25
    39f2:	87 95       	ror	r24
    39f4:	98 2f       	mov	r25, r24
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	66 e0       	ldi	r22, 0x06	; 6
    39fa:	49 2f       	mov	r20, r25
    39fc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3a00:	fe 01       	movw	r30, r28
    3a02:	ed 59       	subi	r30, 0x9D	; 157
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 81       	ld	r24, Z
    3a08:	88 2f       	mov	r24, r24
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	88 70       	andi	r24, 0x08	; 8
    3a0e:	90 70       	andi	r25, 0x00	; 0
    3a10:	95 95       	asr	r25
    3a12:	87 95       	ror	r24
    3a14:	95 95       	asr	r25
    3a16:	87 95       	ror	r24
    3a18:	95 95       	asr	r25
    3a1a:	87 95       	ror	r24
    3a1c:	98 2f       	mov	r25, r24
    3a1e:	82 e0       	ldi	r24, 0x02	; 2
    3a20:	67 e0       	ldi	r22, 0x07	; 7
    3a22:	49 2f       	mov	r20, r25
    3a24:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a0 e8       	ldi	r26, 0x80	; 128
    3a2e:	bf e3       	ldi	r27, 0x3F	; 63
    3a30:	89 8f       	std	Y+25, r24	; 0x19
    3a32:	9a 8f       	std	Y+26, r25	; 0x1a
    3a34:	ab 8f       	std	Y+27, r26	; 0x1b
    3a36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a38:	69 8d       	ldd	r22, Y+25	; 0x19
    3a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4a ef       	ldi	r20, 0xFA	; 250
    3a46:	54 e4       	ldi	r21, 0x44	; 68
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	8d 8b       	std	Y+21, r24	; 0x15
    3a52:	9e 8b       	std	Y+22, r25	; 0x16
    3a54:	af 8b       	std	Y+23, r26	; 0x17
    3a56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a58:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e8       	ldi	r20, 0x80	; 128
    3a66:	5f e3       	ldi	r21, 0x3F	; 63
    3a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6c:	88 23       	and	r24, r24
    3a6e:	2c f4       	brge	.+10     	; 0x3a7a <LCD_sendCommand+0x75e>
		__ticks = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9c 8b       	std	Y+20, r25	; 0x14
    3a76:	8b 8b       	std	Y+19, r24	; 0x13
    3a78:	3f c0       	rjmp	.+126    	; 0x3af8 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a80:	98 8d       	ldd	r25, Y+24	; 0x18
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	3f ef       	ldi	r19, 0xFF	; 255
    3a86:	4f e7       	ldi	r20, 0x7F	; 127
    3a88:	57 e4       	ldi	r21, 0x47	; 71
    3a8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8e:	18 16       	cp	r1, r24
    3a90:	4c f5       	brge	.+82     	; 0x3ae4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	69 8d       	ldd	r22, Y+25	; 0x19
    3a94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e2       	ldi	r20, 0x20	; 32
    3aa0:	51 e4       	ldi	r21, 0x41	; 65
    3aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9c 8b       	std	Y+20, r25	; 0x14
    3ab8:	8b 8b       	std	Y+19, r24	; 0x13
    3aba:	0f c0       	rjmp	.+30     	; 0x3ada <LCD_sendCommand+0x7be>
    3abc:	88 ec       	ldi	r24, 0xC8	; 200
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9a 8b       	std	Y+18, r25	; 0x12
    3ac2:	89 8b       	std	Y+17, r24	; 0x11
    3ac4:	89 89       	ldd	r24, Y+17	; 0x11
    3ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <LCD_sendCommand+0x7ac>
    3acc:	9a 8b       	std	Y+18, r25	; 0x12
    3ace:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	9c 8b       	std	Y+20, r25	; 0x14
    3ad8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	8b 89       	ldd	r24, Y+19	; 0x13
    3adc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	69 f7       	brne	.-38     	; 0x3abc <LCD_sendCommand+0x7a0>
    3ae2:	14 c0       	rjmp	.+40     	; 0x3b0c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	9c 8b       	std	Y+20, r25	; 0x14
    3af6:	8b 8b       	std	Y+19, r24	; 0x13
    3af8:	8b 89       	ldd	r24, Y+19	; 0x13
    3afa:	9c 89       	ldd	r25, Y+20	; 0x14
    3afc:	98 8b       	std	Y+16, r25	; 0x10
    3afe:	8f 87       	std	Y+15, r24	; 0x0f
    3b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b02:	98 89       	ldd	r25, Y+16	; 0x10
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <LCD_sendCommand+0x7e8>
    3b08:	98 8b       	std	Y+16, r25	; 0x10
    3b0a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b0c:	82 e0       	ldi	r24, 0x02	; 2
    3b0e:	63 e0       	ldi	r22, 0x03	; 3
    3b10:	40 e0       	ldi	r20, 0x00	; 0
    3b12:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a0 e8       	ldi	r26, 0x80	; 128
    3b1c:	bf e3       	ldi	r27, 0x3F	; 63
    3b1e:	8b 87       	std	Y+11, r24	; 0x0b
    3b20:	9c 87       	std	Y+12, r25	; 0x0c
    3b22:	ad 87       	std	Y+13, r26	; 0x0d
    3b24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a ef       	ldi	r20, 0xFA	; 250
    3b34:	54 e4       	ldi	r21, 0x44	; 68
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8f 83       	std	Y+7, r24	; 0x07
    3b40:	98 87       	std	Y+8, r25	; 0x08
    3b42:	a9 87       	std	Y+9, r26	; 0x09
    3b44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b46:	6f 81       	ldd	r22, Y+7	; 0x07
    3b48:	78 85       	ldd	r23, Y+8	; 0x08
    3b4a:	89 85       	ldd	r24, Y+9	; 0x09
    3b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <LCD_sendCommand+0x84c>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3b68:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6a:	78 85       	ldd	r23, Y+8	; 0x08
    3b6c:	89 85       	ldd	r24, Y+9	; 0x09
    3b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9e 83       	std	Y+6, r25	; 0x06
    3ba6:	8d 83       	std	Y+5, r24	; 0x05
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <LCD_sendCommand+0x8ac>
    3baa:	88 ec       	ldi	r24, 0xC8	; 200
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	9c 83       	std	Y+4, r25	; 0x04
    3bb0:	8b 83       	std	Y+3, r24	; 0x03
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <LCD_sendCommand+0x89a>
    3bba:	9c 83       	std	Y+4, r25	; 0x04
    3bbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9e 83       	std	Y+6, r25	; 0x06
    3bc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	9e 81       	ldd	r25, Y+6	; 0x06
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <LCD_sendCommand+0x88e>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd4:	78 85       	ldd	r23, Y+8	; 0x08
    3bd6:	89 85       	ldd	r24, Y+9	; 0x09
    3bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9e 83       	std	Y+6, r25	; 0x06
    3be4:	8d 83       	std	Y+5, r24	; 0x05
    3be6:	8d 81       	ldd	r24, Y+5	; 0x05
    3be8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bea:	9a 83       	std	Y+2, r25	; 0x02
    3bec:	89 83       	std	Y+1, r24	; 0x01
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <LCD_sendCommand+0x8d6>
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3bfa:	cd 59       	subi	r28, 0x9D	; 157
    3bfc:	df 4f       	sbci	r29, 0xFF	; 255
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	1f 91       	pop	r17
    3c0e:	0f 91       	pop	r16
    3c10:	08 95       	ret

00003c12 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	df 93       	push	r29
    3c18:	cf 93       	push	r28
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	c3 56       	subi	r28, 0x63	; 99
    3c20:	d0 40       	sbci	r29, 0x00	; 0
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ed 59       	subi	r30, 0x9D	; 157
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	62 e0       	ldi	r22, 0x02	; 2
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e1 5a       	subi	r30, 0xA1	; 161
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a0 e8       	ldi	r26, 0x80	; 128
    3c4a:	bf e3       	ldi	r27, 0x3F	; 63
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c54:	8e 01       	movw	r16, r28
    3c56:	05 5a       	subi	r16, 0xA5	; 165
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e1 5a       	subi	r30, 0xA1	; 161
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	4a ef       	ldi	r20, 0xFA	; 250
    3c6e:	54 e4       	ldi	r21, 0x44	; 68
    3c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	f8 01       	movw	r30, r16
    3c7a:	80 83       	st	Z, r24
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	a2 83       	std	Z+2, r26	; 0x02
    3c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c82:	fe 01       	movw	r30, r28
    3c84:	e5 5a       	subi	r30, 0xA5	; 165
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e8       	ldi	r20, 0x80	; 128
    3c96:	5f e3       	ldi	r21, 0x3F	; 63
    3c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9c:	88 23       	and	r24, r24
    3c9e:	44 f4       	brge	.+16     	; 0x3cb0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 5a       	subi	r30, 0xA7	; 167
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
    3cae:	64 c0       	rjmp	.+200    	; 0x3d78 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e5 5a       	subi	r30, 0xA5	; 165
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	60 81       	ld	r22, Z
    3cb8:	71 81       	ldd	r23, Z+1	; 0x01
    3cba:	82 81       	ldd	r24, Z+2	; 0x02
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	3f ef       	ldi	r19, 0xFF	; 255
    3cc2:	4f e7       	ldi	r20, 0x7F	; 127
    3cc4:	57 e4       	ldi	r21, 0x47	; 71
    3cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cca:	18 16       	cp	r1, r24
    3ccc:	0c f0       	brlt	.+2      	; 0x3cd0 <LCD_displayCharacter+0xbe>
    3cce:	43 c0       	rjmp	.+134    	; 0x3d56 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	e1 5a       	subi	r30, 0xA1	; 161
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e2       	ldi	r20, 0x20	; 32
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	8e 01       	movw	r16, r28
    3cf0:	07 5a       	subi	r16, 0xA7	; 167
    3cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	f8 01       	movw	r30, r16
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
    3d06:	1f c0       	rjmp	.+62     	; 0x3d46 <LCD_displayCharacter+0x134>
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e9 5a       	subi	r30, 0xA9	; 169
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	88 ec       	ldi	r24, 0xC8	; 200
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24
    3d16:	fe 01       	movw	r30, r28
    3d18:	e9 5a       	subi	r30, 0xA9	; 169
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_displayCharacter+0x10e>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e9 5a       	subi	r30, 0xA9	; 169
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2e:	de 01       	movw	r26, r28
    3d30:	a7 5a       	subi	r26, 0xA7	; 167
    3d32:	bf 4f       	sbci	r27, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 5a       	subi	r30, 0xA7	; 167
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	11 96       	adiw	r26, 0x01	; 1
    3d42:	9c 93       	st	X, r25
    3d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d46:	fe 01       	movw	r30, r28
    3d48:	e7 5a       	subi	r30, 0xA7	; 167
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	d1 f6       	brne	.-76     	; 0x3d08 <LCD_displayCharacter+0xf6>
    3d54:	27 c0       	rjmp	.+78     	; 0x3da4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d56:	8e 01       	movw	r16, r28
    3d58:	07 5a       	subi	r16, 0xA7	; 167
    3d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	e5 5a       	subi	r30, 0xA5	; 165
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	60 81       	ld	r22, Z
    3d64:	71 81       	ldd	r23, Z+1	; 0x01
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	f8 01       	movw	r30, r16
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	de 01       	movw	r26, r28
    3d7a:	ab 5a       	subi	r26, 0xAB	; 171
    3d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e7 5a       	subi	r30, 0xA7	; 167
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	8d 93       	st	X+, r24
    3d8a:	9c 93       	st	X, r25
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	eb 5a       	subi	r30, 0xAB	; 171
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 81       	ld	r24, Z
    3d94:	91 81       	ldd	r25, Z+1	; 0x01
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <LCD_displayCharacter+0x184>
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	eb 5a       	subi	r30, 0xAB	; 171
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	63 e0       	ldi	r22, 0x03	; 3
    3da8:	41 e0       	ldi	r20, 0x01	; 1
    3daa:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3dae:	fe 01       	movw	r30, r28
    3db0:	ef 5a       	subi	r30, 0xAF	; 175
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	a0 e8       	ldi	r26, 0x80	; 128
    3dba:	bf e3       	ldi	r27, 0x3F	; 63
    3dbc:	80 83       	st	Z, r24
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	a2 83       	std	Z+2, r26	; 0x02
    3dc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc4:	8e 01       	movw	r16, r28
    3dc6:	03 5b       	subi	r16, 0xB3	; 179
    3dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dca:	fe 01       	movw	r30, r28
    3dcc:	ef 5a       	subi	r30, 0xAF	; 175
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	60 81       	ld	r22, Z
    3dd2:	71 81       	ldd	r23, Z+1	; 0x01
    3dd4:	82 81       	ldd	r24, Z+2	; 0x02
    3dd6:	93 81       	ldd	r25, Z+3	; 0x03
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	4a ef       	ldi	r20, 0xFA	; 250
    3dde:	54 e4       	ldi	r21, 0x44	; 68
    3de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	f8 01       	movw	r30, r16
    3dea:	80 83       	st	Z, r24
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	a2 83       	std	Z+2, r26	; 0x02
    3df0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3df2:	fe 01       	movw	r30, r28
    3df4:	e3 5b       	subi	r30, 0xB3	; 179
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	60 81       	ld	r22, Z
    3dfa:	71 81       	ldd	r23, Z+1	; 0x01
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e8       	ldi	r20, 0x80	; 128
    3e06:	5f e3       	ldi	r21, 0x3F	; 63
    3e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0c:	88 23       	and	r24, r24
    3e0e:	44 f4       	brge	.+16     	; 0x3e20 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3e10:	fe 01       	movw	r30, r28
    3e12:	e5 5b       	subi	r30, 0xB5	; 181
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	80 83       	st	Z, r24
    3e1e:	64 c0       	rjmp	.+200    	; 0x3ee8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3e20:	fe 01       	movw	r30, r28
    3e22:	e3 5b       	subi	r30, 0xB3	; 179
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	60 81       	ld	r22, Z
    3e28:	71 81       	ldd	r23, Z+1	; 0x01
    3e2a:	82 81       	ldd	r24, Z+2	; 0x02
    3e2c:	93 81       	ldd	r25, Z+3	; 0x03
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	3f ef       	ldi	r19, 0xFF	; 255
    3e32:	4f e7       	ldi	r20, 0x7F	; 127
    3e34:	57 e4       	ldi	r21, 0x47	; 71
    3e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e3a:	18 16       	cp	r1, r24
    3e3c:	0c f0       	brlt	.+2      	; 0x3e40 <LCD_displayCharacter+0x22e>
    3e3e:	43 c0       	rjmp	.+134    	; 0x3ec6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e40:	fe 01       	movw	r30, r28
    3e42:	ef 5a       	subi	r30, 0xAF	; 175
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	60 81       	ld	r22, Z
    3e48:	71 81       	ldd	r23, Z+1	; 0x01
    3e4a:	82 81       	ldd	r24, Z+2	; 0x02
    3e4c:	93 81       	ldd	r25, Z+3	; 0x03
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e2       	ldi	r20, 0x20	; 32
    3e54:	51 e4       	ldi	r21, 0x41	; 65
    3e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	8e 01       	movw	r16, r28
    3e60:	05 5b       	subi	r16, 0xB5	; 181
    3e62:	1f 4f       	sbci	r17, 0xFF	; 255
    3e64:	bc 01       	movw	r22, r24
    3e66:	cd 01       	movw	r24, r26
    3e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	f8 01       	movw	r30, r16
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
    3e76:	1f c0       	rjmp	.+62     	; 0x3eb6 <LCD_displayCharacter+0x2a4>
    3e78:	fe 01       	movw	r30, r28
    3e7a:	e7 5b       	subi	r30, 0xB7	; 183
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	88 ec       	ldi	r24, 0xC8	; 200
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	91 83       	std	Z+1, r25	; 0x01
    3e84:	80 83       	st	Z, r24
    3e86:	fe 01       	movw	r30, r28
    3e88:	e7 5b       	subi	r30, 0xB7	; 183
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	80 81       	ld	r24, Z
    3e8e:	91 81       	ldd	r25, Z+1	; 0x01
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <LCD_displayCharacter+0x27e>
    3e94:	fe 01       	movw	r30, r28
    3e96:	e7 5b       	subi	r30, 0xB7	; 183
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	91 83       	std	Z+1, r25	; 0x01
    3e9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e9e:	de 01       	movw	r26, r28
    3ea0:	a5 5b       	subi	r26, 0xB5	; 181
    3ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e5 5b       	subi	r30, 0xB5	; 181
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	80 81       	ld	r24, Z
    3eac:	91 81       	ldd	r25, Z+1	; 0x01
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	11 96       	adiw	r26, 0x01	; 1
    3eb2:	9c 93       	st	X, r25
    3eb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e5 5b       	subi	r30, 0xB5	; 181
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	80 81       	ld	r24, Z
    3ebe:	91 81       	ldd	r25, Z+1	; 0x01
    3ec0:	00 97       	sbiw	r24, 0x00	; 0
    3ec2:	d1 f6       	brne	.-76     	; 0x3e78 <LCD_displayCharacter+0x266>
    3ec4:	27 c0       	rjmp	.+78     	; 0x3f14 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec6:	8e 01       	movw	r16, r28
    3ec8:	05 5b       	subi	r16, 0xB5	; 181
    3eca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e3 5b       	subi	r30, 0xB3	; 179
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	f8 01       	movw	r30, r16
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	80 83       	st	Z, r24
    3ee8:	de 01       	movw	r26, r28
    3eea:	a9 5b       	subi	r26, 0xB9	; 185
    3eec:	bf 4f       	sbci	r27, 0xFF	; 255
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e5 5b       	subi	r30, 0xB5	; 181
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	80 81       	ld	r24, Z
    3ef6:	91 81       	ldd	r25, Z+1	; 0x01
    3ef8:	8d 93       	st	X+, r24
    3efa:	9c 93       	st	X, r25
    3efc:	fe 01       	movw	r30, r28
    3efe:	e9 5b       	subi	r30, 0xB9	; 185
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 81       	ld	r24, Z
    3f04:	91 81       	ldd	r25, Z+1	; 0x01
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <LCD_displayCharacter+0x2f4>
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	e9 5b       	subi	r30, 0xB9	; 185
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3f14:	fe 01       	movw	r30, r28
    3f16:	ed 59       	subi	r30, 0x9D	; 157
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 81       	ld	r24, Z
    3f1c:	88 2f       	mov	r24, r24
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	80 71       	andi	r24, 0x10	; 16
    3f22:	90 70       	andi	r25, 0x00	; 0
    3f24:	95 95       	asr	r25
    3f26:	87 95       	ror	r24
    3f28:	95 95       	asr	r25
    3f2a:	87 95       	ror	r24
    3f2c:	95 95       	asr	r25
    3f2e:	87 95       	ror	r24
    3f30:	95 95       	asr	r25
    3f32:	87 95       	ror	r24
    3f34:	98 2f       	mov	r25, r24
    3f36:	82 e0       	ldi	r24, 0x02	; 2
    3f38:	64 e0       	ldi	r22, 0x04	; 4
    3f3a:	49 2f       	mov	r20, r25
    3f3c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3f40:	fe 01       	movw	r30, r28
    3f42:	ed 59       	subi	r30, 0x9D	; 157
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	88 2f       	mov	r24, r24
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	80 72       	andi	r24, 0x20	; 32
    3f4e:	90 70       	andi	r25, 0x00	; 0
    3f50:	95 95       	asr	r25
    3f52:	87 95       	ror	r24
    3f54:	95 95       	asr	r25
    3f56:	87 95       	ror	r24
    3f58:	95 95       	asr	r25
    3f5a:	87 95       	ror	r24
    3f5c:	95 95       	asr	r25
    3f5e:	87 95       	ror	r24
    3f60:	95 95       	asr	r25
    3f62:	87 95       	ror	r24
    3f64:	98 2f       	mov	r25, r24
    3f66:	82 e0       	ldi	r24, 0x02	; 2
    3f68:	65 e0       	ldi	r22, 0x05	; 5
    3f6a:	49 2f       	mov	r20, r25
    3f6c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3f70:	fe 01       	movw	r30, r28
    3f72:	ed 59       	subi	r30, 0x9D	; 157
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	88 2f       	mov	r24, r24
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	80 74       	andi	r24, 0x40	; 64
    3f7e:	90 70       	andi	r25, 0x00	; 0
    3f80:	08 2e       	mov	r0, r24
    3f82:	89 2f       	mov	r24, r25
    3f84:	00 0c       	add	r0, r0
    3f86:	88 1f       	adc	r24, r24
    3f88:	99 0b       	sbc	r25, r25
    3f8a:	00 0c       	add	r0, r0
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	98 2f       	mov	r25, r24
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	66 e0       	ldi	r22, 0x06	; 6
    3f96:	49 2f       	mov	r20, r25
    3f98:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ed 59       	subi	r30, 0x9D	; 157
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	98 2f       	mov	r25, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	99 27       	eor	r25, r25
    3faa:	99 1f       	adc	r25, r25
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	67 e0       	ldi	r22, 0x07	; 7
    3fb0:	49 2f       	mov	r20, r25
    3fb2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	ed 5b       	subi	r30, 0xBD	; 189
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	a0 e8       	ldi	r26, 0x80	; 128
    3fc2:	bf e3       	ldi	r27, 0x3F	; 63
    3fc4:	80 83       	st	Z, r24
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	a2 83       	std	Z+2, r26	; 0x02
    3fca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fcc:	8e 01       	movw	r16, r28
    3fce:	01 5c       	subi	r16, 0xC1	; 193
    3fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ed 5b       	subi	r30, 0xBD	; 189
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	60 81       	ld	r22, Z
    3fda:	71 81       	ldd	r23, Z+1	; 0x01
    3fdc:	82 81       	ldd	r24, Z+2	; 0x02
    3fde:	93 81       	ldd	r25, Z+3	; 0x03
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	4a ef       	ldi	r20, 0xFA	; 250
    3fe6:	54 e4       	ldi	r21, 0x44	; 68
    3fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	80 83       	st	Z, r24
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	a2 83       	std	Z+2, r26	; 0x02
    3ff8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	ff 96       	adiw	r30, 0x3f	; 63
    3ffe:	60 81       	ld	r22, Z
    4000:	71 81       	ldd	r23, Z+1	; 0x01
    4002:	82 81       	ldd	r24, Z+2	; 0x02
    4004:	93 81       	ldd	r25, Z+3	; 0x03
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 e8       	ldi	r20, 0x80	; 128
    400c:	5f e3       	ldi	r21, 0x3F	; 63
    400e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4012:	88 23       	and	r24, r24
    4014:	2c f4       	brge	.+10     	; 0x4020 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	9e af       	std	Y+62, r25	; 0x3e
    401c:	8d af       	std	Y+61, r24	; 0x3d
    401e:	46 c0       	rjmp	.+140    	; 0x40ac <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    4020:	fe 01       	movw	r30, r28
    4022:	ff 96       	adiw	r30, 0x3f	; 63
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	3f ef       	ldi	r19, 0xFF	; 255
    4030:	4f e7       	ldi	r20, 0x7F	; 127
    4032:	57 e4       	ldi	r21, 0x47	; 71
    4034:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4038:	18 16       	cp	r1, r24
    403a:	64 f5       	brge	.+88     	; 0x4094 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    403c:	fe 01       	movw	r30, r28
    403e:	ed 5b       	subi	r30, 0xBD	; 189
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	60 81       	ld	r22, Z
    4044:	71 81       	ldd	r23, Z+1	; 0x01
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e2       	ldi	r20, 0x20	; 32
    4050:	51 e4       	ldi	r21, 0x41	; 65
    4052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	bc 01       	movw	r22, r24
    405c:	cd 01       	movw	r24, r26
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	9e af       	std	Y+62, r25	; 0x3e
    4068:	8d af       	std	Y+61, r24	; 0x3d
    406a:	0f c0       	rjmp	.+30     	; 0x408a <LCD_displayCharacter+0x478>
    406c:	88 ec       	ldi	r24, 0xC8	; 200
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9c af       	std	Y+60, r25	; 0x3c
    4072:	8b af       	std	Y+59, r24	; 0x3b
    4074:	8b ad       	ldd	r24, Y+59	; 0x3b
    4076:	9c ad       	ldd	r25, Y+60	; 0x3c
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <LCD_displayCharacter+0x466>
    407c:	9c af       	std	Y+60, r25	; 0x3c
    407e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4080:	8d ad       	ldd	r24, Y+61	; 0x3d
    4082:	9e ad       	ldd	r25, Y+62	; 0x3e
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	9e af       	std	Y+62, r25	; 0x3e
    4088:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408a:	8d ad       	ldd	r24, Y+61	; 0x3d
    408c:	9e ad       	ldd	r25, Y+62	; 0x3e
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	69 f7       	brne	.-38     	; 0x406c <LCD_displayCharacter+0x45a>
    4092:	16 c0       	rjmp	.+44     	; 0x40c0 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4094:	fe 01       	movw	r30, r28
    4096:	ff 96       	adiw	r30, 0x3f	; 63
    4098:	60 81       	ld	r22, Z
    409a:	71 81       	ldd	r23, Z+1	; 0x01
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9e af       	std	Y+62, r25	; 0x3e
    40aa:	8d af       	std	Y+61, r24	; 0x3d
    40ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    40ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    40b0:	9a af       	std	Y+58, r25	; 0x3a
    40b2:	89 af       	std	Y+57, r24	; 0x39
    40b4:	89 ad       	ldd	r24, Y+57	; 0x39
    40b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <LCD_displayCharacter+0x4a6>
    40bc:	9a af       	std	Y+58, r25	; 0x3a
    40be:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	63 e0       	ldi	r22, 0x03	; 3
    40c4:	40 e0       	ldi	r20, 0x00	; 0
    40c6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	a0 e8       	ldi	r26, 0x80	; 128
    40d0:	bf e3       	ldi	r27, 0x3F	; 63
    40d2:	8d ab       	std	Y+53, r24	; 0x35
    40d4:	9e ab       	std	Y+54, r25	; 0x36
    40d6:	af ab       	std	Y+55, r26	; 0x37
    40d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40da:	6d a9       	ldd	r22, Y+53	; 0x35
    40dc:	7e a9       	ldd	r23, Y+54	; 0x36
    40de:	8f a9       	ldd	r24, Y+55	; 0x37
    40e0:	98 ad       	ldd	r25, Y+56	; 0x38
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	4a ef       	ldi	r20, 0xFA	; 250
    40e8:	54 e4       	ldi	r21, 0x44	; 68
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	89 ab       	std	Y+49, r24	; 0x31
    40f4:	9a ab       	std	Y+50, r25	; 0x32
    40f6:	ab ab       	std	Y+51, r26	; 0x33
    40f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40fa:	69 a9       	ldd	r22, Y+49	; 0x31
    40fc:	7a a9       	ldd	r23, Y+50	; 0x32
    40fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4100:	9c a9       	ldd	r25, Y+52	; 0x34
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410e:	88 23       	and	r24, r24
    4110:	2c f4       	brge	.+10     	; 0x411c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	98 ab       	std	Y+48, r25	; 0x30
    4118:	8f a7       	std	Y+47, r24	; 0x2f
    411a:	3f c0       	rjmp	.+126    	; 0x419a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    411c:	69 a9       	ldd	r22, Y+49	; 0x31
    411e:	7a a9       	ldd	r23, Y+50	; 0x32
    4120:	8b a9       	ldd	r24, Y+51	; 0x33
    4122:	9c a9       	ldd	r25, Y+52	; 0x34
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	3f ef       	ldi	r19, 0xFF	; 255
    4128:	4f e7       	ldi	r20, 0x7F	; 127
    412a:	57 e4       	ldi	r21, 0x47	; 71
    412c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4130:	18 16       	cp	r1, r24
    4132:	4c f5       	brge	.+82     	; 0x4186 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4134:	6d a9       	ldd	r22, Y+53	; 0x35
    4136:	7e a9       	ldd	r23, Y+54	; 0x36
    4138:	8f a9       	ldd	r24, Y+55	; 0x37
    413a:	98 ad       	ldd	r25, Y+56	; 0x38
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	98 ab       	std	Y+48, r25	; 0x30
    415a:	8f a7       	std	Y+47, r24	; 0x2f
    415c:	0f c0       	rjmp	.+30     	; 0x417c <LCD_displayCharacter+0x56a>
    415e:	88 ec       	ldi	r24, 0xC8	; 200
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9e a7       	std	Y+46, r25	; 0x2e
    4164:	8d a7       	std	Y+45, r24	; 0x2d
    4166:	8d a5       	ldd	r24, Y+45	; 0x2d
    4168:	9e a5       	ldd	r25, Y+46	; 0x2e
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <LCD_displayCharacter+0x558>
    416e:	9e a7       	std	Y+46, r25	; 0x2e
    4170:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4172:	8f a5       	ldd	r24, Y+47	; 0x2f
    4174:	98 a9       	ldd	r25, Y+48	; 0x30
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	98 ab       	std	Y+48, r25	; 0x30
    417a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417c:	8f a5       	ldd	r24, Y+47	; 0x2f
    417e:	98 a9       	ldd	r25, Y+48	; 0x30
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	69 f7       	brne	.-38     	; 0x415e <LCD_displayCharacter+0x54c>
    4184:	14 c0       	rjmp	.+40     	; 0x41ae <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4186:	69 a9       	ldd	r22, Y+49	; 0x31
    4188:	7a a9       	ldd	r23, Y+50	; 0x32
    418a:	8b a9       	ldd	r24, Y+51	; 0x33
    418c:	9c a9       	ldd	r25, Y+52	; 0x34
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	98 ab       	std	Y+48, r25	; 0x30
    4198:	8f a7       	std	Y+47, r24	; 0x2f
    419a:	8f a5       	ldd	r24, Y+47	; 0x2f
    419c:	98 a9       	ldd	r25, Y+48	; 0x30
    419e:	9c a7       	std	Y+44, r25	; 0x2c
    41a0:	8b a7       	std	Y+43, r24	; 0x2b
    41a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    41a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <LCD_displayCharacter+0x594>
    41aa:	9c a7       	std	Y+44, r25	; 0x2c
    41ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	63 e0       	ldi	r22, 0x03	; 3
    41b2:	41 e0       	ldi	r20, 0x01	; 1
    41b4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	a0 e8       	ldi	r26, 0x80	; 128
    41be:	bf e3       	ldi	r27, 0x3F	; 63
    41c0:	8f a3       	std	Y+39, r24	; 0x27
    41c2:	98 a7       	std	Y+40, r25	; 0x28
    41c4:	a9 a7       	std	Y+41, r26	; 0x29
    41c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c8:	6f a1       	ldd	r22, Y+39	; 0x27
    41ca:	78 a5       	ldd	r23, Y+40	; 0x28
    41cc:	89 a5       	ldd	r24, Y+41	; 0x29
    41ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	4a ef       	ldi	r20, 0xFA	; 250
    41d6:	54 e4       	ldi	r21, 0x44	; 68
    41d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	8b a3       	std	Y+35, r24	; 0x23
    41e2:	9c a3       	std	Y+36, r25	; 0x24
    41e4:	ad a3       	std	Y+37, r26	; 0x25
    41e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41e8:	6b a1       	ldd	r22, Y+35	; 0x23
    41ea:	7c a1       	ldd	r23, Y+36	; 0x24
    41ec:	8d a1       	ldd	r24, Y+37	; 0x25
    41ee:	9e a1       	ldd	r25, Y+38	; 0x26
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	40 e8       	ldi	r20, 0x80	; 128
    41f6:	5f e3       	ldi	r21, 0x3F	; 63
    41f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41fc:	88 23       	and	r24, r24
    41fe:	2c f4       	brge	.+10     	; 0x420a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	9a a3       	std	Y+34, r25	; 0x22
    4206:	89 a3       	std	Y+33, r24	; 0x21
    4208:	3f c0       	rjmp	.+126    	; 0x4288 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    420a:	6b a1       	ldd	r22, Y+35	; 0x23
    420c:	7c a1       	ldd	r23, Y+36	; 0x24
    420e:	8d a1       	ldd	r24, Y+37	; 0x25
    4210:	9e a1       	ldd	r25, Y+38	; 0x26
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	3f ef       	ldi	r19, 0xFF	; 255
    4216:	4f e7       	ldi	r20, 0x7F	; 127
    4218:	57 e4       	ldi	r21, 0x47	; 71
    421a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    421e:	18 16       	cp	r1, r24
    4220:	4c f5       	brge	.+82     	; 0x4274 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4222:	6f a1       	ldd	r22, Y+39	; 0x27
    4224:	78 a5       	ldd	r23, Y+40	; 0x28
    4226:	89 a5       	ldd	r24, Y+41	; 0x29
    4228:	9a a5       	ldd	r25, Y+42	; 0x2a
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e2       	ldi	r20, 0x20	; 32
    4230:	51 e4       	ldi	r21, 0x41	; 65
    4232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	bc 01       	movw	r22, r24
    423c:	cd 01       	movw	r24, r26
    423e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	9a a3       	std	Y+34, r25	; 0x22
    4248:	89 a3       	std	Y+33, r24	; 0x21
    424a:	0f c0       	rjmp	.+30     	; 0x426a <LCD_displayCharacter+0x658>
    424c:	88 ec       	ldi	r24, 0xC8	; 200
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	98 a3       	std	Y+32, r25	; 0x20
    4252:	8f 8f       	std	Y+31, r24	; 0x1f
    4254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4256:	98 a1       	ldd	r25, Y+32	; 0x20
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	f1 f7       	brne	.-4      	; 0x4258 <LCD_displayCharacter+0x646>
    425c:	98 a3       	std	Y+32, r25	; 0x20
    425e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4260:	89 a1       	ldd	r24, Y+33	; 0x21
    4262:	9a a1       	ldd	r25, Y+34	; 0x22
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	9a a3       	std	Y+34, r25	; 0x22
    4268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426a:	89 a1       	ldd	r24, Y+33	; 0x21
    426c:	9a a1       	ldd	r25, Y+34	; 0x22
    426e:	00 97       	sbiw	r24, 0x00	; 0
    4270:	69 f7       	brne	.-38     	; 0x424c <LCD_displayCharacter+0x63a>
    4272:	14 c0       	rjmp	.+40     	; 0x429c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4274:	6b a1       	ldd	r22, Y+35	; 0x23
    4276:	7c a1       	ldd	r23, Y+36	; 0x24
    4278:	8d a1       	ldd	r24, Y+37	; 0x25
    427a:	9e a1       	ldd	r25, Y+38	; 0x26
    427c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	9a a3       	std	Y+34, r25	; 0x22
    4286:	89 a3       	std	Y+33, r24	; 0x21
    4288:	89 a1       	ldd	r24, Y+33	; 0x21
    428a:	9a a1       	ldd	r25, Y+34	; 0x22
    428c:	9e 8f       	std	Y+30, r25	; 0x1e
    428e:	8d 8f       	std	Y+29, r24	; 0x1d
    4290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	f1 f7       	brne	.-4      	; 0x4294 <LCD_displayCharacter+0x682>
    4298:	9e 8f       	std	Y+30, r25	; 0x1e
    429a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    429c:	fe 01       	movw	r30, r28
    429e:	ed 59       	subi	r30, 0x9D	; 157
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	80 81       	ld	r24, Z
    42a4:	98 2f       	mov	r25, r24
    42a6:	91 70       	andi	r25, 0x01	; 1
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	64 e0       	ldi	r22, 0x04	; 4
    42ac:	49 2f       	mov	r20, r25
    42ae:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    42b2:	fe 01       	movw	r30, r28
    42b4:	ed 59       	subi	r30, 0x9D	; 157
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	80 81       	ld	r24, Z
    42ba:	88 2f       	mov	r24, r24
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	82 70       	andi	r24, 0x02	; 2
    42c0:	90 70       	andi	r25, 0x00	; 0
    42c2:	95 95       	asr	r25
    42c4:	87 95       	ror	r24
    42c6:	98 2f       	mov	r25, r24
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	65 e0       	ldi	r22, 0x05	; 5
    42cc:	49 2f       	mov	r20, r25
    42ce:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    42d2:	fe 01       	movw	r30, r28
    42d4:	ed 59       	subi	r30, 0x9D	; 157
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	80 81       	ld	r24, Z
    42da:	88 2f       	mov	r24, r24
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	84 70       	andi	r24, 0x04	; 4
    42e0:	90 70       	andi	r25, 0x00	; 0
    42e2:	95 95       	asr	r25
    42e4:	87 95       	ror	r24
    42e6:	95 95       	asr	r25
    42e8:	87 95       	ror	r24
    42ea:	98 2f       	mov	r25, r24
    42ec:	82 e0       	ldi	r24, 0x02	; 2
    42ee:	66 e0       	ldi	r22, 0x06	; 6
    42f0:	49 2f       	mov	r20, r25
    42f2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    42f6:	fe 01       	movw	r30, r28
    42f8:	ed 59       	subi	r30, 0x9D	; 157
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	80 81       	ld	r24, Z
    42fe:	88 2f       	mov	r24, r24
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	88 70       	andi	r24, 0x08	; 8
    4304:	90 70       	andi	r25, 0x00	; 0
    4306:	95 95       	asr	r25
    4308:	87 95       	ror	r24
    430a:	95 95       	asr	r25
    430c:	87 95       	ror	r24
    430e:	95 95       	asr	r25
    4310:	87 95       	ror	r24
    4312:	98 2f       	mov	r25, r24
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	67 e0       	ldi	r22, 0x07	; 7
    4318:	49 2f       	mov	r20, r25
    431a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	a0 e8       	ldi	r26, 0x80	; 128
    4324:	bf e3       	ldi	r27, 0x3F	; 63
    4326:	89 8f       	std	Y+25, r24	; 0x19
    4328:	9a 8f       	std	Y+26, r25	; 0x1a
    432a:	ab 8f       	std	Y+27, r26	; 0x1b
    432c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432e:	69 8d       	ldd	r22, Y+25	; 0x19
    4330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	4a ef       	ldi	r20, 0xFA	; 250
    433c:	54 e4       	ldi	r21, 0x44	; 68
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	8d 8b       	std	Y+21, r24	; 0x15
    4348:	9e 8b       	std	Y+22, r25	; 0x16
    434a:	af 8b       	std	Y+23, r26	; 0x17
    434c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    434e:	6d 89       	ldd	r22, Y+21	; 0x15
    4350:	7e 89       	ldd	r23, Y+22	; 0x16
    4352:	8f 89       	ldd	r24, Y+23	; 0x17
    4354:	98 8d       	ldd	r25, Y+24	; 0x18
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e8       	ldi	r20, 0x80	; 128
    435c:	5f e3       	ldi	r21, 0x3F	; 63
    435e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4362:	88 23       	and	r24, r24
    4364:	2c f4       	brge	.+10     	; 0x4370 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	9c 8b       	std	Y+20, r25	; 0x14
    436c:	8b 8b       	std	Y+19, r24	; 0x13
    436e:	3f c0       	rjmp	.+126    	; 0x43ee <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4370:	6d 89       	ldd	r22, Y+21	; 0x15
    4372:	7e 89       	ldd	r23, Y+22	; 0x16
    4374:	8f 89       	ldd	r24, Y+23	; 0x17
    4376:	98 8d       	ldd	r25, Y+24	; 0x18
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	3f ef       	ldi	r19, 0xFF	; 255
    437c:	4f e7       	ldi	r20, 0x7F	; 127
    437e:	57 e4       	ldi	r21, 0x47	; 71
    4380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4384:	18 16       	cp	r1, r24
    4386:	4c f5       	brge	.+82     	; 0x43da <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4388:	69 8d       	ldd	r22, Y+25	; 0x19
    438a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    438c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    438e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e2       	ldi	r20, 0x20	; 32
    4396:	51 e4       	ldi	r21, 0x41	; 65
    4398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	bc 01       	movw	r22, r24
    43a2:	cd 01       	movw	r24, r26
    43a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	9c 8b       	std	Y+20, r25	; 0x14
    43ae:	8b 8b       	std	Y+19, r24	; 0x13
    43b0:	0f c0       	rjmp	.+30     	; 0x43d0 <LCD_displayCharacter+0x7be>
    43b2:	88 ec       	ldi	r24, 0xC8	; 200
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	9a 8b       	std	Y+18, r25	; 0x12
    43b8:	89 8b       	std	Y+17, r24	; 0x11
    43ba:	89 89       	ldd	r24, Y+17	; 0x11
    43bc:	9a 89       	ldd	r25, Y+18	; 0x12
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <LCD_displayCharacter+0x7ac>
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c6:	8b 89       	ldd	r24, Y+19	; 0x13
    43c8:	9c 89       	ldd	r25, Y+20	; 0x14
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	9c 8b       	std	Y+20, r25	; 0x14
    43ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d0:	8b 89       	ldd	r24, Y+19	; 0x13
    43d2:	9c 89       	ldd	r25, Y+20	; 0x14
    43d4:	00 97       	sbiw	r24, 0x00	; 0
    43d6:	69 f7       	brne	.-38     	; 0x43b2 <LCD_displayCharacter+0x7a0>
    43d8:	14 c0       	rjmp	.+40     	; 0x4402 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43da:	6d 89       	ldd	r22, Y+21	; 0x15
    43dc:	7e 89       	ldd	r23, Y+22	; 0x16
    43de:	8f 89       	ldd	r24, Y+23	; 0x17
    43e0:	98 8d       	ldd	r25, Y+24	; 0x18
    43e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	9c 8b       	std	Y+20, r25	; 0x14
    43ec:	8b 8b       	std	Y+19, r24	; 0x13
    43ee:	8b 89       	ldd	r24, Y+19	; 0x13
    43f0:	9c 89       	ldd	r25, Y+20	; 0x14
    43f2:	98 8b       	std	Y+16, r25	; 0x10
    43f4:	8f 87       	std	Y+15, r24	; 0x0f
    43f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f8:	98 89       	ldd	r25, Y+16	; 0x10
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	f1 f7       	brne	.-4      	; 0x43fa <LCD_displayCharacter+0x7e8>
    43fe:	98 8b       	std	Y+16, r25	; 0x10
    4400:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	63 e0       	ldi	r22, 0x03	; 3
    4406:	40 e0       	ldi	r20, 0x00	; 0
    4408:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	a0 e8       	ldi	r26, 0x80	; 128
    4412:	bf e3       	ldi	r27, 0x3F	; 63
    4414:	8b 87       	std	Y+11, r24	; 0x0b
    4416:	9c 87       	std	Y+12, r25	; 0x0c
    4418:	ad 87       	std	Y+13, r26	; 0x0d
    441a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441c:	6b 85       	ldd	r22, Y+11	; 0x0b
    441e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4420:	8d 85       	ldd	r24, Y+13	; 0x0d
    4422:	9e 85       	ldd	r25, Y+14	; 0x0e
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	4a ef       	ldi	r20, 0xFA	; 250
    442a:	54 e4       	ldi	r21, 0x44	; 68
    442c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	8f 83       	std	Y+7, r24	; 0x07
    4436:	98 87       	std	Y+8, r25	; 0x08
    4438:	a9 87       	std	Y+9, r26	; 0x09
    443a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    443c:	6f 81       	ldd	r22, Y+7	; 0x07
    443e:	78 85       	ldd	r23, Y+8	; 0x08
    4440:	89 85       	ldd	r24, Y+9	; 0x09
    4442:	9a 85       	ldd	r25, Y+10	; 0x0a
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	40 e8       	ldi	r20, 0x80	; 128
    444a:	5f e3       	ldi	r21, 0x3F	; 63
    444c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4450:	88 23       	and	r24, r24
    4452:	2c f4       	brge	.+10     	; 0x445e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	9e 83       	std	Y+6, r25	; 0x06
    445a:	8d 83       	std	Y+5, r24	; 0x05
    445c:	3f c0       	rjmp	.+126    	; 0x44dc <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    445e:	6f 81       	ldd	r22, Y+7	; 0x07
    4460:	78 85       	ldd	r23, Y+8	; 0x08
    4462:	89 85       	ldd	r24, Y+9	; 0x09
    4464:	9a 85       	ldd	r25, Y+10	; 0x0a
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4472:	18 16       	cp	r1, r24
    4474:	4c f5       	brge	.+82     	; 0x44c8 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4476:	6b 85       	ldd	r22, Y+11	; 0x0b
    4478:	7c 85       	ldd	r23, Y+12	; 0x0c
    447a:	8d 85       	ldd	r24, Y+13	; 0x0d
    447c:	9e 85       	ldd	r25, Y+14	; 0x0e
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e2       	ldi	r20, 0x20	; 32
    4484:	51 e4       	ldi	r21, 0x41	; 65
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	9e 83       	std	Y+6, r25	; 0x06
    449c:	8d 83       	std	Y+5, r24	; 0x05
    449e:	0f c0       	rjmp	.+30     	; 0x44be <LCD_displayCharacter+0x8ac>
    44a0:	88 ec       	ldi	r24, 0xC8	; 200
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	9c 83       	std	Y+4, r25	; 0x04
    44a6:	8b 83       	std	Y+3, r24	; 0x03
    44a8:	8b 81       	ldd	r24, Y+3	; 0x03
    44aa:	9c 81       	ldd	r25, Y+4	; 0x04
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	f1 f7       	brne	.-4      	; 0x44ac <LCD_displayCharacter+0x89a>
    44b0:	9c 83       	std	Y+4, r25	; 0x04
    44b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b4:	8d 81       	ldd	r24, Y+5	; 0x05
    44b6:	9e 81       	ldd	r25, Y+6	; 0x06
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	9e 83       	std	Y+6, r25	; 0x06
    44bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44be:	8d 81       	ldd	r24, Y+5	; 0x05
    44c0:	9e 81       	ldd	r25, Y+6	; 0x06
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	69 f7       	brne	.-38     	; 0x44a0 <LCD_displayCharacter+0x88e>
    44c6:	14 c0       	rjmp	.+40     	; 0x44f0 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ca:	78 85       	ldd	r23, Y+8	; 0x08
    44cc:	89 85       	ldd	r24, Y+9	; 0x09
    44ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
    44dc:	8d 81       	ldd	r24, Y+5	; 0x05
    44de:	9e 81       	ldd	r25, Y+6	; 0x06
    44e0:	9a 83       	std	Y+2, r25	; 0x02
    44e2:	89 83       	std	Y+1, r24	; 0x01
    44e4:	89 81       	ldd	r24, Y+1	; 0x01
    44e6:	9a 81       	ldd	r25, Y+2	; 0x02
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	f1 f7       	brne	.-4      	; 0x44e8 <LCD_displayCharacter+0x8d6>
    44ec:	9a 83       	std	Y+2, r25	; 0x02
    44ee:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    44f0:	cd 59       	subi	r28, 0x9D	; 157
    44f2:	df 4f       	sbci	r29, 0xFF	; 255
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	f8 94       	cli
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	0f be       	out	0x3f, r0	; 63
    44fc:	cd bf       	out	0x3d, r28	; 61
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	08 95       	ret

00004508 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4508:	df 93       	push	r29
    450a:	cf 93       	push	r28
    450c:	00 d0       	rcall	.+0      	; 0x450e <LCD_displayString+0x6>
    450e:	0f 92       	push	r0
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	9b 83       	std	Y+3, r25	; 0x03
    4516:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4518:	19 82       	std	Y+1, r1	; 0x01
    451a:	0e c0       	rjmp	.+28     	; 0x4538 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	8a 81       	ldd	r24, Y+2	; 0x02
    4524:	9b 81       	ldd	r25, Y+3	; 0x03
    4526:	fc 01       	movw	r30, r24
    4528:	e2 0f       	add	r30, r18
    452a:	f3 1f       	adc	r31, r19
    452c:	80 81       	ld	r24, Z
    452e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <LCD_displayCharacter>
		i++;
    4532:	89 81       	ldd	r24, Y+1	; 0x01
    4534:	8f 5f       	subi	r24, 0xFF	; 255
    4536:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	28 2f       	mov	r18, r24
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	8a 81       	ldd	r24, Y+2	; 0x02
    4540:	9b 81       	ldd	r25, Y+3	; 0x03
    4542:	fc 01       	movw	r30, r24
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	80 81       	ld	r24, Z
    454a:	88 23       	and	r24, r24
    454c:	39 f7       	brne	.-50     	; 0x451c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	cf 91       	pop	r28
    4556:	df 91       	pop	r29
    4558:	08 95       	ret

0000455a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    455a:	df 93       	push	r29
    455c:	cf 93       	push	r28
    455e:	00 d0       	rcall	.+0      	; 0x4560 <LCD_moveCursor+0x6>
    4560:	00 d0       	rcall	.+0      	; 0x4562 <LCD_moveCursor+0x8>
    4562:	0f 92       	push	r0
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
    4568:	8a 83       	std	Y+2, r24	; 0x02
    456a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    456c:	8a 81       	ldd	r24, Y+2	; 0x02
    456e:	28 2f       	mov	r18, r24
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	3d 83       	std	Y+5, r19	; 0x05
    4574:	2c 83       	std	Y+4, r18	; 0x04
    4576:	8c 81       	ldd	r24, Y+4	; 0x04
    4578:	9d 81       	ldd	r25, Y+5	; 0x05
    457a:	81 30       	cpi	r24, 0x01	; 1
    457c:	91 05       	cpc	r25, r1
    457e:	c1 f0       	breq	.+48     	; 0x45b0 <LCD_moveCursor+0x56>
    4580:	2c 81       	ldd	r18, Y+4	; 0x04
    4582:	3d 81       	ldd	r19, Y+5	; 0x05
    4584:	22 30       	cpi	r18, 0x02	; 2
    4586:	31 05       	cpc	r19, r1
    4588:	2c f4       	brge	.+10     	; 0x4594 <LCD_moveCursor+0x3a>
    458a:	8c 81       	ldd	r24, Y+4	; 0x04
    458c:	9d 81       	ldd	r25, Y+5	; 0x05
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	61 f0       	breq	.+24     	; 0x45aa <LCD_moveCursor+0x50>
    4592:	19 c0       	rjmp	.+50     	; 0x45c6 <LCD_moveCursor+0x6c>
    4594:	2c 81       	ldd	r18, Y+4	; 0x04
    4596:	3d 81       	ldd	r19, Y+5	; 0x05
    4598:	22 30       	cpi	r18, 0x02	; 2
    459a:	31 05       	cpc	r19, r1
    459c:	69 f0       	breq	.+26     	; 0x45b8 <LCD_moveCursor+0x5e>
    459e:	8c 81       	ldd	r24, Y+4	; 0x04
    45a0:	9d 81       	ldd	r25, Y+5	; 0x05
    45a2:	83 30       	cpi	r24, 0x03	; 3
    45a4:	91 05       	cpc	r25, r1
    45a6:	61 f0       	breq	.+24     	; 0x45c0 <LCD_moveCursor+0x66>
    45a8:	0e c0       	rjmp	.+28     	; 0x45c6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    45aa:	8b 81       	ldd	r24, Y+3	; 0x03
    45ac:	89 83       	std	Y+1, r24	; 0x01
    45ae:	0b c0       	rjmp	.+22     	; 0x45c6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    45b0:	8b 81       	ldd	r24, Y+3	; 0x03
    45b2:	80 5c       	subi	r24, 0xC0	; 192
    45b4:	89 83       	std	Y+1, r24	; 0x01
    45b6:	07 c0       	rjmp	.+14     	; 0x45c6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	80 5f       	subi	r24, 0xF0	; 240
    45bc:	89 83       	std	Y+1, r24	; 0x01
    45be:	03 c0       	rjmp	.+6      	; 0x45c6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    45c0:	8b 81       	ldd	r24, Y+3	; 0x03
    45c2:	80 5b       	subi	r24, 0xB0	; 176
    45c4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	80 68       	ori	r24, 0x80	; 128
    45ca:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
}
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
    45d6:	0f 90       	pop	r0
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	00 d0       	rcall	.+0      	; 0x45e4 <LCD_displayStringRowColumn+0x6>
    45e4:	00 d0       	rcall	.+0      	; 0x45e6 <LCD_displayStringRowColumn+0x8>
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
    45ea:	89 83       	std	Y+1, r24	; 0x01
    45ec:	6a 83       	std	Y+2, r22	; 0x02
    45ee:	5c 83       	std	Y+4, r21	; 0x04
    45f0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	6a 81       	ldd	r22, Y+2	; 0x02
    45f6:	0e 94 ad 22 	call	0x455a	; 0x455a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    45fa:	8b 81       	ldd	r24, Y+3	; 0x03
    45fc:	9c 81       	ldd	r25, Y+4	; 0x04
    45fe:	0e 94 84 22 	call	0x4508	; 0x4508 <LCD_displayString>
}
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	0f 90       	pop	r0
    460a:	cf 91       	pop	r28
    460c:	df 91       	pop	r29
    460e:	08 95       	ret

00004610 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4610:	df 93       	push	r29
    4612:	cf 93       	push	r28
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	62 97       	sbiw	r28, 0x12	; 18
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	f8 94       	cli
    461e:	de bf       	out	0x3e, r29	; 62
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	cd bf       	out	0x3d, r28	; 61
    4624:	9a 8b       	std	Y+18, r25	; 0x12
    4626:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4628:	89 89       	ldd	r24, Y+17	; 0x11
    462a:	9a 89       	ldd	r25, Y+18	; 0x12
    462c:	9e 01       	movw	r18, r28
    462e:	2f 5f       	subi	r18, 0xFF	; 255
    4630:	3f 4f       	sbci	r19, 0xFF	; 255
    4632:	b9 01       	movw	r22, r18
    4634:	4a e0       	ldi	r20, 0x0A	; 10
    4636:	50 e0       	ldi	r21, 0x00	; 0
    4638:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <itoa>
   LCD_displayString(buff); /* Display the string */
    463c:	ce 01       	movw	r24, r28
    463e:	01 96       	adiw	r24, 0x01	; 1
    4640:	0e 94 84 22 	call	0x4508	; 0x4508 <LCD_displayString>
}
    4644:	62 96       	adiw	r28, 0x12	; 18
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_sendCommand>
}
    4664:	cf 91       	pop	r28
    4666:	df 91       	pop	r29
    4668:	08 95       	ret

0000466a <motor_init>:

#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include "../MCAL/gpio.h"

void motor_init()
{
    466a:	df 93       	push	r29
    466c:	cf 93       	push	r28
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_IN1_PORT_ID ,Motor_IN1_PIN_ID,PIN_OUTPUT );
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	64 e0       	ldi	r22, 0x04	; 4
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_IN2_PORT_ID ,Motor_IN2_PIN_ID,PIN_OUTPUT );
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	65 e0       	ldi	r22, 0x05	; 5
    4680:	41 e0       	ldi	r20, 0x01	; 1
    4682:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	64 e0       	ldi	r22, 0x04	; 4
    468a:	40 e0       	ldi	r20, 0x00	; 0
    468c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	65 e0       	ldi	r22, 0x05	; 5
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    469a:	cf 91       	pop	r28
    469c:	df 91       	pop	r29
    469e:	08 95       	ret

000046a0 <changeSpeed>:
void changeSpeed(unsigned char x)
{
    46a0:	df 93       	push	r29
    46a2:	cf 93       	push	r28
    46a4:	0f 92       	push	r0
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
    46aa:	89 83       	std	Y+1, r24	; 0x01
//the most speed is 256
	PWM_TIMER0_Start(x);
    46ac:	89 81       	ldd	r24, Y+1	; 0x01
    46ae:	88 2f       	mov	r24, r24
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <PWM_TIMER0_Start>

}
    46b6:	0f 90       	pop	r0
    46b8:	cf 91       	pop	r28
    46ba:	df 91       	pop	r29
    46bc:	08 95       	ret

000046be <rotate_cw>:
void rotate_cw()
{
    46be:	df 93       	push	r29
    46c0:	cf 93       	push	r28
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	64 e0       	ldi	r22, 0x04	; 4
    46ca:	41 e0       	ldi	r20, 0x01	; 1
    46cc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	65 e0       	ldi	r22, 0x05	; 5
    46d4:	40 e0       	ldi	r20, 0x00	; 0
    46d6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    46da:	cf 91       	pop	r28
    46dc:	df 91       	pop	r29
    46de:	08 95       	ret

000046e0 <rotate_acw>:
void rotate_acw()
{
    46e0:	df 93       	push	r29
    46e2:	cf 93       	push	r28
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	64 e0       	ldi	r22, 0x04	; 4
    46ec:	40 e0       	ldi	r20, 0x00	; 0
    46ee:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_HIGH);
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	65 e0       	ldi	r22, 0x05	; 5
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    46fc:	cf 91       	pop	r28
    46fe:	df 91       	pop	r29
    4700:	08 95       	ret

00004702 <motor_stop>:
void motor_stop()
{
    4702:	df 93       	push	r29
    4704:	cf 93       	push	r28
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	64 e0       	ldi	r22, 0x04	; 4
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	65 e0       	ldi	r22, 0x05	; 5
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	08 95       	ret

00004724 <motor2_init>:

#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include "../MCAL/gpio.h"

void motor2_init()
{
    4724:	df 93       	push	r29
    4726:	cf 93       	push	r28
    4728:	cd b7       	in	r28, 0x3d	; 61
    472a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_IN1_PORT_ID ,Motor_IN1_PIN_ID,PIN_OUTPUT );
    472c:	83 e0       	ldi	r24, 0x03	; 3
    472e:	64 e0       	ldi	r22, 0x04	; 4
    4730:	41 e0       	ldi	r20, 0x01	; 1
    4732:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_IN2_PORT_ID ,Motor_IN2_PIN_ID,PIN_OUTPUT );
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	65 e0       	ldi	r22, 0x05	; 5
    473a:	41 e0       	ldi	r20, 0x01	; 1
    473c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	64 e0       	ldi	r22, 0x04	; 4
    4744:	40 e0       	ldi	r20, 0x00	; 0
    4746:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    474a:	83 e0       	ldi	r24, 0x03	; 3
    474c:	65 e0       	ldi	r22, 0x05	; 5
    474e:	40 e0       	ldi	r20, 0x00	; 0
    4750:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    4754:	cf 91       	pop	r28
    4756:	df 91       	pop	r29
    4758:	08 95       	ret

0000475a <changeSpeed2>:
void changeSpeed2(unsigned char x)
{
    475a:	df 93       	push	r29
    475c:	cf 93       	push	r28
    475e:	0f 92       	push	r0
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
    4764:	89 83       	std	Y+1, r24	; 0x01

	PWM_TIMER2_Start(x);
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	88 2f       	mov	r24, r24
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <PWM_TIMER2_Start>

}
    4770:	0f 90       	pop	r0
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <rotate2_cw>:
void rotate2_cw()
{
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	64 e0       	ldi	r22, 0x04	; 4
    4784:	41 e0       	ldi	r20, 0x01	; 1
    4786:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    478a:	83 e0       	ldi	r24, 0x03	; 3
    478c:	65 e0       	ldi	r22, 0x05	; 5
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4794:	cf 91       	pop	r28
    4796:	df 91       	pop	r29
    4798:	08 95       	ret

0000479a <rotate2_acw>:
void rotate2_acw()
{
    479a:	df 93       	push	r29
    479c:	cf 93       	push	r28
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    47a2:	83 e0       	ldi	r24, 0x03	; 3
    47a4:	64 e0       	ldi	r22, 0x04	; 4
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_HIGH);
    47ac:	83 e0       	ldi	r24, 0x03	; 3
    47ae:	65 e0       	ldi	r22, 0x05	; 5
    47b0:	41 e0       	ldi	r20, 0x01	; 1
    47b2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    47b6:	cf 91       	pop	r28
    47b8:	df 91       	pop	r29
    47ba:	08 95       	ret

000047bc <motor2_stop>:
void motor2_stop()
{
    47bc:	df 93       	push	r29
    47be:	cf 93       	push	r28
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    47c4:	83 e0       	ldi	r24, 0x03	; 3
    47c6:	64 e0       	ldi	r22, 0x04	; 4
    47c8:	40 e0       	ldi	r20, 0x00	; 0
    47ca:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    47ce:	83 e0       	ldi	r24, 0x03	; 3
    47d0:	65 e0       	ldi	r22, 0x05	; 5
    47d2:	40 e0       	ldi	r20, 0x00	; 0
    47d4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    47d8:	cf 91       	pop	r28
    47da:	df 91       	pop	r29
    47dc:	08 95       	ret

000047de <Ultrasonic_edgeProcessing>:
float64 distance=0;
uint8 g_edgeCount = 0;
uint16 g_timeHigh=0;

void Ultrasonic_edgeProcessing(void)
{
    47de:	df 93       	push	r29
    47e0:	cf 93       	push	r28
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    47e6:	80 91 80 01 	lds	r24, 0x0180
    47ea:	8f 5f       	subi	r24, 0xFF	; 255
    47ec:	80 93 80 01 	sts	0x0180, r24
	if(g_edgeCount == 1)
    47f0:	80 91 80 01 	lds	r24, 0x0180
    47f4:	81 30       	cpi	r24, 0x01	; 1
    47f6:	39 f4       	brne	.+14     	; 0x4806 <Ultrasonic_edgeProcessing+0x28>
	{
		Icu_clearTimerValue();
    47f8:	0e 94 03 11 	call	0x2206	; 0x2206 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <Icu_setEdgeDetectionType>
    4804:	10 c0       	rjmp	.+32     	; 0x4826 <Ultrasonic_edgeProcessing+0x48>
	}
	else if(g_edgeCount == 2)
    4806:	80 91 80 01 	lds	r24, 0x0180
    480a:	82 30       	cpi	r24, 0x02	; 2
    480c:	61 f4       	brne	.+24     	; 0x4826 <Ultrasonic_edgeProcessing+0x48>
	{
		g_timeHigh = TIMER1_ICU_GetTCNT1();
    480e:	0e 94 b7 10 	call	0x216e	; 0x216e <TIMER1_ICU_GetTCNT1>
    4812:	90 93 82 01 	sts	0x0182, r25
    4816:	80 93 81 01 	sts	0x0181, r24
		Icu_setEdgeDetectionType(RISING);
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <Icu_setEdgeDetectionType>
		g_edgeCount=0;
    4822:	10 92 80 01 	sts	0x0180, r1
	}

}
    4826:	cf 91       	pop	r28
    4828:	df 91       	pop	r29
    482a:	08 95       	ret

0000482c <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	28 97       	sbiw	r28, 0x08	; 8
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
	/* Create configuration structure for ICU driver */
	Timer1_ConfigType Icu_Config_ultrasonic = {timer1_PRESCALAR_CLK8,RISING};
    4840:	88 e0       	ldi	r24, 0x08	; 8
    4842:	fe 01       	movw	r30, r28
    4844:	31 96       	adiw	r30, 0x01	; 1
    4846:	df 01       	movw	r26, r30
    4848:	98 2f       	mov	r25, r24
    484a:	1d 92       	st	X+, r1
    484c:	9a 95       	dec	r25
    484e:	e9 f7       	brne	.-6      	; 0x484a <Ultrasonic_init+0x1e>
    4850:	82 e0       	ldi	r24, 0x02	; 2
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	9a 83       	std	Y+2, r25	; 0x02
    4856:	89 83       	std	Y+1, r24	; 0x01
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	9c 83       	std	Y+4, r25	; 0x04
    485e:	8b 83       	std	Y+3, r24	; 0x03
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    4860:	8f ee       	ldi	r24, 0xEF	; 239
    4862:	93 e2       	ldi	r25, 0x23	; 35
    4864:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <Icu_setCallBack>
	TIMER1_ICU_Enable(&Icu_Config_ultrasonic);
    4868:	ce 01       	movw	r24, r28
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TIMER1_ICU_Enable>
	GPIO_setupPinDirection(TRIG_PORT_ID, TRIG_PIN_ID, PIN_OUTPUT);
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	65 e0       	ldi	r22, 0x05	; 5
    4874:	41 e0       	ldi	r20, 0x01	; 1
    4876:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_LOW);
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	65 e0       	ldi	r22, 0x05	; 5
    487e:	40 e0       	ldi	r20, 0x00	; 0
    4880:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    4884:	28 96       	adiw	r28, 0x08	; 8
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	68 97       	sbiw	r28, 0x18	; 24
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_HIGH);
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	65 e0       	ldi	r22, 0x05	; 5
    48ae:	41 e0       	ldi	r20, 0x01	; 1
    48b0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	a0 e2       	ldi	r26, 0x20	; 32
    48ba:	b1 e4       	ldi	r27, 0x41	; 65
    48bc:	8d 8b       	std	Y+21, r24	; 0x15
    48be:	9e 8b       	std	Y+22, r25	; 0x16
    48c0:	af 8b       	std	Y+23, r26	; 0x17
    48c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    48c4:	6d 89       	ldd	r22, Y+21	; 0x15
    48c6:	7e 89       	ldd	r23, Y+22	; 0x16
    48c8:	8f 89       	ldd	r24, Y+23	; 0x17
    48ca:	98 8d       	ldd	r25, Y+24	; 0x18
    48cc:	2b ea       	ldi	r18, 0xAB	; 171
    48ce:	3a ea       	ldi	r19, 0xAA	; 170
    48d0:	4a e2       	ldi	r20, 0x2A	; 42
    48d2:	50 e4       	ldi	r21, 0x40	; 64
    48d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d8:	dc 01       	movw	r26, r24
    48da:	cb 01       	movw	r24, r22
    48dc:	89 8b       	std	Y+17, r24	; 0x11
    48de:	9a 8b       	std	Y+18, r25	; 0x12
    48e0:	ab 8b       	std	Y+19, r26	; 0x13
    48e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    48e4:	69 89       	ldd	r22, Y+17	; 0x11
    48e6:	7a 89       	ldd	r23, Y+18	; 0x12
    48e8:	8b 89       	ldd	r24, Y+19	; 0x13
    48ea:	9c 89       	ldd	r25, Y+20	; 0x14
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e8       	ldi	r20, 0x80	; 128
    48f2:	5f e3       	ldi	r21, 0x3F	; 63
    48f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f8:	88 23       	and	r24, r24
    48fa:	1c f4       	brge	.+6      	; 0x4902 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	88 8b       	std	Y+16, r24	; 0x10
    4900:	91 c0       	rjmp	.+290    	; 0x4a24 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    4902:	69 89       	ldd	r22, Y+17	; 0x11
    4904:	7a 89       	ldd	r23, Y+18	; 0x12
    4906:	8b 89       	ldd	r24, Y+19	; 0x13
    4908:	9c 89       	ldd	r25, Y+20	; 0x14
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	4f e7       	ldi	r20, 0x7F	; 127
    4910:	53 e4       	ldi	r21, 0x43	; 67
    4912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4916:	18 16       	cp	r1, r24
    4918:	0c f0       	brlt	.+2      	; 0x491c <Ultrasonic_Trigger+0x86>
    491a:	7b c0       	rjmp	.+246    	; 0x4a12 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    491c:	6d 89       	ldd	r22, Y+21	; 0x15
    491e:	7e 89       	ldd	r23, Y+22	; 0x16
    4920:	8f 89       	ldd	r24, Y+23	; 0x17
    4922:	98 8d       	ldd	r25, Y+24	; 0x18
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	4a e7       	ldi	r20, 0x7A	; 122
    492a:	54 e4       	ldi	r21, 0x44	; 68
    492c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	8c 87       	std	Y+12, r24	; 0x0c
    4936:	9d 87       	std	Y+13, r25	; 0x0d
    4938:	ae 87       	std	Y+14, r26	; 0x0e
    493a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493c:	6c 85       	ldd	r22, Y+12	; 0x0c
    493e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4940:	8e 85       	ldd	r24, Y+14	; 0x0e
    4942:	9f 85       	ldd	r25, Y+15	; 0x0f
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	4a ef       	ldi	r20, 0xFA	; 250
    494a:	54 e4       	ldi	r21, 0x44	; 68
    494c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	88 87       	std	Y+8, r24	; 0x08
    4956:	99 87       	std	Y+9, r25	; 0x09
    4958:	aa 87       	std	Y+10, r26	; 0x0a
    495a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    495c:	68 85       	ldd	r22, Y+8	; 0x08
    495e:	79 85       	ldd	r23, Y+9	; 0x09
    4960:	8a 85       	ldd	r24, Y+10	; 0x0a
    4962:	9b 85       	ldd	r25, Y+11	; 0x0b
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	40 e8       	ldi	r20, 0x80	; 128
    496a:	5f e3       	ldi	r21, 0x3F	; 63
    496c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4970:	88 23       	and	r24, r24
    4972:	2c f4       	brge	.+10     	; 0x497e <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	9f 83       	std	Y+7, r25	; 0x07
    497a:	8e 83       	std	Y+6, r24	; 0x06
    497c:	3f c0       	rjmp	.+126    	; 0x49fc <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    497e:	68 85       	ldd	r22, Y+8	; 0x08
    4980:	79 85       	ldd	r23, Y+9	; 0x09
    4982:	8a 85       	ldd	r24, Y+10	; 0x0a
    4984:	9b 85       	ldd	r25, Y+11	; 0x0b
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	3f ef       	ldi	r19, 0xFF	; 255
    498a:	4f e7       	ldi	r20, 0x7F	; 127
    498c:	57 e4       	ldi	r21, 0x47	; 71
    498e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4992:	18 16       	cp	r1, r24
    4994:	4c f5       	brge	.+82     	; 0x49e8 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4996:	6c 85       	ldd	r22, Y+12	; 0x0c
    4998:	7d 85       	ldd	r23, Y+13	; 0x0d
    499a:	8e 85       	ldd	r24, Y+14	; 0x0e
    499c:	9f 85       	ldd	r25, Y+15	; 0x0f
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	40 e2       	ldi	r20, 0x20	; 32
    49a4:	51 e4       	ldi	r21, 0x41	; 65
    49a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	bc 01       	movw	r22, r24
    49b0:	cd 01       	movw	r24, r26
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	9f 83       	std	Y+7, r25	; 0x07
    49bc:	8e 83       	std	Y+6, r24	; 0x06
    49be:	0f c0       	rjmp	.+30     	; 0x49de <Ultrasonic_Trigger+0x148>
    49c0:	88 ec       	ldi	r24, 0xC8	; 200
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	9d 83       	std	Y+5, r25	; 0x05
    49c6:	8c 83       	std	Y+4, r24	; 0x04
    49c8:	8c 81       	ldd	r24, Y+4	; 0x04
    49ca:	9d 81       	ldd	r25, Y+5	; 0x05
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	f1 f7       	brne	.-4      	; 0x49cc <Ultrasonic_Trigger+0x136>
    49d0:	9d 83       	std	Y+5, r25	; 0x05
    49d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d4:	8e 81       	ldd	r24, Y+6	; 0x06
    49d6:	9f 81       	ldd	r25, Y+7	; 0x07
    49d8:	01 97       	sbiw	r24, 0x01	; 1
    49da:	9f 83       	std	Y+7, r25	; 0x07
    49dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49de:	8e 81       	ldd	r24, Y+6	; 0x06
    49e0:	9f 81       	ldd	r25, Y+7	; 0x07
    49e2:	00 97       	sbiw	r24, 0x00	; 0
    49e4:	69 f7       	brne	.-38     	; 0x49c0 <Ultrasonic_Trigger+0x12a>
    49e6:	24 c0       	rjmp	.+72     	; 0x4a30 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e8:	68 85       	ldd	r22, Y+8	; 0x08
    49ea:	79 85       	ldd	r23, Y+9	; 0x09
    49ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    49ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	9f 83       	std	Y+7, r25	; 0x07
    49fa:	8e 83       	std	Y+6, r24	; 0x06
    49fc:	8e 81       	ldd	r24, Y+6	; 0x06
    49fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4a00:	9b 83       	std	Y+3, r25	; 0x03
    4a02:	8a 83       	std	Y+2, r24	; 0x02
    4a04:	8a 81       	ldd	r24, Y+2	; 0x02
    4a06:	9b 81       	ldd	r25, Y+3	; 0x03
    4a08:	01 97       	sbiw	r24, 0x01	; 1
    4a0a:	f1 f7       	brne	.-4      	; 0x4a08 <Ultrasonic_Trigger+0x172>
    4a0c:	9b 83       	std	Y+3, r25	; 0x03
    4a0e:	8a 83       	std	Y+2, r24	; 0x02
    4a10:	0f c0       	rjmp	.+30     	; 0x4a30 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a12:	69 89       	ldd	r22, Y+17	; 0x11
    4a14:	7a 89       	ldd	r23, Y+18	; 0x12
    4a16:	8b 89       	ldd	r24, Y+19	; 0x13
    4a18:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a1e:	dc 01       	movw	r26, r24
    4a20:	cb 01       	movw	r24, r22
    4a22:	88 8b       	std	Y+16, r24	; 0x10
    4a24:	88 89       	ldd	r24, Y+16	; 0x10
    4a26:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	8a 95       	dec	r24
    4a2c:	f1 f7       	brne	.-4      	; 0x4a2a <Ultrasonic_Trigger+0x194>
    4a2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_LOW);
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	65 e0       	ldi	r22, 0x05	; 5
    4a34:	40 e0       	ldi	r20, 0x00	; 0
    4a36:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4a3a:	68 96       	adiw	r28, 0x18	; 24
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	cf 91       	pop	r28
    4a48:	df 91       	pop	r29
    4a4a:	08 95       	ret

00004a4c <Ultrasonic_readDistance>:
 uint16 Ultrasonic_readDistance(void)
 {
    4a4c:	df 93       	push	r29
    4a4e:	cf 93       	push	r28
    4a50:	cd b7       	in	r28, 0x3d	; 61
    4a52:	de b7       	in	r29, 0x3e	; 62
	 Ultrasonic_Trigger();
    4a54:	0e 94 4b 24 	call	0x4896	; 0x4896 <Ultrasonic_Trigger>
= 0.017 x (TIMER value) cm
= (TIMER value) / 58.8 cm
Note TIMER VALUE is the pulse width time calculated by the ICU
*/

	 distance=(float)g_timeHigh/57.5;
    4a58:	80 91 81 01 	lds	r24, 0x0181
    4a5c:	90 91 82 01 	lds	r25, 0x0182
    4a60:	cc 01       	movw	r24, r24
    4a62:	a0 e0       	ldi	r26, 0x00	; 0
    4a64:	b0 e0       	ldi	r27, 0x00	; 0
    4a66:	bc 01       	movw	r22, r24
    4a68:	cd 01       	movw	r24, r26
    4a6a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	bc 01       	movw	r22, r24
    4a74:	cd 01       	movw	r24, r26
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	46 e6       	ldi	r20, 0x66	; 102
    4a7c:	52 e4       	ldi	r21, 0x42	; 66
    4a7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	80 93 7c 01 	sts	0x017C, r24
    4a8a:	90 93 7d 01 	sts	0x017D, r25
    4a8e:	a0 93 7e 01 	sts	0x017E, r26
    4a92:	b0 93 7f 01 	sts	0x017F, r27
	 return distance;
    4a96:	80 91 7c 01 	lds	r24, 0x017C
    4a9a:	90 91 7d 01 	lds	r25, 0x017D
    4a9e:	a0 91 7e 01 	lds	r26, 0x017E
    4aa2:	b0 91 7f 01 	lds	r27, 0x017F
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	cd 01       	movw	r24, r26
    4aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
 }
    4ab2:	cf 91       	pop	r28
    4ab4:	df 91       	pop	r29
    4ab6:	08 95       	ret

00004ab8 <__vector_7>:
uint16 counter=0;
uint8 flag=0;
uint8 flag2=0;
uint8 direction=0;
ISR(TIMER1_COMPA_vect)
{
    4ab8:	1f 92       	push	r1
    4aba:	0f 92       	push	r0
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	0f 92       	push	r0
    4ac0:	11 24       	eor	r1, r1
    4ac2:	8f 93       	push	r24
    4ac4:	df 93       	push	r29
    4ac6:	cf 93       	push	r28
    4ac8:	cd b7       	in	r28, 0x3d	; 61
    4aca:	de b7       	in	r29, 0x3e	; 62
	 if(Timer1_CALLBACK_Fptr != NULL_PTR)
	{
		(*Timer1_CALLBACK_Fptr)();
	}
	 */
	sec1++;
    4acc:	80 91 84 01 	lds	r24, 0x0184
    4ad0:	8f 5f       	subi	r24, 0xFF	; 255
    4ad2:	80 93 84 01 	sts	0x0184, r24
	if(sec1==10)
    4ad6:	80 91 84 01 	lds	r24, 0x0184
    4ada:	8a 30       	cpi	r24, 0x0A	; 10
    4adc:	99 f5       	brne	.+102    	; 0x4b44 <__vector_7+0x8c>
	{
		sec1 = 0;
    4ade:	10 92 84 01 	sts	0x0184, r1
		sec2++;
    4ae2:	80 91 85 01 	lds	r24, 0x0185
    4ae6:	8f 5f       	subi	r24, 0xFF	; 255
    4ae8:	80 93 85 01 	sts	0x0185, r24

		if(sec2==6)
    4aec:	80 91 85 01 	lds	r24, 0x0185
    4af0:	86 30       	cpi	r24, 0x06	; 6
    4af2:	41 f5       	brne	.+80     	; 0x4b44 <__vector_7+0x8c>
		{
			sec2=0;
    4af4:	10 92 85 01 	sts	0x0185, r1
			min1++;
    4af8:	80 91 86 01 	lds	r24, 0x0186
    4afc:	8f 5f       	subi	r24, 0xFF	; 255
    4afe:	80 93 86 01 	sts	0x0186, r24
			if(min1==10)
    4b02:	80 91 86 01 	lds	r24, 0x0186
    4b06:	8a 30       	cpi	r24, 0x0A	; 10
    4b08:	e9 f4       	brne	.+58     	; 0x4b44 <__vector_7+0x8c>
			{
				min1=0;
    4b0a:	10 92 86 01 	sts	0x0186, r1
				min2++;
    4b0e:	80 91 87 01 	lds	r24, 0x0187
    4b12:	8f 5f       	subi	r24, 0xFF	; 255
    4b14:	80 93 87 01 	sts	0x0187, r24
				if(min2==6)
    4b18:	80 91 87 01 	lds	r24, 0x0187
    4b1c:	86 30       	cpi	r24, 0x06	; 6
    4b1e:	91 f4       	brne	.+36     	; 0x4b44 <__vector_7+0x8c>
				{
					min2=0;
    4b20:	10 92 87 01 	sts	0x0187, r1
					hour1++;
    4b24:	80 91 88 01 	lds	r24, 0x0188
    4b28:	8f 5f       	subi	r24, 0xFF	; 255
    4b2a:	80 93 88 01 	sts	0x0188, r24
					if(hour1==10)
    4b2e:	80 91 88 01 	lds	r24, 0x0188
    4b32:	8a 30       	cpi	r24, 0x0A	; 10
    4b34:	39 f4       	brne	.+14     	; 0x4b44 <__vector_7+0x8c>
					{
						hour1=0;
    4b36:	10 92 88 01 	sts	0x0188, r1
						hour2++;
    4b3a:	80 91 89 01 	lds	r24, 0x0189
    4b3e:	8f 5f       	subi	r24, 0xFF	; 255
    4b40:	80 93 89 01 	sts	0x0189, r24
					}
				}
			}
		}
	}
}
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	8f 91       	pop	r24
    4b4a:	0f 90       	pop	r0
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	0f 90       	pop	r0
    4b50:	1f 90       	pop	r1
    4b52:	18 95       	reti

00004b54 <display_seven_sagement>:
void display_seven_sagement()
{
    4b54:	0f 93       	push	r16
    4b56:	1f 93       	push	r17
    4b58:	df 93       	push	r29
    4b5a:	cf 93       	push	r28
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
    4b60:	c0 59       	subi	r28, 0x90	; 144
    4b62:	d0 40       	sbci	r29, 0x00	; 0
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	f8 94       	cli
    4b68:	de bf       	out	0x3e, r29	; 62
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	cd bf       	out	0x3d, r28	; 61

	PORTA=(PORTA & 0XC0) |(1<<PIN0) ;
    4b6e:	ab e3       	ldi	r26, 0x3B	; 59
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	eb e3       	ldi	r30, 0x3B	; 59
    4b74:	f0 e0       	ldi	r31, 0x00	; 0
    4b76:	80 81       	ld	r24, Z
    4b78:	80 7c       	andi	r24, 0xC0	; 192
    4b7a:	81 60       	ori	r24, 0x01	; 1
    4b7c:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & sec1);
    4b7e:	a5 e3       	ldi	r26, 0x35	; 53
    4b80:	b0 e0       	ldi	r27, 0x00	; 0
    4b82:	e5 e3       	ldi	r30, 0x35	; 53
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	80 81       	ld	r24, Z
    4b88:	98 2f       	mov	r25, r24
    4b8a:	90 7f       	andi	r25, 0xF0	; 240
    4b8c:	80 91 84 01 	lds	r24, 0x0184
    4b90:	8f 70       	andi	r24, 0x0F	; 15
    4b92:	89 2b       	or	r24, r25
    4b94:	8c 93       	st	X, r24
    4b96:	fe 01       	movw	r30, r28
    4b98:	e3 57       	subi	r30, 0x73	; 115
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	a8 e4       	ldi	r26, 0x48	; 72
    4ba2:	b3 e4       	ldi	r27, 0x43	; 67
    4ba4:	80 83       	st	Z, r24
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	a2 83       	std	Z+2, r26	; 0x02
    4baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bac:	8e 01       	movw	r16, r28
    4bae:	07 57       	subi	r16, 0x77	; 119
    4bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e3 57       	subi	r30, 0x73	; 115
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	60 81       	ld	r22, Z
    4bba:	71 81       	ldd	r23, Z+1	; 0x01
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	2b ea       	ldi	r18, 0xAB	; 171
    4bc2:	3a ea       	ldi	r19, 0xAA	; 170
    4bc4:	4a e2       	ldi	r20, 0x2A	; 42
    4bc6:	50 e4       	ldi	r21, 0x40	; 64
    4bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	f8 01       	movw	r30, r16
    4bd2:	80 83       	st	Z, r24
    4bd4:	91 83       	std	Z+1, r25	; 0x01
    4bd6:	a2 83       	std	Z+2, r26	; 0x02
    4bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bda:	fe 01       	movw	r30, r28
    4bdc:	e7 57       	subi	r30, 0x77	; 119
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	60 81       	ld	r22, Z
    4be2:	71 81       	ldd	r23, Z+1	; 0x01
    4be4:	82 81       	ldd	r24, Z+2	; 0x02
    4be6:	93 81       	ldd	r25, Z+3	; 0x03
    4be8:	20 e0       	ldi	r18, 0x00	; 0
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	40 e8       	ldi	r20, 0x80	; 128
    4bee:	5f e3       	ldi	r21, 0x3F	; 63
    4bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bf4:	88 23       	and	r24, r24
    4bf6:	34 f4       	brge	.+12     	; 0x4c04 <display_seven_sagement+0xb0>
		__ticks = 1;
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e8 57       	subi	r30, 0x78	; 120
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	80 83       	st	Z, r24
    4c02:	e0 c0       	rjmp	.+448    	; 0x4dc4 <display_seven_sagement+0x270>
	else if (__tmp > 255)
    4c04:	fe 01       	movw	r30, r28
    4c06:	e7 57       	subi	r30, 0x77	; 119
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	60 81       	ld	r22, Z
    4c0c:	71 81       	ldd	r23, Z+1	; 0x01
    4c0e:	82 81       	ldd	r24, Z+2	; 0x02
    4c10:	93 81       	ldd	r25, Z+3	; 0x03
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	4f e7       	ldi	r20, 0x7F	; 127
    4c18:	53 e4       	ldi	r21, 0x43	; 67
    4c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c1e:	18 16       	cp	r1, r24
    4c20:	0c f0       	brlt	.+2      	; 0x4c24 <display_seven_sagement+0xd0>
    4c22:	c0 c0       	rjmp	.+384    	; 0x4da4 <display_seven_sagement+0x250>
	{
		_delay_ms(__us / 1000.0);
    4c24:	fe 01       	movw	r30, r28
    4c26:	e3 57       	subi	r30, 0x73	; 115
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	60 81       	ld	r22, Z
    4c2c:	71 81       	ldd	r23, Z+1	; 0x01
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	93 81       	ldd	r25, Z+3	; 0x03
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	4a e7       	ldi	r20, 0x7A	; 122
    4c38:	54 e4       	ldi	r21, 0x44	; 68
    4c3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	fe 01       	movw	r30, r28
    4c44:	ec 57       	subi	r30, 0x7C	; 124
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	80 83       	st	Z, r24
    4c4a:	91 83       	std	Z+1, r25	; 0x01
    4c4c:	a2 83       	std	Z+2, r26	; 0x02
    4c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c50:	8e 01       	movw	r16, r28
    4c52:	00 58       	subi	r16, 0x80	; 128
    4c54:	1f 4f       	sbci	r17, 0xFF	; 255
    4c56:	fe 01       	movw	r30, r28
    4c58:	ec 57       	subi	r30, 0x7C	; 124
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	60 81       	ld	r22, Z
    4c5e:	71 81       	ldd	r23, Z+1	; 0x01
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	93 81       	ldd	r25, Z+3	; 0x03
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	4a ef       	ldi	r20, 0xFA	; 250
    4c6a:	54 e4       	ldi	r21, 0x44	; 68
    4c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	f8 01       	movw	r30, r16
    4c76:	80 83       	st	Z, r24
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	a2 83       	std	Z+2, r26	; 0x02
    4c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e0 58       	subi	r30, 0x80	; 128
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e8       	ldi	r20, 0x80	; 128
    4c92:	5f e3       	ldi	r21, 0x3F	; 63
    4c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c98:	88 23       	and	r24, r24
    4c9a:	44 f4       	brge	.+16     	; 0x4cac <display_seven_sagement+0x158>
		__ticks = 1;
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e2 58       	subi	r30, 0x82	; 130
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	91 83       	std	Z+1, r25	; 0x01
    4ca8:	80 83       	st	Z, r24
    4caa:	64 c0       	rjmp	.+200    	; 0x4d74 <display_seven_sagement+0x220>
	else if (__tmp > 65535)
    4cac:	fe 01       	movw	r30, r28
    4cae:	e0 58       	subi	r30, 0x80	; 128
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	60 81       	ld	r22, Z
    4cb4:	71 81       	ldd	r23, Z+1	; 0x01
    4cb6:	82 81       	ldd	r24, Z+2	; 0x02
    4cb8:	93 81       	ldd	r25, Z+3	; 0x03
    4cba:	20 e0       	ldi	r18, 0x00	; 0
    4cbc:	3f ef       	ldi	r19, 0xFF	; 255
    4cbe:	4f e7       	ldi	r20, 0x7F	; 127
    4cc0:	57 e4       	ldi	r21, 0x47	; 71
    4cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cc6:	18 16       	cp	r1, r24
    4cc8:	0c f0       	brlt	.+2      	; 0x4ccc <display_seven_sagement+0x178>
    4cca:	43 c0       	rjmp	.+134    	; 0x4d52 <display_seven_sagement+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ec 57       	subi	r30, 0x7C	; 124
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	60 81       	ld	r22, Z
    4cd4:	71 81       	ldd	r23, Z+1	; 0x01
    4cd6:	82 81       	ldd	r24, Z+2	; 0x02
    4cd8:	93 81       	ldd	r25, Z+3	; 0x03
    4cda:	20 e0       	ldi	r18, 0x00	; 0
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e2       	ldi	r20, 0x20	; 32
    4ce0:	51 e4       	ldi	r21, 0x41	; 65
    4ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce6:	dc 01       	movw	r26, r24
    4ce8:	cb 01       	movw	r24, r22
    4cea:	8e 01       	movw	r16, r28
    4cec:	02 58       	subi	r16, 0x82	; 130
    4cee:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	f8 01       	movw	r30, r16
    4cfe:	91 83       	std	Z+1, r25	; 0x01
    4d00:	80 83       	st	Z, r24
    4d02:	1f c0       	rjmp	.+62     	; 0x4d42 <display_seven_sagement+0x1ee>
    4d04:	fe 01       	movw	r30, r28
    4d06:	e4 58       	subi	r30, 0x84	; 132
    4d08:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0a:	88 ec       	ldi	r24, 0xC8	; 200
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	91 83       	std	Z+1, r25	; 0x01
    4d10:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4d12:	fe 01       	movw	r30, r28
    4d14:	e4 58       	subi	r30, 0x84	; 132
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	80 81       	ld	r24, Z
    4d1a:	91 81       	ldd	r25, Z+1	; 0x01
    4d1c:	01 97       	sbiw	r24, 0x01	; 1
    4d1e:	f1 f7       	brne	.-4      	; 0x4d1c <display_seven_sagement+0x1c8>
    4d20:	fe 01       	movw	r30, r28
    4d22:	e4 58       	subi	r30, 0x84	; 132
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d2a:	de 01       	movw	r26, r28
    4d2c:	a2 58       	subi	r26, 0x82	; 130
    4d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d30:	fe 01       	movw	r30, r28
    4d32:	e2 58       	subi	r30, 0x82	; 130
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	80 81       	ld	r24, Z
    4d38:	91 81       	ldd	r25, Z+1	; 0x01
    4d3a:	01 97       	sbiw	r24, 0x01	; 1
    4d3c:	11 96       	adiw	r26, 0x01	; 1
    4d3e:	9c 93       	st	X, r25
    4d40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d42:	fe 01       	movw	r30, r28
    4d44:	e2 58       	subi	r30, 0x82	; 130
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	80 81       	ld	r24, Z
    4d4a:	91 81       	ldd	r25, Z+1	; 0x01
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	d1 f6       	brne	.-76     	; 0x4d04 <display_seven_sagement+0x1b0>
    4d50:	4b c0       	rjmp	.+150    	; 0x4de8 <display_seven_sagement+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d52:	8e 01       	movw	r16, r28
    4d54:	02 58       	subi	r16, 0x82	; 130
    4d56:	1f 4f       	sbci	r17, 0xFF	; 255
    4d58:	fe 01       	movw	r30, r28
    4d5a:	e0 58       	subi	r30, 0x80	; 128
    4d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5e:	60 81       	ld	r22, Z
    4d60:	71 81       	ldd	r23, Z+1	; 0x01
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	93 81       	ldd	r25, Z+3	; 0x03
    4d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	f8 01       	movw	r30, r16
    4d70:	91 83       	std	Z+1, r25	; 0x01
    4d72:	80 83       	st	Z, r24
    4d74:	de 01       	movw	r26, r28
    4d76:	a6 58       	subi	r26, 0x86	; 134
    4d78:	bf 4f       	sbci	r27, 0xFF	; 255
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	e2 58       	subi	r30, 0x82	; 130
    4d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d80:	80 81       	ld	r24, Z
    4d82:	91 81       	ldd	r25, Z+1	; 0x01
    4d84:	11 96       	adiw	r26, 0x01	; 1
    4d86:	9c 93       	st	X, r25
    4d88:	8e 93       	st	-X, r24
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e6 58       	subi	r30, 0x86	; 134
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <display_seven_sagement+0x240>
    4d98:	fe 01       	movw	r30, r28
    4d9a:	e6 58       	subi	r30, 0x86	; 134
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	80 83       	st	Z, r24
    4da2:	22 c0       	rjmp	.+68     	; 0x4de8 <display_seven_sagement+0x294>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4da4:	8e 01       	movw	r16, r28
    4da6:	08 57       	subi	r16, 0x78	; 120
    4da8:	1f 4f       	sbci	r17, 0xFF	; 255
    4daa:	fe 01       	movw	r30, r28
    4dac:	e7 57       	subi	r30, 0x77	; 119
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	60 81       	ld	r22, Z
    4db2:	71 81       	ldd	r23, Z+1	; 0x01
    4db4:	82 81       	ldd	r24, Z+2	; 0x02
    4db6:	93 81       	ldd	r25, Z+3	; 0x03
    4db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	f8 01       	movw	r30, r16
    4dc2:	80 83       	st	Z, r24
    4dc4:	de 01       	movw	r26, r28
    4dc6:	a7 58       	subi	r26, 0x87	; 135
    4dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    4dca:	fe 01       	movw	r30, r28
    4dcc:	e8 57       	subi	r30, 0x78	; 120
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e7 58       	subi	r30, 0x87	; 135
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	8a 95       	dec	r24
    4dde:	f1 f7       	brne	.-4      	; 0x4ddc <display_seven_sagement+0x288>
    4de0:	fe 01       	movw	r30, r28
    4de2:	e7 58       	subi	r30, 0x87	; 135
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 83       	st	Z, r24
	_delay_us(200);
	PORTA=(PORTA & 0XC0) |(1<<PIN1) ;
    4de8:	ab e3       	ldi	r26, 0x3B	; 59
    4dea:	b0 e0       	ldi	r27, 0x00	; 0
    4dec:	eb e3       	ldi	r30, 0x3B	; 59
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	80 81       	ld	r24, Z
    4df2:	80 7c       	andi	r24, 0xC0	; 192
    4df4:	82 60       	ori	r24, 0x02	; 2
    4df6:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & sec2);
    4df8:	a5 e3       	ldi	r26, 0x35	; 53
    4dfa:	b0 e0       	ldi	r27, 0x00	; 0
    4dfc:	e5 e3       	ldi	r30, 0x35	; 53
    4dfe:	f0 e0       	ldi	r31, 0x00	; 0
    4e00:	80 81       	ld	r24, Z
    4e02:	98 2f       	mov	r25, r24
    4e04:	90 7f       	andi	r25, 0xF0	; 240
    4e06:	80 91 85 01 	lds	r24, 0x0185
    4e0a:	8f 70       	andi	r24, 0x0F	; 15
    4e0c:	89 2b       	or	r24, r25
    4e0e:	8c 93       	st	X, r24
    4e10:	fe 01       	movw	r30, r28
    4e12:	eb 58       	subi	r30, 0x8B	; 139
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	a8 e4       	ldi	r26, 0x48	; 72
    4e1c:	b3 e4       	ldi	r27, 0x43	; 67
    4e1e:	80 83       	st	Z, r24
    4e20:	91 83       	std	Z+1, r25	; 0x01
    4e22:	a2 83       	std	Z+2, r26	; 0x02
    4e24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e26:	8e 01       	movw	r16, r28
    4e28:	0f 58       	subi	r16, 0x8F	; 143
    4e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	eb 58       	subi	r30, 0x8B	; 139
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	60 81       	ld	r22, Z
    4e34:	71 81       	ldd	r23, Z+1	; 0x01
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	2b ea       	ldi	r18, 0xAB	; 171
    4e3c:	3a ea       	ldi	r19, 0xAA	; 170
    4e3e:	4a e2       	ldi	r20, 0x2A	; 42
    4e40:	50 e4       	ldi	r21, 0x40	; 64
    4e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	80 83       	st	Z, r24
    4e4e:	91 83       	std	Z+1, r25	; 0x01
    4e50:	a2 83       	std	Z+2, r26	; 0x02
    4e52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e54:	fe 01       	movw	r30, r28
    4e56:	ef 58       	subi	r30, 0x8F	; 143
    4e58:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5a:	60 81       	ld	r22, Z
    4e5c:	71 81       	ldd	r23, Z+1	; 0x01
    4e5e:	82 81       	ldd	r24, Z+2	; 0x02
    4e60:	93 81       	ldd	r25, Z+3	; 0x03
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	40 e8       	ldi	r20, 0x80	; 128
    4e68:	5f e3       	ldi	r21, 0x3F	; 63
    4e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e6e:	88 23       	and	r24, r24
    4e70:	34 f4       	brge	.+12     	; 0x4e7e <display_seven_sagement+0x32a>
		__ticks = 1;
    4e72:	fe 01       	movw	r30, r28
    4e74:	e0 59       	subi	r30, 0x90	; 144
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	80 83       	st	Z, r24
    4e7c:	e0 c0       	rjmp	.+448    	; 0x503e <display_seven_sagement+0x4ea>
	else if (__tmp > 255)
    4e7e:	fe 01       	movw	r30, r28
    4e80:	ef 58       	subi	r30, 0x8F	; 143
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	60 81       	ld	r22, Z
    4e86:	71 81       	ldd	r23, Z+1	; 0x01
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	4f e7       	ldi	r20, 0x7F	; 127
    4e92:	53 e4       	ldi	r21, 0x43	; 67
    4e94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e98:	18 16       	cp	r1, r24
    4e9a:	0c f0       	brlt	.+2      	; 0x4e9e <display_seven_sagement+0x34a>
    4e9c:	c0 c0       	rjmp	.+384    	; 0x501e <display_seven_sagement+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	eb 58       	subi	r30, 0x8B	; 139
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	60 81       	ld	r22, Z
    4ea6:	71 81       	ldd	r23, Z+1	; 0x01
    4ea8:	82 81       	ldd	r24, Z+2	; 0x02
    4eaa:	93 81       	ldd	r25, Z+3	; 0x03
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	4a e7       	ldi	r20, 0x7A	; 122
    4eb2:	54 e4       	ldi	r21, 0x44	; 68
    4eb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e4 59       	subi	r30, 0x94	; 148
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	80 83       	st	Z, r24
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	a2 83       	std	Z+2, r26	; 0x02
    4ec8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eca:	8e 01       	movw	r16, r28
    4ecc:	08 59       	subi	r16, 0x98	; 152
    4ece:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	e4 59       	subi	r30, 0x94	; 148
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	60 81       	ld	r22, Z
    4ed8:	71 81       	ldd	r23, Z+1	; 0x01
    4eda:	82 81       	ldd	r24, Z+2	; 0x02
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	4a ef       	ldi	r20, 0xFA	; 250
    4ee4:	54 e4       	ldi	r21, 0x44	; 68
    4ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	f8 01       	movw	r30, r16
    4ef0:	80 83       	st	Z, r24
    4ef2:	91 83       	std	Z+1, r25	; 0x01
    4ef4:	a2 83       	std	Z+2, r26	; 0x02
    4ef6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ef8:	fe 01       	movw	r30, r28
    4efa:	e8 59       	subi	r30, 0x98	; 152
    4efc:	ff 4f       	sbci	r31, 0xFF	; 255
    4efe:	60 81       	ld	r22, Z
    4f00:	71 81       	ldd	r23, Z+1	; 0x01
    4f02:	82 81       	ldd	r24, Z+2	; 0x02
    4f04:	93 81       	ldd	r25, Z+3	; 0x03
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	40 e8       	ldi	r20, 0x80	; 128
    4f0c:	5f e3       	ldi	r21, 0x3F	; 63
    4f0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f12:	88 23       	and	r24, r24
    4f14:	44 f4       	brge	.+16     	; 0x4f26 <display_seven_sagement+0x3d2>
		__ticks = 1;
    4f16:	fe 01       	movw	r30, r28
    4f18:	ea 59       	subi	r30, 0x9A	; 154
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	91 83       	std	Z+1, r25	; 0x01
    4f22:	80 83       	st	Z, r24
    4f24:	64 c0       	rjmp	.+200    	; 0x4fee <display_seven_sagement+0x49a>
	else if (__tmp > 65535)
    4f26:	fe 01       	movw	r30, r28
    4f28:	e8 59       	subi	r30, 0x98	; 152
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	60 81       	ld	r22, Z
    4f2e:	71 81       	ldd	r23, Z+1	; 0x01
    4f30:	82 81       	ldd	r24, Z+2	; 0x02
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	3f ef       	ldi	r19, 0xFF	; 255
    4f38:	4f e7       	ldi	r20, 0x7F	; 127
    4f3a:	57 e4       	ldi	r21, 0x47	; 71
    4f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f40:	18 16       	cp	r1, r24
    4f42:	0c f0       	brlt	.+2      	; 0x4f46 <display_seven_sagement+0x3f2>
    4f44:	43 c0       	rjmp	.+134    	; 0x4fcc <display_seven_sagement+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f46:	fe 01       	movw	r30, r28
    4f48:	e4 59       	subi	r30, 0x94	; 148
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	60 81       	ld	r22, Z
    4f4e:	71 81       	ldd	r23, Z+1	; 0x01
    4f50:	82 81       	ldd	r24, Z+2	; 0x02
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	40 e2       	ldi	r20, 0x20	; 32
    4f5a:	51 e4       	ldi	r21, 0x41	; 65
    4f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	8e 01       	movw	r16, r28
    4f66:	0a 59       	subi	r16, 0x9A	; 154
    4f68:	1f 4f       	sbci	r17, 0xFF	; 255
    4f6a:	bc 01       	movw	r22, r24
    4f6c:	cd 01       	movw	r24, r26
    4f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f72:	dc 01       	movw	r26, r24
    4f74:	cb 01       	movw	r24, r22
    4f76:	f8 01       	movw	r30, r16
    4f78:	91 83       	std	Z+1, r25	; 0x01
    4f7a:	80 83       	st	Z, r24
    4f7c:	1f c0       	rjmp	.+62     	; 0x4fbc <display_seven_sagement+0x468>
    4f7e:	fe 01       	movw	r30, r28
    4f80:	ec 59       	subi	r30, 0x9C	; 156
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	88 ec       	ldi	r24, 0xC8	; 200
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	91 83       	std	Z+1, r25	; 0x01
    4f8a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f8c:	fe 01       	movw	r30, r28
    4f8e:	ec 59       	subi	r30, 0x9C	; 156
    4f90:	ff 4f       	sbci	r31, 0xFF	; 255
    4f92:	80 81       	ld	r24, Z
    4f94:	91 81       	ldd	r25, Z+1	; 0x01
    4f96:	01 97       	sbiw	r24, 0x01	; 1
    4f98:	f1 f7       	brne	.-4      	; 0x4f96 <display_seven_sagement+0x442>
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	ec 59       	subi	r30, 0x9C	; 156
    4f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa0:	91 83       	std	Z+1, r25	; 0x01
    4fa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fa4:	de 01       	movw	r26, r28
    4fa6:	aa 59       	subi	r26, 0x9A	; 154
    4fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    4faa:	fe 01       	movw	r30, r28
    4fac:	ea 59       	subi	r30, 0x9A	; 154
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	80 81       	ld	r24, Z
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	11 96       	adiw	r26, 0x01	; 1
    4fb8:	9c 93       	st	X, r25
    4fba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fbc:	fe 01       	movw	r30, r28
    4fbe:	ea 59       	subi	r30, 0x9A	; 154
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	80 81       	ld	r24, Z
    4fc4:	91 81       	ldd	r25, Z+1	; 0x01
    4fc6:	00 97       	sbiw	r24, 0x00	; 0
    4fc8:	d1 f6       	brne	.-76     	; 0x4f7e <display_seven_sagement+0x42a>
    4fca:	4b c0       	rjmp	.+150    	; 0x5062 <display_seven_sagement+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fcc:	8e 01       	movw	r16, r28
    4fce:	0a 59       	subi	r16, 0x9A	; 154
    4fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	e8 59       	subi	r30, 0x98	; 152
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	60 81       	ld	r22, Z
    4fda:	71 81       	ldd	r23, Z+1	; 0x01
    4fdc:	82 81       	ldd	r24, Z+2	; 0x02
    4fde:	93 81       	ldd	r25, Z+3	; 0x03
    4fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe4:	dc 01       	movw	r26, r24
    4fe6:	cb 01       	movw	r24, r22
    4fe8:	f8 01       	movw	r30, r16
    4fea:	91 83       	std	Z+1, r25	; 0x01
    4fec:	80 83       	st	Z, r24
    4fee:	de 01       	movw	r26, r28
    4ff0:	ae 59       	subi	r26, 0x9E	; 158
    4ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	ea 59       	subi	r30, 0x9A	; 154
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	11 96       	adiw	r26, 0x01	; 1
    5000:	9c 93       	st	X, r25
    5002:	8e 93       	st	-X, r24
    5004:	fe 01       	movw	r30, r28
    5006:	ee 59       	subi	r30, 0x9E	; 158
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	80 81       	ld	r24, Z
    500c:	91 81       	ldd	r25, Z+1	; 0x01
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	f1 f7       	brne	.-4      	; 0x500e <display_seven_sagement+0x4ba>
    5012:	fe 01       	movw	r30, r28
    5014:	ee 59       	subi	r30, 0x9E	; 158
    5016:	ff 4f       	sbci	r31, 0xFF	; 255
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	80 83       	st	Z, r24
    501c:	22 c0       	rjmp	.+68     	; 0x5062 <display_seven_sagement+0x50e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    501e:	8e 01       	movw	r16, r28
    5020:	00 59       	subi	r16, 0x90	; 144
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
    5024:	fe 01       	movw	r30, r28
    5026:	ef 58       	subi	r30, 0x8F	; 143
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	60 81       	ld	r22, Z
    502c:	71 81       	ldd	r23, Z+1	; 0x01
    502e:	82 81       	ldd	r24, Z+2	; 0x02
    5030:	93 81       	ldd	r25, Z+3	; 0x03
    5032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	f8 01       	movw	r30, r16
    503c:	80 83       	st	Z, r24
    503e:	de 01       	movw	r26, r28
    5040:	af 59       	subi	r26, 0x9F	; 159
    5042:	bf 4f       	sbci	r27, 0xFF	; 255
    5044:	fe 01       	movw	r30, r28
    5046:	e0 59       	subi	r30, 0x90	; 144
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    504e:	fe 01       	movw	r30, r28
    5050:	ef 59       	subi	r30, 0x9F	; 159
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	80 81       	ld	r24, Z
    5056:	8a 95       	dec	r24
    5058:	f1 f7       	brne	.-4      	; 0x5056 <display_seven_sagement+0x502>
    505a:	fe 01       	movw	r30, r28
    505c:	ef 59       	subi	r30, 0x9F	; 159
    505e:	ff 4f       	sbci	r31, 0xFF	; 255
    5060:	80 83       	st	Z, r24
	_delay_us(200);
	PORTA=(PORTA & 0XC0) |(1<<PIN2) ;
    5062:	ab e3       	ldi	r26, 0x3B	; 59
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	eb e3       	ldi	r30, 0x3B	; 59
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	80 81       	ld	r24, Z
    506c:	80 7c       	andi	r24, 0xC0	; 192
    506e:	84 60       	ori	r24, 0x04	; 4
    5070:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & min1);
    5072:	a5 e3       	ldi	r26, 0x35	; 53
    5074:	b0 e0       	ldi	r27, 0x00	; 0
    5076:	e5 e3       	ldi	r30, 0x35	; 53
    5078:	f0 e0       	ldi	r31, 0x00	; 0
    507a:	80 81       	ld	r24, Z
    507c:	98 2f       	mov	r25, r24
    507e:	90 7f       	andi	r25, 0xF0	; 240
    5080:	80 91 86 01 	lds	r24, 0x0186
    5084:	8f 70       	andi	r24, 0x0F	; 15
    5086:	89 2b       	or	r24, r25
    5088:	8c 93       	st	X, r24
    508a:	fe 01       	movw	r30, r28
    508c:	e3 5a       	subi	r30, 0xA3	; 163
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	a8 e4       	ldi	r26, 0x48	; 72
    5096:	b3 e4       	ldi	r27, 0x43	; 67
    5098:	80 83       	st	Z, r24
    509a:	91 83       	std	Z+1, r25	; 0x01
    509c:	a2 83       	std	Z+2, r26	; 0x02
    509e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    50a0:	8e 01       	movw	r16, r28
    50a2:	07 5a       	subi	r16, 0xA7	; 167
    50a4:	1f 4f       	sbci	r17, 0xFF	; 255
    50a6:	fe 01       	movw	r30, r28
    50a8:	e3 5a       	subi	r30, 0xA3	; 163
    50aa:	ff 4f       	sbci	r31, 0xFF	; 255
    50ac:	60 81       	ld	r22, Z
    50ae:	71 81       	ldd	r23, Z+1	; 0x01
    50b0:	82 81       	ldd	r24, Z+2	; 0x02
    50b2:	93 81       	ldd	r25, Z+3	; 0x03
    50b4:	2b ea       	ldi	r18, 0xAB	; 171
    50b6:	3a ea       	ldi	r19, 0xAA	; 170
    50b8:	4a e2       	ldi	r20, 0x2A	; 42
    50ba:	50 e4       	ldi	r21, 0x40	; 64
    50bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	f8 01       	movw	r30, r16
    50c6:	80 83       	st	Z, r24
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	a2 83       	std	Z+2, r26	; 0x02
    50cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ce:	fe 01       	movw	r30, r28
    50d0:	e7 5a       	subi	r30, 0xA7	; 167
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	60 81       	ld	r22, Z
    50d6:	71 81       	ldd	r23, Z+1	; 0x01
    50d8:	82 81       	ldd	r24, Z+2	; 0x02
    50da:	93 81       	ldd	r25, Z+3	; 0x03
    50dc:	20 e0       	ldi	r18, 0x00	; 0
    50de:	30 e0       	ldi	r19, 0x00	; 0
    50e0:	40 e8       	ldi	r20, 0x80	; 128
    50e2:	5f e3       	ldi	r21, 0x3F	; 63
    50e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50e8:	88 23       	and	r24, r24
    50ea:	34 f4       	brge	.+12     	; 0x50f8 <display_seven_sagement+0x5a4>
		__ticks = 1;
    50ec:	fe 01       	movw	r30, r28
    50ee:	e8 5a       	subi	r30, 0xA8	; 168
    50f0:	ff 4f       	sbci	r31, 0xFF	; 255
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	80 83       	st	Z, r24
    50f6:	e0 c0       	rjmp	.+448    	; 0x52b8 <display_seven_sagement+0x764>
	else if (__tmp > 255)
    50f8:	fe 01       	movw	r30, r28
    50fa:	e7 5a       	subi	r30, 0xA7	; 167
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	60 81       	ld	r22, Z
    5100:	71 81       	ldd	r23, Z+1	; 0x01
    5102:	82 81       	ldd	r24, Z+2	; 0x02
    5104:	93 81       	ldd	r25, Z+3	; 0x03
    5106:	20 e0       	ldi	r18, 0x00	; 0
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	4f e7       	ldi	r20, 0x7F	; 127
    510c:	53 e4       	ldi	r21, 0x43	; 67
    510e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5112:	18 16       	cp	r1, r24
    5114:	0c f0       	brlt	.+2      	; 0x5118 <display_seven_sagement+0x5c4>
    5116:	c0 c0       	rjmp	.+384    	; 0x5298 <display_seven_sagement+0x744>
	{
		_delay_ms(__us / 1000.0);
    5118:	fe 01       	movw	r30, r28
    511a:	e3 5a       	subi	r30, 0xA3	; 163
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	4a e7       	ldi	r20, 0x7A	; 122
    512c:	54 e4       	ldi	r21, 0x44	; 68
    512e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	fe 01       	movw	r30, r28
    5138:	ec 5a       	subi	r30, 0xAC	; 172
    513a:	ff 4f       	sbci	r31, 0xFF	; 255
    513c:	80 83       	st	Z, r24
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	a2 83       	std	Z+2, r26	; 0x02
    5142:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5144:	8e 01       	movw	r16, r28
    5146:	00 5b       	subi	r16, 0xB0	; 176
    5148:	1f 4f       	sbci	r17, 0xFF	; 255
    514a:	fe 01       	movw	r30, r28
    514c:	ec 5a       	subi	r30, 0xAC	; 172
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	60 81       	ld	r22, Z
    5152:	71 81       	ldd	r23, Z+1	; 0x01
    5154:	82 81       	ldd	r24, Z+2	; 0x02
    5156:	93 81       	ldd	r25, Z+3	; 0x03
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	4a ef       	ldi	r20, 0xFA	; 250
    515e:	54 e4       	ldi	r21, 0x44	; 68
    5160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5164:	dc 01       	movw	r26, r24
    5166:	cb 01       	movw	r24, r22
    5168:	f8 01       	movw	r30, r16
    516a:	80 83       	st	Z, r24
    516c:	91 83       	std	Z+1, r25	; 0x01
    516e:	a2 83       	std	Z+2, r26	; 0x02
    5170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5172:	fe 01       	movw	r30, r28
    5174:	e0 5b       	subi	r30, 0xB0	; 176
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	5f e3       	ldi	r21, 0x3F	; 63
    5188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    518c:	88 23       	and	r24, r24
    518e:	44 f4       	brge	.+16     	; 0x51a0 <display_seven_sagement+0x64c>
		__ticks = 1;
    5190:	fe 01       	movw	r30, r28
    5192:	e2 5b       	subi	r30, 0xB2	; 178
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	80 83       	st	Z, r24
    519e:	64 c0       	rjmp	.+200    	; 0x5268 <display_seven_sagement+0x714>
	else if (__tmp > 65535)
    51a0:	fe 01       	movw	r30, r28
    51a2:	e0 5b       	subi	r30, 0xB0	; 176
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	60 81       	ld	r22, Z
    51a8:	71 81       	ldd	r23, Z+1	; 0x01
    51aa:	82 81       	ldd	r24, Z+2	; 0x02
    51ac:	93 81       	ldd	r25, Z+3	; 0x03
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	3f ef       	ldi	r19, 0xFF	; 255
    51b2:	4f e7       	ldi	r20, 0x7F	; 127
    51b4:	57 e4       	ldi	r21, 0x47	; 71
    51b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ba:	18 16       	cp	r1, r24
    51bc:	0c f0       	brlt	.+2      	; 0x51c0 <display_seven_sagement+0x66c>
    51be:	43 c0       	rjmp	.+134    	; 0x5246 <display_seven_sagement+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c0:	fe 01       	movw	r30, r28
    51c2:	ec 5a       	subi	r30, 0xAC	; 172
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	60 81       	ld	r22, Z
    51c8:	71 81       	ldd	r23, Z+1	; 0x01
    51ca:	82 81       	ldd	r24, Z+2	; 0x02
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	40 e2       	ldi	r20, 0x20	; 32
    51d4:	51 e4       	ldi	r21, 0x41	; 65
    51d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	8e 01       	movw	r16, r28
    51e0:	02 5b       	subi	r16, 0xB2	; 178
    51e2:	1f 4f       	sbci	r17, 0xFF	; 255
    51e4:	bc 01       	movw	r22, r24
    51e6:	cd 01       	movw	r24, r26
    51e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	f8 01       	movw	r30, r16
    51f2:	91 83       	std	Z+1, r25	; 0x01
    51f4:	80 83       	st	Z, r24
    51f6:	1f c0       	rjmp	.+62     	; 0x5236 <display_seven_sagement+0x6e2>
    51f8:	fe 01       	movw	r30, r28
    51fa:	e4 5b       	subi	r30, 0xB4	; 180
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	88 ec       	ldi	r24, 0xC8	; 200
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	91 83       	std	Z+1, r25	; 0x01
    5204:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5206:	fe 01       	movw	r30, r28
    5208:	e4 5b       	subi	r30, 0xB4	; 180
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	80 81       	ld	r24, Z
    520e:	91 81       	ldd	r25, Z+1	; 0x01
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	f1 f7       	brne	.-4      	; 0x5210 <display_seven_sagement+0x6bc>
    5214:	fe 01       	movw	r30, r28
    5216:	e4 5b       	subi	r30, 0xB4	; 180
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	91 83       	std	Z+1, r25	; 0x01
    521c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    521e:	de 01       	movw	r26, r28
    5220:	a2 5b       	subi	r26, 0xB2	; 178
    5222:	bf 4f       	sbci	r27, 0xFF	; 255
    5224:	fe 01       	movw	r30, r28
    5226:	e2 5b       	subi	r30, 0xB2	; 178
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	80 81       	ld	r24, Z
    522c:	91 81       	ldd	r25, Z+1	; 0x01
    522e:	01 97       	sbiw	r24, 0x01	; 1
    5230:	11 96       	adiw	r26, 0x01	; 1
    5232:	9c 93       	st	X, r25
    5234:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5236:	fe 01       	movw	r30, r28
    5238:	e2 5b       	subi	r30, 0xB2	; 178
    523a:	ff 4f       	sbci	r31, 0xFF	; 255
    523c:	80 81       	ld	r24, Z
    523e:	91 81       	ldd	r25, Z+1	; 0x01
    5240:	00 97       	sbiw	r24, 0x00	; 0
    5242:	d1 f6       	brne	.-76     	; 0x51f8 <display_seven_sagement+0x6a4>
    5244:	4b c0       	rjmp	.+150    	; 0x52dc <display_seven_sagement+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5246:	8e 01       	movw	r16, r28
    5248:	02 5b       	subi	r16, 0xB2	; 178
    524a:	1f 4f       	sbci	r17, 0xFF	; 255
    524c:	fe 01       	movw	r30, r28
    524e:	e0 5b       	subi	r30, 0xB0	; 176
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	60 81       	ld	r22, Z
    5254:	71 81       	ldd	r23, Z+1	; 0x01
    5256:	82 81       	ldd	r24, Z+2	; 0x02
    5258:	93 81       	ldd	r25, Z+3	; 0x03
    525a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	f8 01       	movw	r30, r16
    5264:	91 83       	std	Z+1, r25	; 0x01
    5266:	80 83       	st	Z, r24
    5268:	de 01       	movw	r26, r28
    526a:	a6 5b       	subi	r26, 0xB6	; 182
    526c:	bf 4f       	sbci	r27, 0xFF	; 255
    526e:	fe 01       	movw	r30, r28
    5270:	e2 5b       	subi	r30, 0xB2	; 178
    5272:	ff 4f       	sbci	r31, 0xFF	; 255
    5274:	80 81       	ld	r24, Z
    5276:	91 81       	ldd	r25, Z+1	; 0x01
    5278:	11 96       	adiw	r26, 0x01	; 1
    527a:	9c 93       	st	X, r25
    527c:	8e 93       	st	-X, r24
    527e:	fe 01       	movw	r30, r28
    5280:	e6 5b       	subi	r30, 0xB6	; 182
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	80 81       	ld	r24, Z
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	f1 f7       	brne	.-4      	; 0x5288 <display_seven_sagement+0x734>
    528c:	fe 01       	movw	r30, r28
    528e:	e6 5b       	subi	r30, 0xB6	; 182
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	91 83       	std	Z+1, r25	; 0x01
    5294:	80 83       	st	Z, r24
    5296:	22 c0       	rjmp	.+68     	; 0x52dc <display_seven_sagement+0x788>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5298:	8e 01       	movw	r16, r28
    529a:	08 5a       	subi	r16, 0xA8	; 168
    529c:	1f 4f       	sbci	r17, 0xFF	; 255
    529e:	fe 01       	movw	r30, r28
    52a0:	e7 5a       	subi	r30, 0xA7	; 167
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	60 81       	ld	r22, Z
    52a6:	71 81       	ldd	r23, Z+1	; 0x01
    52a8:	82 81       	ldd	r24, Z+2	; 0x02
    52aa:	93 81       	ldd	r25, Z+3	; 0x03
    52ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	f8 01       	movw	r30, r16
    52b6:	80 83       	st	Z, r24
    52b8:	de 01       	movw	r26, r28
    52ba:	a7 5b       	subi	r26, 0xB7	; 183
    52bc:	bf 4f       	sbci	r27, 0xFF	; 255
    52be:	fe 01       	movw	r30, r28
    52c0:	e8 5a       	subi	r30, 0xA8	; 168
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	80 81       	ld	r24, Z
    52c6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    52c8:	fe 01       	movw	r30, r28
    52ca:	e7 5b       	subi	r30, 0xB7	; 183
    52cc:	ff 4f       	sbci	r31, 0xFF	; 255
    52ce:	80 81       	ld	r24, Z
    52d0:	8a 95       	dec	r24
    52d2:	f1 f7       	brne	.-4      	; 0x52d0 <display_seven_sagement+0x77c>
    52d4:	fe 01       	movw	r30, r28
    52d6:	e7 5b       	subi	r30, 0xB7	; 183
    52d8:	ff 4f       	sbci	r31, 0xFF	; 255
    52da:	80 83       	st	Z, r24
	_delay_us(200);
	PORTA=(PORTA & 0XC0) |(1<<PIN3) ;
    52dc:	ab e3       	ldi	r26, 0x3B	; 59
    52de:	b0 e0       	ldi	r27, 0x00	; 0
    52e0:	eb e3       	ldi	r30, 0x3B	; 59
    52e2:	f0 e0       	ldi	r31, 0x00	; 0
    52e4:	80 81       	ld	r24, Z
    52e6:	80 7c       	andi	r24, 0xC0	; 192
    52e8:	88 60       	ori	r24, 0x08	; 8
    52ea:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & min2);
    52ec:	a5 e3       	ldi	r26, 0x35	; 53
    52ee:	b0 e0       	ldi	r27, 0x00	; 0
    52f0:	e5 e3       	ldi	r30, 0x35	; 53
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	80 81       	ld	r24, Z
    52f6:	98 2f       	mov	r25, r24
    52f8:	90 7f       	andi	r25, 0xF0	; 240
    52fa:	80 91 87 01 	lds	r24, 0x0187
    52fe:	8f 70       	andi	r24, 0x0F	; 15
    5300:	89 2b       	or	r24, r25
    5302:	8c 93       	st	X, r24
    5304:	fe 01       	movw	r30, r28
    5306:	eb 5b       	subi	r30, 0xBB	; 187
    5308:	ff 4f       	sbci	r31, 0xFF	; 255
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	a8 e4       	ldi	r26, 0x48	; 72
    5310:	b3 e4       	ldi	r27, 0x43	; 67
    5312:	80 83       	st	Z, r24
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	a2 83       	std	Z+2, r26	; 0x02
    5318:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    531a:	8e 01       	movw	r16, r28
    531c:	0f 5b       	subi	r16, 0xBF	; 191
    531e:	1f 4f       	sbci	r17, 0xFF	; 255
    5320:	fe 01       	movw	r30, r28
    5322:	eb 5b       	subi	r30, 0xBB	; 187
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	60 81       	ld	r22, Z
    5328:	71 81       	ldd	r23, Z+1	; 0x01
    532a:	82 81       	ldd	r24, Z+2	; 0x02
    532c:	93 81       	ldd	r25, Z+3	; 0x03
    532e:	2b ea       	ldi	r18, 0xAB	; 171
    5330:	3a ea       	ldi	r19, 0xAA	; 170
    5332:	4a e2       	ldi	r20, 0x2A	; 42
    5334:	50 e4       	ldi	r21, 0x40	; 64
    5336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    533a:	dc 01       	movw	r26, r24
    533c:	cb 01       	movw	r24, r22
    533e:	f8 01       	movw	r30, r16
    5340:	80 83       	st	Z, r24
    5342:	91 83       	std	Z+1, r25	; 0x01
    5344:	a2 83       	std	Z+2, r26	; 0x02
    5346:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5348:	fe 01       	movw	r30, r28
    534a:	ef 5b       	subi	r30, 0xBF	; 191
    534c:	ff 4f       	sbci	r31, 0xFF	; 255
    534e:	60 81       	ld	r22, Z
    5350:	71 81       	ldd	r23, Z+1	; 0x01
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	93 81       	ldd	r25, Z+3	; 0x03
    5356:	20 e0       	ldi	r18, 0x00	; 0
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	40 e8       	ldi	r20, 0x80	; 128
    535c:	5f e3       	ldi	r21, 0x3F	; 63
    535e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5362:	88 23       	and	r24, r24
    5364:	34 f4       	brge	.+12     	; 0x5372 <display_seven_sagement+0x81e>
		__ticks = 1;
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	fe 01       	movw	r30, r28
    536a:	e0 5c       	subi	r30, 0xC0	; 192
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	80 83       	st	Z, r24
    5370:	9d c0       	rjmp	.+314    	; 0x54ac <display_seven_sagement+0x958>
	else if (__tmp > 255)
    5372:	fe 01       	movw	r30, r28
    5374:	ef 5b       	subi	r30, 0xBF	; 191
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	60 81       	ld	r22, Z
    537a:	71 81       	ldd	r23, Z+1	; 0x01
    537c:	82 81       	ldd	r24, Z+2	; 0x02
    537e:	93 81       	ldd	r25, Z+3	; 0x03
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	4f e7       	ldi	r20, 0x7F	; 127
    5386:	53 e4       	ldi	r21, 0x43	; 67
    5388:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    538c:	18 16       	cp	r1, r24
    538e:	0c f0       	brlt	.+2      	; 0x5392 <display_seven_sagement+0x83e>
    5390:	7e c0       	rjmp	.+252    	; 0x548e <display_seven_sagement+0x93a>
	{
		_delay_ms(__us / 1000.0);
    5392:	fe 01       	movw	r30, r28
    5394:	eb 5b       	subi	r30, 0xBB	; 187
    5396:	ff 4f       	sbci	r31, 0xFF	; 255
    5398:	60 81       	ld	r22, Z
    539a:	71 81       	ldd	r23, Z+1	; 0x01
    539c:	82 81       	ldd	r24, Z+2	; 0x02
    539e:	93 81       	ldd	r25, Z+3	; 0x03
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	4a e7       	ldi	r20, 0x7A	; 122
    53a6:	54 e4       	ldi	r21, 0x44	; 68
    53a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	8c af       	std	Y+60, r24	; 0x3c
    53b2:	9d af       	std	Y+61, r25	; 0x3d
    53b4:	ae af       	std	Y+62, r26	; 0x3e
    53b6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    53ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    53bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    53be:	9f ad       	ldd	r25, Y+63	; 0x3f
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	4a ef       	ldi	r20, 0xFA	; 250
    53c6:	54 e4       	ldi	r21, 0x44	; 68
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	88 af       	std	Y+56, r24	; 0x38
    53d2:	99 af       	std	Y+57, r25	; 0x39
    53d4:	aa af       	std	Y+58, r26	; 0x3a
    53d6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    53d8:	68 ad       	ldd	r22, Y+56	; 0x38
    53da:	79 ad       	ldd	r23, Y+57	; 0x39
    53dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    53de:	9b ad       	ldd	r25, Y+59	; 0x3b
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e8       	ldi	r20, 0x80	; 128
    53e6:	5f e3       	ldi	r21, 0x3F	; 63
    53e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53ec:	88 23       	and	r24, r24
    53ee:	2c f4       	brge	.+10     	; 0x53fa <display_seven_sagement+0x8a6>
		__ticks = 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9f ab       	std	Y+55, r25	; 0x37
    53f6:	8e ab       	std	Y+54, r24	; 0x36
    53f8:	3f c0       	rjmp	.+126    	; 0x5478 <display_seven_sagement+0x924>
	else if (__tmp > 65535)
    53fa:	68 ad       	ldd	r22, Y+56	; 0x38
    53fc:	79 ad       	ldd	r23, Y+57	; 0x39
    53fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    5400:	9b ad       	ldd	r25, Y+59	; 0x3b
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	3f ef       	ldi	r19, 0xFF	; 255
    5406:	4f e7       	ldi	r20, 0x7F	; 127
    5408:	57 e4       	ldi	r21, 0x47	; 71
    540a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	4c f5       	brge	.+82     	; 0x5464 <display_seven_sagement+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5412:	6c ad       	ldd	r22, Y+60	; 0x3c
    5414:	7d ad       	ldd	r23, Y+61	; 0x3d
    5416:	8e ad       	ldd	r24, Y+62	; 0x3e
    5418:	9f ad       	ldd	r25, Y+63	; 0x3f
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9f ab       	std	Y+55, r25	; 0x37
    5438:	8e ab       	std	Y+54, r24	; 0x36
    543a:	0f c0       	rjmp	.+30     	; 0x545a <display_seven_sagement+0x906>
    543c:	88 ec       	ldi	r24, 0xC8	; 200
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	9d ab       	std	Y+53, r25	; 0x35
    5442:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5444:	8c a9       	ldd	r24, Y+52	; 0x34
    5446:	9d a9       	ldd	r25, Y+53	; 0x35
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <display_seven_sagement+0x8f4>
    544c:	9d ab       	std	Y+53, r25	; 0x35
    544e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5450:	8e a9       	ldd	r24, Y+54	; 0x36
    5452:	9f a9       	ldd	r25, Y+55	; 0x37
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	9f ab       	std	Y+55, r25	; 0x37
    5458:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545a:	8e a9       	ldd	r24, Y+54	; 0x36
    545c:	9f a9       	ldd	r25, Y+55	; 0x37
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	69 f7       	brne	.-38     	; 0x543c <display_seven_sagement+0x8e8>
    5462:	2d c0       	rjmp	.+90     	; 0x54be <display_seven_sagement+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5464:	68 ad       	ldd	r22, Y+56	; 0x38
    5466:	79 ad       	ldd	r23, Y+57	; 0x39
    5468:	8a ad       	ldd	r24, Y+58	; 0x3a
    546a:	9b ad       	ldd	r25, Y+59	; 0x3b
    546c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9f ab       	std	Y+55, r25	; 0x37
    5476:	8e ab       	std	Y+54, r24	; 0x36
    5478:	8e a9       	ldd	r24, Y+54	; 0x36
    547a:	9f a9       	ldd	r25, Y+55	; 0x37
    547c:	9b ab       	std	Y+51, r25	; 0x33
    547e:	8a ab       	std	Y+50, r24	; 0x32
    5480:	8a a9       	ldd	r24, Y+50	; 0x32
    5482:	9b a9       	ldd	r25, Y+51	; 0x33
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <display_seven_sagement+0x930>
    5488:	9b ab       	std	Y+51, r25	; 0x33
    548a:	8a ab       	std	Y+50, r24	; 0x32
    548c:	18 c0       	rjmp	.+48     	; 0x54be <display_seven_sagement+0x96a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    548e:	fe 01       	movw	r30, r28
    5490:	ef 5b       	subi	r30, 0xBF	; 191
    5492:	ff 4f       	sbci	r31, 0xFF	; 255
    5494:	60 81       	ld	r22, Z
    5496:	71 81       	ldd	r23, Z+1	; 0x01
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	93 81       	ldd	r25, Z+3	; 0x03
    549c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	fe 01       	movw	r30, r28
    54a6:	e0 5c       	subi	r30, 0xC0	; 192
    54a8:	ff 4f       	sbci	r31, 0xFF	; 255
    54aa:	80 83       	st	Z, r24
    54ac:	fe 01       	movw	r30, r28
    54ae:	e0 5c       	subi	r30, 0xC0	; 192
    54b0:	ff 4f       	sbci	r31, 0xFF	; 255
    54b2:	80 81       	ld	r24, Z
    54b4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    54b6:	89 a9       	ldd	r24, Y+49	; 0x31
    54b8:	8a 95       	dec	r24
    54ba:	f1 f7       	brne	.-4      	; 0x54b8 <display_seven_sagement+0x964>
    54bc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	PORTA=(PORTA & 0XC0) |(1<<PIN4) ;
    54be:	ab e3       	ldi	r26, 0x3B	; 59
    54c0:	b0 e0       	ldi	r27, 0x00	; 0
    54c2:	eb e3       	ldi	r30, 0x3B	; 59
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	80 7c       	andi	r24, 0xC0	; 192
    54ca:	80 61       	ori	r24, 0x10	; 16
    54cc:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & hour1);
    54ce:	a5 e3       	ldi	r26, 0x35	; 53
    54d0:	b0 e0       	ldi	r27, 0x00	; 0
    54d2:	e5 e3       	ldi	r30, 0x35	; 53
    54d4:	f0 e0       	ldi	r31, 0x00	; 0
    54d6:	80 81       	ld	r24, Z
    54d8:	98 2f       	mov	r25, r24
    54da:	90 7f       	andi	r25, 0xF0	; 240
    54dc:	80 91 88 01 	lds	r24, 0x0188
    54e0:	8f 70       	andi	r24, 0x0F	; 15
    54e2:	89 2b       	or	r24, r25
    54e4:	8c 93       	st	X, r24
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	a8 e4       	ldi	r26, 0x48	; 72
    54ec:	b3 e4       	ldi	r27, 0x43	; 67
    54ee:	8d a7       	std	Y+45, r24	; 0x2d
    54f0:	9e a7       	std	Y+46, r25	; 0x2e
    54f2:	af a7       	std	Y+47, r26	; 0x2f
    54f4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    54f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    54f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    54fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    54fc:	98 a9       	ldd	r25, Y+48	; 0x30
    54fe:	2b ea       	ldi	r18, 0xAB	; 171
    5500:	3a ea       	ldi	r19, 0xAA	; 170
    5502:	4a e2       	ldi	r20, 0x2A	; 42
    5504:	50 e4       	ldi	r21, 0x40	; 64
    5506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550a:	dc 01       	movw	r26, r24
    550c:	cb 01       	movw	r24, r22
    550e:	89 a7       	std	Y+41, r24	; 0x29
    5510:	9a a7       	std	Y+42, r25	; 0x2a
    5512:	ab a7       	std	Y+43, r26	; 0x2b
    5514:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5516:	69 a5       	ldd	r22, Y+41	; 0x29
    5518:	7a a5       	ldd	r23, Y+42	; 0x2a
    551a:	8b a5       	ldd	r24, Y+43	; 0x2b
    551c:	9c a5       	ldd	r25, Y+44	; 0x2c
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	40 e8       	ldi	r20, 0x80	; 128
    5524:	5f e3       	ldi	r21, 0x3F	; 63
    5526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    552a:	88 23       	and	r24, r24
    552c:	1c f4       	brge	.+6      	; 0x5534 <display_seven_sagement+0x9e0>
		__ticks = 1;
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	88 a7       	std	Y+40, r24	; 0x28
    5532:	91 c0       	rjmp	.+290    	; 0x5656 <display_seven_sagement+0xb02>
	else if (__tmp > 255)
    5534:	69 a5       	ldd	r22, Y+41	; 0x29
    5536:	7a a5       	ldd	r23, Y+42	; 0x2a
    5538:	8b a5       	ldd	r24, Y+43	; 0x2b
    553a:	9c a5       	ldd	r25, Y+44	; 0x2c
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	4f e7       	ldi	r20, 0x7F	; 127
    5542:	53 e4       	ldi	r21, 0x43	; 67
    5544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5548:	18 16       	cp	r1, r24
    554a:	0c f0       	brlt	.+2      	; 0x554e <display_seven_sagement+0x9fa>
    554c:	7b c0       	rjmp	.+246    	; 0x5644 <display_seven_sagement+0xaf0>
	{
		_delay_ms(__us / 1000.0);
    554e:	6d a5       	ldd	r22, Y+45	; 0x2d
    5550:	7e a5       	ldd	r23, Y+46	; 0x2e
    5552:	8f a5       	ldd	r24, Y+47	; 0x2f
    5554:	98 a9       	ldd	r25, Y+48	; 0x30
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	4a e7       	ldi	r20, 0x7A	; 122
    555c:	54 e4       	ldi	r21, 0x44	; 68
    555e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	8c a3       	std	Y+36, r24	; 0x24
    5568:	9d a3       	std	Y+37, r25	; 0x25
    556a:	ae a3       	std	Y+38, r26	; 0x26
    556c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    556e:	6c a1       	ldd	r22, Y+36	; 0x24
    5570:	7d a1       	ldd	r23, Y+37	; 0x25
    5572:	8e a1       	ldd	r24, Y+38	; 0x26
    5574:	9f a1       	ldd	r25, Y+39	; 0x27
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	4a ef       	ldi	r20, 0xFA	; 250
    557c:	54 e4       	ldi	r21, 0x44	; 68
    557e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	88 a3       	std	Y+32, r24	; 0x20
    5588:	99 a3       	std	Y+33, r25	; 0x21
    558a:	aa a3       	std	Y+34, r26	; 0x22
    558c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    558e:	68 a1       	ldd	r22, Y+32	; 0x20
    5590:	79 a1       	ldd	r23, Y+33	; 0x21
    5592:	8a a1       	ldd	r24, Y+34	; 0x22
    5594:	9b a1       	ldd	r25, Y+35	; 0x23
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	40 e8       	ldi	r20, 0x80	; 128
    559c:	5f e3       	ldi	r21, 0x3F	; 63
    559e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55a2:	88 23       	and	r24, r24
    55a4:	2c f4       	brge	.+10     	; 0x55b0 <display_seven_sagement+0xa5c>
		__ticks = 1;
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	9f 8f       	std	Y+31, r25	; 0x1f
    55ac:	8e 8f       	std	Y+30, r24	; 0x1e
    55ae:	3f c0       	rjmp	.+126    	; 0x562e <display_seven_sagement+0xada>
	else if (__tmp > 65535)
    55b0:	68 a1       	ldd	r22, Y+32	; 0x20
    55b2:	79 a1       	ldd	r23, Y+33	; 0x21
    55b4:	8a a1       	ldd	r24, Y+34	; 0x22
    55b6:	9b a1       	ldd	r25, Y+35	; 0x23
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	3f ef       	ldi	r19, 0xFF	; 255
    55bc:	4f e7       	ldi	r20, 0x7F	; 127
    55be:	57 e4       	ldi	r21, 0x47	; 71
    55c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55c4:	18 16       	cp	r1, r24
    55c6:	4c f5       	brge	.+82     	; 0x561a <display_seven_sagement+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c8:	6c a1       	ldd	r22, Y+36	; 0x24
    55ca:	7d a1       	ldd	r23, Y+37	; 0x25
    55cc:	8e a1       	ldd	r24, Y+38	; 0x26
    55ce:	9f a1       	ldd	r25, Y+39	; 0x27
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	40 e2       	ldi	r20, 0x20	; 32
    55d6:	51 e4       	ldi	r21, 0x41	; 65
    55d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55dc:	dc 01       	movw	r26, r24
    55de:	cb 01       	movw	r24, r22
    55e0:	bc 01       	movw	r22, r24
    55e2:	cd 01       	movw	r24, r26
    55e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	9f 8f       	std	Y+31, r25	; 0x1f
    55ee:	8e 8f       	std	Y+30, r24	; 0x1e
    55f0:	0f c0       	rjmp	.+30     	; 0x5610 <display_seven_sagement+0xabc>
    55f2:	88 ec       	ldi	r24, 0xC8	; 200
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	9d 8f       	std	Y+29, r25	; 0x1d
    55f8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    55fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	f1 f7       	brne	.-4      	; 0x55fe <display_seven_sagement+0xaaa>
    5602:	9d 8f       	std	Y+29, r25	; 0x1d
    5604:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5606:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5608:	9f 8d       	ldd	r25, Y+31	; 0x1f
    560a:	01 97       	sbiw	r24, 0x01	; 1
    560c:	9f 8f       	std	Y+31, r25	; 0x1f
    560e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5610:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5612:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5614:	00 97       	sbiw	r24, 0x00	; 0
    5616:	69 f7       	brne	.-38     	; 0x55f2 <display_seven_sagement+0xa9e>
    5618:	24 c0       	rjmp	.+72     	; 0x5662 <display_seven_sagement+0xb0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    561a:	68 a1       	ldd	r22, Y+32	; 0x20
    561c:	79 a1       	ldd	r23, Y+33	; 0x21
    561e:	8a a1       	ldd	r24, Y+34	; 0x22
    5620:	9b a1       	ldd	r25, Y+35	; 0x23
    5622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	9f 8f       	std	Y+31, r25	; 0x1f
    562c:	8e 8f       	std	Y+30, r24	; 0x1e
    562e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5630:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5632:	9b 8f       	std	Y+27, r25	; 0x1b
    5634:	8a 8f       	std	Y+26, r24	; 0x1a
    5636:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5638:	9b 8d       	ldd	r25, Y+27	; 0x1b
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	f1 f7       	brne	.-4      	; 0x563a <display_seven_sagement+0xae6>
    563e:	9b 8f       	std	Y+27, r25	; 0x1b
    5640:	8a 8f       	std	Y+26, r24	; 0x1a
    5642:	0f c0       	rjmp	.+30     	; 0x5662 <display_seven_sagement+0xb0e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5644:	69 a5       	ldd	r22, Y+41	; 0x29
    5646:	7a a5       	ldd	r23, Y+42	; 0x2a
    5648:	8b a5       	ldd	r24, Y+43	; 0x2b
    564a:	9c a5       	ldd	r25, Y+44	; 0x2c
    564c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5650:	dc 01       	movw	r26, r24
    5652:	cb 01       	movw	r24, r22
    5654:	88 a7       	std	Y+40, r24	; 0x28
    5656:	88 a5       	ldd	r24, Y+40	; 0x28
    5658:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    565a:	89 8d       	ldd	r24, Y+25	; 0x19
    565c:	8a 95       	dec	r24
    565e:	f1 f7       	brne	.-4      	; 0x565c <display_seven_sagement+0xb08>
    5660:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(200);
	PORTA=(PORTA & 0XC0) |(1<<PIN5) ;
    5662:	ab e3       	ldi	r26, 0x3B	; 59
    5664:	b0 e0       	ldi	r27, 0x00	; 0
    5666:	eb e3       	ldi	r30, 0x3B	; 59
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	80 81       	ld	r24, Z
    566c:	80 7c       	andi	r24, 0xC0	; 192
    566e:	80 62       	ori	r24, 0x20	; 32
    5670:	8c 93       	st	X, r24
	PORTC =(PORTC & 0XF0) |(0X0F & hour2);
    5672:	a5 e3       	ldi	r26, 0x35	; 53
    5674:	b0 e0       	ldi	r27, 0x00	; 0
    5676:	e5 e3       	ldi	r30, 0x35	; 53
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	80 81       	ld	r24, Z
    567c:	98 2f       	mov	r25, r24
    567e:	90 7f       	andi	r25, 0xF0	; 240
    5680:	80 91 89 01 	lds	r24, 0x0189
    5684:	8f 70       	andi	r24, 0x0F	; 15
    5686:	89 2b       	or	r24, r25
    5688:	8c 93       	st	X, r24
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	a8 e4       	ldi	r26, 0x48	; 72
    5690:	b3 e4       	ldi	r27, 0x43	; 67
    5692:	8d 8b       	std	Y+21, r24	; 0x15
    5694:	9e 8b       	std	Y+22, r25	; 0x16
    5696:	af 8b       	std	Y+23, r26	; 0x17
    5698:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    569a:	6d 89       	ldd	r22, Y+21	; 0x15
    569c:	7e 89       	ldd	r23, Y+22	; 0x16
    569e:	8f 89       	ldd	r24, Y+23	; 0x17
    56a0:	98 8d       	ldd	r25, Y+24	; 0x18
    56a2:	2b ea       	ldi	r18, 0xAB	; 171
    56a4:	3a ea       	ldi	r19, 0xAA	; 170
    56a6:	4a e2       	ldi	r20, 0x2A	; 42
    56a8:	50 e4       	ldi	r21, 0x40	; 64
    56aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	89 8b       	std	Y+17, r24	; 0x11
    56b4:	9a 8b       	std	Y+18, r25	; 0x12
    56b6:	ab 8b       	std	Y+19, r26	; 0x13
    56b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    56ba:	69 89       	ldd	r22, Y+17	; 0x11
    56bc:	7a 89       	ldd	r23, Y+18	; 0x12
    56be:	8b 89       	ldd	r24, Y+19	; 0x13
    56c0:	9c 89       	ldd	r25, Y+20	; 0x14
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e8       	ldi	r20, 0x80	; 128
    56c8:	5f e3       	ldi	r21, 0x3F	; 63
    56ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56ce:	88 23       	and	r24, r24
    56d0:	1c f4       	brge	.+6      	; 0x56d8 <display_seven_sagement+0xb84>
		__ticks = 1;
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	88 8b       	std	Y+16, r24	; 0x10
    56d6:	91 c0       	rjmp	.+290    	; 0x57fa <display_seven_sagement+0xca6>
	else if (__tmp > 255)
    56d8:	69 89       	ldd	r22, Y+17	; 0x11
    56da:	7a 89       	ldd	r23, Y+18	; 0x12
    56dc:	8b 89       	ldd	r24, Y+19	; 0x13
    56de:	9c 89       	ldd	r25, Y+20	; 0x14
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	4f e7       	ldi	r20, 0x7F	; 127
    56e6:	53 e4       	ldi	r21, 0x43	; 67
    56e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56ec:	18 16       	cp	r1, r24
    56ee:	0c f0       	brlt	.+2      	; 0x56f2 <display_seven_sagement+0xb9e>
    56f0:	7b c0       	rjmp	.+246    	; 0x57e8 <display_seven_sagement+0xc94>
	{
		_delay_ms(__us / 1000.0);
    56f2:	6d 89       	ldd	r22, Y+21	; 0x15
    56f4:	7e 89       	ldd	r23, Y+22	; 0x16
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	4a e7       	ldi	r20, 0x7A	; 122
    5700:	54 e4       	ldi	r21, 0x44	; 68
    5702:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	8c 87       	std	Y+12, r24	; 0x0c
    570c:	9d 87       	std	Y+13, r25	; 0x0d
    570e:	ae 87       	std	Y+14, r26	; 0x0e
    5710:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5712:	6c 85       	ldd	r22, Y+12	; 0x0c
    5714:	7d 85       	ldd	r23, Y+13	; 0x0d
    5716:	8e 85       	ldd	r24, Y+14	; 0x0e
    5718:	9f 85       	ldd	r25, Y+15	; 0x0f
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	4a ef       	ldi	r20, 0xFA	; 250
    5720:	54 e4       	ldi	r21, 0x44	; 68
    5722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5726:	dc 01       	movw	r26, r24
    5728:	cb 01       	movw	r24, r22
    572a:	88 87       	std	Y+8, r24	; 0x08
    572c:	99 87       	std	Y+9, r25	; 0x09
    572e:	aa 87       	std	Y+10, r26	; 0x0a
    5730:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5732:	68 85       	ldd	r22, Y+8	; 0x08
    5734:	79 85       	ldd	r23, Y+9	; 0x09
    5736:	8a 85       	ldd	r24, Y+10	; 0x0a
    5738:	9b 85       	ldd	r25, Y+11	; 0x0b
    573a:	20 e0       	ldi	r18, 0x00	; 0
    573c:	30 e0       	ldi	r19, 0x00	; 0
    573e:	40 e8       	ldi	r20, 0x80	; 128
    5740:	5f e3       	ldi	r21, 0x3F	; 63
    5742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5746:	88 23       	and	r24, r24
    5748:	2c f4       	brge	.+10     	; 0x5754 <display_seven_sagement+0xc00>
		__ticks = 1;
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	9f 83       	std	Y+7, r25	; 0x07
    5750:	8e 83       	std	Y+6, r24	; 0x06
    5752:	3f c0       	rjmp	.+126    	; 0x57d2 <display_seven_sagement+0xc7e>
	else if (__tmp > 65535)
    5754:	68 85       	ldd	r22, Y+8	; 0x08
    5756:	79 85       	ldd	r23, Y+9	; 0x09
    5758:	8a 85       	ldd	r24, Y+10	; 0x0a
    575a:	9b 85       	ldd	r25, Y+11	; 0x0b
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	3f ef       	ldi	r19, 0xFF	; 255
    5760:	4f e7       	ldi	r20, 0x7F	; 127
    5762:	57 e4       	ldi	r21, 0x47	; 71
    5764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5768:	18 16       	cp	r1, r24
    576a:	4c f5       	brge	.+82     	; 0x57be <display_seven_sagement+0xc6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    576c:	6c 85       	ldd	r22, Y+12	; 0x0c
    576e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5770:	8e 85       	ldd	r24, Y+14	; 0x0e
    5772:	9f 85       	ldd	r25, Y+15	; 0x0f
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	40 e2       	ldi	r20, 0x20	; 32
    577a:	51 e4       	ldi	r21, 0x41	; 65
    577c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	bc 01       	movw	r22, r24
    5786:	cd 01       	movw	r24, r26
    5788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    578c:	dc 01       	movw	r26, r24
    578e:	cb 01       	movw	r24, r22
    5790:	9f 83       	std	Y+7, r25	; 0x07
    5792:	8e 83       	std	Y+6, r24	; 0x06
    5794:	0f c0       	rjmp	.+30     	; 0x57b4 <display_seven_sagement+0xc60>
    5796:	88 ec       	ldi	r24, 0xC8	; 200
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	9d 83       	std	Y+5, r25	; 0x05
    579c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    579e:	8c 81       	ldd	r24, Y+4	; 0x04
    57a0:	9d 81       	ldd	r25, Y+5	; 0x05
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	f1 f7       	brne	.-4      	; 0x57a2 <display_seven_sagement+0xc4e>
    57a6:	9d 83       	std	Y+5, r25	; 0x05
    57a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57aa:	8e 81       	ldd	r24, Y+6	; 0x06
    57ac:	9f 81       	ldd	r25, Y+7	; 0x07
    57ae:	01 97       	sbiw	r24, 0x01	; 1
    57b0:	9f 83       	std	Y+7, r25	; 0x07
    57b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57b4:	8e 81       	ldd	r24, Y+6	; 0x06
    57b6:	9f 81       	ldd	r25, Y+7	; 0x07
    57b8:	00 97       	sbiw	r24, 0x00	; 0
    57ba:	69 f7       	brne	.-38     	; 0x5796 <display_seven_sagement+0xc42>
    57bc:	24 c0       	rjmp	.+72     	; 0x5806 <display_seven_sagement+0xcb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57be:	68 85       	ldd	r22, Y+8	; 0x08
    57c0:	79 85       	ldd	r23, Y+9	; 0x09
    57c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    57c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    57c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ca:	dc 01       	movw	r26, r24
    57cc:	cb 01       	movw	r24, r22
    57ce:	9f 83       	std	Y+7, r25	; 0x07
    57d0:	8e 83       	std	Y+6, r24	; 0x06
    57d2:	8e 81       	ldd	r24, Y+6	; 0x06
    57d4:	9f 81       	ldd	r25, Y+7	; 0x07
    57d6:	9b 83       	std	Y+3, r25	; 0x03
    57d8:	8a 83       	std	Y+2, r24	; 0x02
    57da:	8a 81       	ldd	r24, Y+2	; 0x02
    57dc:	9b 81       	ldd	r25, Y+3	; 0x03
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <display_seven_sagement+0xc8a>
    57e2:	9b 83       	std	Y+3, r25	; 0x03
    57e4:	8a 83       	std	Y+2, r24	; 0x02
    57e6:	0f c0       	rjmp	.+30     	; 0x5806 <display_seven_sagement+0xcb2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    57e8:	69 89       	ldd	r22, Y+17	; 0x11
    57ea:	7a 89       	ldd	r23, Y+18	; 0x12
    57ec:	8b 89       	ldd	r24, Y+19	; 0x13
    57ee:	9c 89       	ldd	r25, Y+20	; 0x14
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	88 8b       	std	Y+16, r24	; 0x10
    57fa:	88 89       	ldd	r24, Y+16	; 0x10
    57fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	8a 95       	dec	r24
    5802:	f1 f7       	brne	.-4      	; 0x5800 <display_seven_sagement+0xcac>
    5804:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    5806:	c0 57       	subi	r28, 0x70	; 112
    5808:	df 4f       	sbci	r29, 0xFF	; 255
    580a:	0f b6       	in	r0, 0x3f	; 63
    580c:	f8 94       	cli
    580e:	de bf       	out	0x3e, r29	; 62
    5810:	0f be       	out	0x3f, r0	; 63
    5812:	cd bf       	out	0x3d, r28	; 61
    5814:	cf 91       	pop	r28
    5816:	df 91       	pop	r29
    5818:	1f 91       	pop	r17
    581a:	0f 91       	pop	r16
    581c:	08 95       	ret

0000581e <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    581e:	1f 92       	push	r1
    5820:	0f 92       	push	r0
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	0f 92       	push	r0
    5826:	11 24       	eor	r1, r1
    5828:	2f 93       	push	r18
    582a:	3f 93       	push	r19
    582c:	4f 93       	push	r20
    582e:	5f 93       	push	r21
    5830:	6f 93       	push	r22
    5832:	7f 93       	push	r23
    5834:	8f 93       	push	r24
    5836:	9f 93       	push	r25
    5838:	af 93       	push	r26
    583a:	bf 93       	push	r27
    583c:	ef 93       	push	r30
    583e:	ff 93       	push	r31
    5840:	df 93       	push	r29
    5842:	cf 93       	push	r28
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62

	display_seven_sagement();
    5848:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <display_seven_sagement>
	if (flag==0)
    584c:	80 91 8d 01 	lds	r24, 0x018D
    5850:	88 23       	and	r24, r24
    5852:	79 f4       	brne	.+30     	; 0x5872 <__vector_4+0x54>
	{
		TCCR1A &= ~(1<<FOC1A);
    5854:	af e4       	ldi	r26, 0x4F	; 79
    5856:	b0 e0       	ldi	r27, 0x00	; 0
    5858:	ef e4       	ldi	r30, 0x4F	; 79
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	80 81       	ld	r24, Z
    585e:	87 7f       	andi	r24, 0xF7	; 247
    5860:	8c 93       	st	X, r24
		TCCR1B &= ~(1<<CS10) & ~(1<<CS12);
    5862:	ae e4       	ldi	r26, 0x4E	; 78
    5864:	b0 e0       	ldi	r27, 0x00	; 0
    5866:	ee e4       	ldi	r30, 0x4E	; 78
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	80 81       	ld	r24, Z
    586c:	8a 7f       	andi	r24, 0xFA	; 250
    586e:	8c 93       	st	X, r24
    5870:	0e c0       	rjmp	.+28     	; 0x588e <__vector_4+0x70>
	}
	else
	{
		TCCR1A |= (1<<FOC1A);
    5872:	af e4       	ldi	r26, 0x4F	; 79
    5874:	b0 e0       	ldi	r27, 0x00	; 0
    5876:	ef e4       	ldi	r30, 0x4F	; 79
    5878:	f0 e0       	ldi	r31, 0x00	; 0
    587a:	80 81       	ld	r24, Z
    587c:	88 60       	ori	r24, 0x08	; 8
    587e:	8c 93       	st	X, r24
		TCCR1B |= (1<<CS10) | (1<<CS12);
    5880:	ae e4       	ldi	r26, 0x4E	; 78
    5882:	b0 e0       	ldi	r27, 0x00	; 0
    5884:	ee e4       	ldi	r30, 0x4E	; 78
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	80 81       	ld	r24, Z
    588a:	85 60       	ori	r24, 0x05	; 5
    588c:	8c 93       	st	X, r24
	}


}
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	ff 91       	pop	r31
    5894:	ef 91       	pop	r30
    5896:	bf 91       	pop	r27
    5898:	af 91       	pop	r26
    589a:	9f 91       	pop	r25
    589c:	8f 91       	pop	r24
    589e:	7f 91       	pop	r23
    58a0:	6f 91       	pop	r22
    58a2:	5f 91       	pop	r21
    58a4:	4f 91       	pop	r20
    58a6:	3f 91       	pop	r19
    58a8:	2f 91       	pop	r18
    58aa:	0f 90       	pop	r0
    58ac:	0f be       	out	0x3f, r0	; 63
    58ae:	0f 90       	pop	r0
    58b0:	1f 90       	pop	r1
    58b2:	18 95       	reti

000058b4 <Timer1_CTC>:
void Timer1_CTC(void)
{
    58b4:	df 93       	push	r29
    58b6:	cf 93       	push	r28
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    58bc:	ec e4       	ldi	r30, 0x4C	; 76
    58be:	f0 e0       	ldi	r31, 0x00	; 0
    58c0:	11 82       	std	Z+1, r1	; 0x01
    58c2:	10 82       	st	Z, r1
	OCR1A = 976;
    58c4:	ea e4       	ldi	r30, 0x4A	; 74
    58c6:	f0 e0       	ldi	r31, 0x00	; 0
    58c8:	80 ed       	ldi	r24, 0xD0	; 208
    58ca:	93 e0       	ldi	r25, 0x03	; 3
    58cc:	91 83       	std	Z+1, r25	; 0x01
    58ce:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);
    58d0:	a9 e5       	ldi	r26, 0x59	; 89
    58d2:	b0 e0       	ldi	r27, 0x00	; 0
    58d4:	e9 e5       	ldi	r30, 0x59	; 89
    58d6:	f0 e0       	ldi	r31, 0x00	; 0
    58d8:	80 81       	ld	r24, Z
    58da:	80 61       	ori	r24, 0x10	; 16
    58dc:	8c 93       	st	X, r24
	TCCR1A = (1<<FOC1A);
    58de:	ef e4       	ldi	r30, 0x4F	; 79
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	88 e0       	ldi	r24, 0x08	; 8
    58e4:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
    58e6:	ee e4       	ldi	r30, 0x4E	; 78
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	8d e0       	ldi	r24, 0x0D	; 13
    58ec:	80 83       	st	Z, r24

}
    58ee:	cf 91       	pop	r28
    58f0:	df 91       	pop	r29
    58f2:	08 95       	ret

000058f4 <main>:


int main()
{
    58f4:	df 93       	push	r29
    58f6:	cf 93       	push	r28
    58f8:	cd b7       	in	r28, 0x3d	; 61
    58fa:	de b7       	in	r29, 0x3e	; 62
    58fc:	66 97       	sbiw	r28, 0x16	; 22
    58fe:	0f b6       	in	r0, 0x3f	; 63
    5900:	f8 94       	cli
    5902:	de bf       	out	0x3e, r29	; 62
    5904:	0f be       	out	0x3f, r0	; 63
    5906:	cd bf       	out	0x3d, r28	; 61
	Timer0_ConfigType config0={0,250,TIMER0_COMPARE_MODE,timer0_PRESCALAR_CLK64};
    5908:	ce 01       	movw	r24, r28
    590a:	01 96       	adiw	r24, 0x01	; 1
    590c:	9e 87       	std	Y+14, r25	; 0x0e
    590e:	8d 87       	std	Y+13, r24	; 0x0d
    5910:	ee e6       	ldi	r30, 0x6E	; 110
    5912:	f1 e0       	ldi	r31, 0x01	; 1
    5914:	f8 8b       	std	Y+16, r31	; 0x10
    5916:	ef 87       	std	Y+15, r30	; 0x0f
    5918:	f6 e0       	ldi	r31, 0x06	; 6
    591a:	f9 8b       	std	Y+17, r31	; 0x11
    591c:	ef 85       	ldd	r30, Y+15	; 0x0f
    591e:	f8 89       	ldd	r31, Y+16	; 0x10
    5920:	00 80       	ld	r0, Z
    5922:	8f 85       	ldd	r24, Y+15	; 0x0f
    5924:	98 89       	ldd	r25, Y+16	; 0x10
    5926:	01 96       	adiw	r24, 0x01	; 1
    5928:	98 8b       	std	Y+16, r25	; 0x10
    592a:	8f 87       	std	Y+15, r24	; 0x0f
    592c:	ed 85       	ldd	r30, Y+13	; 0x0d
    592e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5930:	00 82       	st	Z, r0
    5932:	8d 85       	ldd	r24, Y+13	; 0x0d
    5934:	9e 85       	ldd	r25, Y+14	; 0x0e
    5936:	01 96       	adiw	r24, 0x01	; 1
    5938:	9e 87       	std	Y+14, r25	; 0x0e
    593a:	8d 87       	std	Y+13, r24	; 0x0d
    593c:	99 89       	ldd	r25, Y+17	; 0x11
    593e:	91 50       	subi	r25, 0x01	; 1
    5940:	99 8b       	std	Y+17, r25	; 0x11
    5942:	e9 89       	ldd	r30, Y+17	; 0x11
    5944:	ee 23       	and	r30, r30
    5946:	51 f7       	brne	.-44     	; 0x591c <main+0x28>
	//Timer1_ConfigType config1={0,976,0,TIMER1_COMPARE_OCR1A,timer1_PRESCALAR_CLK8};
	Timer2_ConfigType config2={0,253,TIMER2_COMPARE_MODE,timer2_PRESCALAR_CLK256};
    5948:	ce 01       	movw	r24, r28
    594a:	07 96       	adiw	r24, 0x07	; 7
    594c:	9b 8b       	std	Y+19, r25	; 0x13
    594e:	8a 8b       	std	Y+18, r24	; 0x12
    5950:	e8 e6       	ldi	r30, 0x68	; 104
    5952:	f1 e0       	ldi	r31, 0x01	; 1
    5954:	fd 8b       	std	Y+21, r31	; 0x15
    5956:	ec 8b       	std	Y+20, r30	; 0x14
    5958:	f6 e0       	ldi	r31, 0x06	; 6
    595a:	fe 8b       	std	Y+22, r31	; 0x16
    595c:	ec 89       	ldd	r30, Y+20	; 0x14
    595e:	fd 89       	ldd	r31, Y+21	; 0x15
    5960:	00 80       	ld	r0, Z
    5962:	8c 89       	ldd	r24, Y+20	; 0x14
    5964:	9d 89       	ldd	r25, Y+21	; 0x15
    5966:	01 96       	adiw	r24, 0x01	; 1
    5968:	9d 8b       	std	Y+21, r25	; 0x15
    596a:	8c 8b       	std	Y+20, r24	; 0x14
    596c:	ea 89       	ldd	r30, Y+18	; 0x12
    596e:	fb 89       	ldd	r31, Y+19	; 0x13
    5970:	00 82       	st	Z, r0
    5972:	8a 89       	ldd	r24, Y+18	; 0x12
    5974:	9b 89       	ldd	r25, Y+19	; 0x13
    5976:	01 96       	adiw	r24, 0x01	; 1
    5978:	9b 8b       	std	Y+19, r25	; 0x13
    597a:	8a 8b       	std	Y+18, r24	; 0x12
    597c:	9e 89       	ldd	r25, Y+22	; 0x16
    597e:	91 50       	subi	r25, 0x01	; 1
    5980:	9e 8b       	std	Y+22, r25	; 0x16
    5982:	ee 89       	ldd	r30, Y+22	; 0x16
    5984:	ee 23       	and	r30, r30
    5986:	51 f7       	brne	.-44     	; 0x595c <main+0x68>
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    5988:	82 e0       	ldi	r24, 0x02	; 2
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	41 e0       	ldi	r20, 0x01	; 1
    598e:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
    5992:	82 e0       	ldi	r24, 0x02	; 2
    5994:	61 e0       	ldi	r22, 0x01	; 1
    5996:	41 e0       	ldi	r20, 0x01	; 1
    5998:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID, PIN_OUTPUT);
    599c:	82 e0       	ldi	r24, 0x02	; 2
    599e:	62 e0       	ldi	r22, 0x02	; 2
    59a0:	41 e0       	ldi	r20, 0x01	; 1
    59a2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN3_ID, PIN_OUTPUT);
    59a6:	82 e0       	ldi	r24, 0x02	; 2
    59a8:	63 e0       	ldi	r22, 0x03	; 3
    59aa:	41 e0       	ldi	r20, 0x01	; 1
    59ac:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    59b0:	82 e0       	ldi	r24, 0x02	; 2
    59b2:	60 e0       	ldi	r22, 0x00	; 0
    59b4:	40 e0       	ldi	r20, 0x00	; 0
    59b6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
    59ba:	82 e0       	ldi	r24, 0x02	; 2
    59bc:	61 e0       	ldi	r22, 0x01	; 1
    59be:	40 e0       	ldi	r20, 0x00	; 0
    59c0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
    59c4:	82 e0       	ldi	r24, 0x02	; 2
    59c6:	62 e0       	ldi	r22, 0x02	; 2
    59c8:	40 e0       	ldi	r20, 0x00	; 0
    59ca:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN3_ID, LOGIC_LOW);
    59ce:	82 e0       	ldi	r24, 0x02	; 2
    59d0:	63 e0       	ldi	r22, 0x03	; 3
    59d2:	40 e0       	ldi	r20, 0x00	; 0
    59d4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	41 e0       	ldi	r20, 0x01	; 1
    59de:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN1_ID, PIN_OUTPUT);
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	61 e0       	ldi	r22, 0x01	; 1
    59e6:	41 e0       	ldi	r20, 0x01	; 1
    59e8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN2_ID, PIN_OUTPUT);
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	62 e0       	ldi	r22, 0x02	; 2
    59f0:	41 e0       	ldi	r20, 0x01	; 1
    59f2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN3_ID, PIN_OUTPUT);
    59f6:	80 e0       	ldi	r24, 0x00	; 0
    59f8:	63 e0       	ldi	r22, 0x03	; 3
    59fa:	41 e0       	ldi	r20, 0x01	; 1
    59fc:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN4_ID, PIN_OUTPUT);
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	64 e0       	ldi	r22, 0x04	; 4
    5a04:	41 e0       	ldi	r20, 0x01	; 1
    5a06:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN5_ID, PIN_OUTPUT);
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	65 e0       	ldi	r22, 0x05	; 5
    5a0e:	41 e0       	ldi	r20, 0x01	; 1
    5a10:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	40 e0       	ldi	r20, 0x00	; 0
    5a1a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
    5a1e:	80 e0       	ldi	r24, 0x00	; 0
    5a20:	61 e0       	ldi	r22, 0x01	; 1
    5a22:	40 e0       	ldi	r20, 0x00	; 0
    5a24:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	62 e0       	ldi	r22, 0x02	; 2
    5a2c:	40 e0       	ldi	r20, 0x00	; 0
    5a2e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN3_ID, LOGIC_LOW);
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	63 e0       	ldi	r22, 0x03	; 3
    5a36:	40 e0       	ldi	r20, 0x00	; 0
    5a38:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_LOW);
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	64 e0       	ldi	r22, 0x04	; 4
    5a40:	40 e0       	ldi	r20, 0x00	; 0
    5a42:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW);
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	65 e0       	ldi	r22, 0x05	; 5
    5a4a:	40 e0       	ldi	r20, 0x00	; 0
    5a4c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GIE_Enabled();
    5a50:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_Enabled>
	TIMER0_init(&config0);
    5a54:	ce 01       	movw	r24, r28
    5a56:	01 96       	adiw	r24, 0x01	; 1
    5a58:	0e 94 bf 0c 	call	0x197e	; 0x197e <TIMER0_init>
	delay0(20);
    5a5c:	64 e1       	ldi	r22, 0x14	; 20
    5a5e:	70 e0       	ldi	r23, 0x00	; 0
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <delay0>
	SPI_initSlave();
    5a68:	0e 94 0c 0b 	call	0x1618	; 0x1618 <SPI_initSlave>
	TIMER2_init(&config2);
    5a6c:	ce 01       	movw	r24, r28
    5a6e:	07 96       	adiw	r24, 0x07	; 7
    5a70:	0e 94 0e 11 	call	0x221c	; 0x221c <TIMER2_init>
	//TIMER1_init(&config1);
	/* Initialize the SPI driver as Slave */
	Timer1_CTC();
    5a74:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <Timer1_CTC>

	while(1)
	{
			flag = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    5a78:	8f ef       	ldi	r24, 0xFF	; 255
    5a7a:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    5a7e:	80 93 8d 01 	sts	0x018D, r24
    5a82:	fa cf       	rjmp	.-12     	; 0x5a78 <main+0x184>

00005a84 <__udivmodhi4>:
    5a84:	aa 1b       	sub	r26, r26
    5a86:	bb 1b       	sub	r27, r27
    5a88:	51 e1       	ldi	r21, 0x11	; 17
    5a8a:	07 c0       	rjmp	.+14     	; 0x5a9a <__udivmodhi4_ep>

00005a8c <__udivmodhi4_loop>:
    5a8c:	aa 1f       	adc	r26, r26
    5a8e:	bb 1f       	adc	r27, r27
    5a90:	a6 17       	cp	r26, r22
    5a92:	b7 07       	cpc	r27, r23
    5a94:	10 f0       	brcs	.+4      	; 0x5a9a <__udivmodhi4_ep>
    5a96:	a6 1b       	sub	r26, r22
    5a98:	b7 0b       	sbc	r27, r23

00005a9a <__udivmodhi4_ep>:
    5a9a:	88 1f       	adc	r24, r24
    5a9c:	99 1f       	adc	r25, r25
    5a9e:	5a 95       	dec	r21
    5aa0:	a9 f7       	brne	.-22     	; 0x5a8c <__udivmodhi4_loop>
    5aa2:	80 95       	com	r24
    5aa4:	90 95       	com	r25
    5aa6:	bc 01       	movw	r22, r24
    5aa8:	cd 01       	movw	r24, r26
    5aaa:	08 95       	ret

00005aac <__udivmodsi4>:
    5aac:	a1 e2       	ldi	r26, 0x21	; 33
    5aae:	1a 2e       	mov	r1, r26
    5ab0:	aa 1b       	sub	r26, r26
    5ab2:	bb 1b       	sub	r27, r27
    5ab4:	fd 01       	movw	r30, r26
    5ab6:	0d c0       	rjmp	.+26     	; 0x5ad2 <__udivmodsi4_ep>

00005ab8 <__udivmodsi4_loop>:
    5ab8:	aa 1f       	adc	r26, r26
    5aba:	bb 1f       	adc	r27, r27
    5abc:	ee 1f       	adc	r30, r30
    5abe:	ff 1f       	adc	r31, r31
    5ac0:	a2 17       	cp	r26, r18
    5ac2:	b3 07       	cpc	r27, r19
    5ac4:	e4 07       	cpc	r30, r20
    5ac6:	f5 07       	cpc	r31, r21
    5ac8:	20 f0       	brcs	.+8      	; 0x5ad2 <__udivmodsi4_ep>
    5aca:	a2 1b       	sub	r26, r18
    5acc:	b3 0b       	sbc	r27, r19
    5ace:	e4 0b       	sbc	r30, r20
    5ad0:	f5 0b       	sbc	r31, r21

00005ad2 <__udivmodsi4_ep>:
    5ad2:	66 1f       	adc	r22, r22
    5ad4:	77 1f       	adc	r23, r23
    5ad6:	88 1f       	adc	r24, r24
    5ad8:	99 1f       	adc	r25, r25
    5ada:	1a 94       	dec	r1
    5adc:	69 f7       	brne	.-38     	; 0x5ab8 <__udivmodsi4_loop>
    5ade:	60 95       	com	r22
    5ae0:	70 95       	com	r23
    5ae2:	80 95       	com	r24
    5ae4:	90 95       	com	r25
    5ae6:	9b 01       	movw	r18, r22
    5ae8:	ac 01       	movw	r20, r24
    5aea:	bd 01       	movw	r22, r26
    5aec:	cf 01       	movw	r24, r30
    5aee:	08 95       	ret

00005af0 <__prologue_saves__>:
    5af0:	2f 92       	push	r2
    5af2:	3f 92       	push	r3
    5af4:	4f 92       	push	r4
    5af6:	5f 92       	push	r5
    5af8:	6f 92       	push	r6
    5afa:	7f 92       	push	r7
    5afc:	8f 92       	push	r8
    5afe:	9f 92       	push	r9
    5b00:	af 92       	push	r10
    5b02:	bf 92       	push	r11
    5b04:	cf 92       	push	r12
    5b06:	df 92       	push	r13
    5b08:	ef 92       	push	r14
    5b0a:	ff 92       	push	r15
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
    5b18:	ca 1b       	sub	r28, r26
    5b1a:	db 0b       	sbc	r29, r27
    5b1c:	0f b6       	in	r0, 0x3f	; 63
    5b1e:	f8 94       	cli
    5b20:	de bf       	out	0x3e, r29	; 62
    5b22:	0f be       	out	0x3f, r0	; 63
    5b24:	cd bf       	out	0x3d, r28	; 61
    5b26:	09 94       	ijmp

00005b28 <__epilogue_restores__>:
    5b28:	2a 88       	ldd	r2, Y+18	; 0x12
    5b2a:	39 88       	ldd	r3, Y+17	; 0x11
    5b2c:	48 88       	ldd	r4, Y+16	; 0x10
    5b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    5b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    5b3e:	df 80       	ldd	r13, Y+7	; 0x07
    5b40:	ee 80       	ldd	r14, Y+6	; 0x06
    5b42:	fd 80       	ldd	r15, Y+5	; 0x05
    5b44:	0c 81       	ldd	r16, Y+4	; 0x04
    5b46:	1b 81       	ldd	r17, Y+3	; 0x03
    5b48:	aa 81       	ldd	r26, Y+2	; 0x02
    5b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    5b4c:	ce 0f       	add	r28, r30
    5b4e:	d1 1d       	adc	r29, r1
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	f8 94       	cli
    5b54:	de bf       	out	0x3e, r29	; 62
    5b56:	0f be       	out	0x3f, r0	; 63
    5b58:	cd bf       	out	0x3d, r28	; 61
    5b5a:	ed 01       	movw	r28, r26
    5b5c:	08 95       	ret

00005b5e <itoa>:
    5b5e:	fb 01       	movw	r30, r22
    5b60:	9f 01       	movw	r18, r30
    5b62:	e8 94       	clt
    5b64:	42 30       	cpi	r20, 0x02	; 2
    5b66:	c4 f0       	brlt	.+48     	; 0x5b98 <itoa+0x3a>
    5b68:	45 32       	cpi	r20, 0x25	; 37
    5b6a:	b4 f4       	brge	.+44     	; 0x5b98 <itoa+0x3a>
    5b6c:	4a 30       	cpi	r20, 0x0A	; 10
    5b6e:	29 f4       	brne	.+10     	; 0x5b7a <itoa+0x1c>
    5b70:	97 fb       	bst	r25, 7
    5b72:	1e f4       	brtc	.+6      	; 0x5b7a <itoa+0x1c>
    5b74:	90 95       	com	r25
    5b76:	81 95       	neg	r24
    5b78:	9f 4f       	sbci	r25, 0xFF	; 255
    5b7a:	64 2f       	mov	r22, r20
    5b7c:	77 27       	eor	r23, r23
    5b7e:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <__udivmodhi4>
    5b82:	80 5d       	subi	r24, 0xD0	; 208
    5b84:	8a 33       	cpi	r24, 0x3A	; 58
    5b86:	0c f0       	brlt	.+2      	; 0x5b8a <itoa+0x2c>
    5b88:	89 5d       	subi	r24, 0xD9	; 217
    5b8a:	81 93       	st	Z+, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	00 97       	sbiw	r24, 0x00	; 0
    5b90:	a1 f7       	brne	.-24     	; 0x5b7a <itoa+0x1c>
    5b92:	16 f4       	brtc	.+4      	; 0x5b98 <itoa+0x3a>
    5b94:	5d e2       	ldi	r21, 0x2D	; 45
    5b96:	51 93       	st	Z+, r21
    5b98:	10 82       	st	Z, r1
    5b9a:	c9 01       	movw	r24, r18
    5b9c:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <strrev>

00005ba0 <strrev>:
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	67 2f       	mov	r22, r23
    5ba6:	71 91       	ld	r23, Z+
    5ba8:	77 23       	and	r23, r23
    5baa:	e1 f7       	brne	.-8      	; 0x5ba4 <strrev+0x4>
    5bac:	32 97       	sbiw	r30, 0x02	; 2
    5bae:	04 c0       	rjmp	.+8      	; 0x5bb8 <strrev+0x18>
    5bb0:	7c 91       	ld	r23, X
    5bb2:	6d 93       	st	X+, r22
    5bb4:	70 83       	st	Z, r23
    5bb6:	62 91       	ld	r22, -Z
    5bb8:	ae 17       	cp	r26, r30
    5bba:	bf 07       	cpc	r27, r31
    5bbc:	c8 f3       	brcs	.-14     	; 0x5bb0 <strrev+0x10>
    5bbe:	08 95       	ret

00005bc0 <_exit>:
    5bc0:	f8 94       	cli

00005bc2 <__stop_program>:
    5bc2:	ff cf       	rjmp	.-2      	; 0x5bc2 <__stop_program>
