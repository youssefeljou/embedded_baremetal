
mc2_moving.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00004eae  00004f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800174  00800174  00005056  2**0
                  ALLOC
  3 .stab         00005838  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003110  00000000  00000000  0000a890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000db40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000dd32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000114c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001269c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000134c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 94 25 	jmp	0x4b28	; 0x4b28 <__vector_1>
       8:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__vector_2>
       c:	0c 94 d0 25 	jmp	0x4ba0	; 0x4ba0 <__vector_3>
      10:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_4>
      14:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_5>
      18:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_9>
      28:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_10>
      2c:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <main>
      8a:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fd 26 	jmp	0x4dfa	; 0x4dfa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_Enabled>:
#include "../LIB/std_types.h"
#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include"GIE.h"
#include<avr/io.h>
void GIE_Enabled(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_Disabled>:
void GIE_Disabled(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_setupPinDirection+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <GPIO_setupPinDirection+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	88 30       	cpi	r24, 0x08	; 8
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <GPIO_setupPinDirection+0x1c>
     e80:	d5 c0       	rjmp	.+426    	; 0x102c <GPIO_setupPinDirection+0x1c6>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f0       	brcs	.+2      	; 0xe8a <GPIO_setupPinDirection+0x24>
     e88:	d1 c0       	rjmp	.+418    	; 0x102c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <GPIO_setupPinDirection+0x3a>
     e9e:	43 c0       	rjmp	.+134    	; 0xf26 <GPIO_setupPinDirection+0xc0>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <GPIO_setupPinDirection+0x4e>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	71 f0       	breq	.+28     	; 0xece <GPIO_setupPinDirection+0x68>
     eb2:	bc c0       	rjmp	.+376    	; 0x102c <GPIO_setupPinDirection+0x1c6>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <GPIO_setupPinDirection+0x5a>
     ebe:	5f c0       	rjmp	.+190    	; 0xf7e <GPIO_setupPinDirection+0x118>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <GPIO_setupPinDirection+0x66>
     eca:	85 c0       	rjmp	.+266    	; 0xfd6 <GPIO_setupPinDirection+0x170>
     ecc:	af c0       	rjmp	.+350    	; 0x102c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_setupPinDirection+0x8c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_setupPinDirection+0x88>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	98 c0       	rjmp	.+304    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0xb4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0xb0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	83 c0       	rjmp	.+262    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_setupPinDirection+0xe4>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_setupPinDirection+0xe0>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	6c c0       	rjmp	.+216    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_setupPinDirection+0x10c>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_setupPinDirection+0x108>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	57 c0       	rjmp	.+174    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	a1 f4       	brne	.+40     	; 0xfac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f84:	a4 e3       	ldi	r26, 0x34	; 52
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e3       	ldi	r30, 0x34	; 52
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_setupPinDirection+0x13c>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_setupPinDirection+0x138>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	40 c0       	rjmp	.+128    	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_setupPinDirection+0x164>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_setupPinDirection+0x160>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	2b c0       	rjmp	.+86     	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_setupPinDirection+0x194>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_setupPinDirection+0x190>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	14 c0       	rjmp	.+40     	; 0x102c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_setupPinDirection+0x1bc>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_setupPinDirection+0x1b8>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_writePin+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <GPIO_writePin+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	08 f0       	brcs	.+2      	; 0x1058 <GPIO_writePin+0x1c>
    1056:	d5 c0       	rjmp	.+426    	; 0x1202 <GPIO_writePin+0x1c6>
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	08 f0       	brcs	.+2      	; 0x1060 <GPIO_writePin+0x24>
    105e:	d1 c0       	rjmp	.+418    	; 0x1202 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <GPIO_writePin+0x3a>
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <GPIO_writePin+0xc0>
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <GPIO_writePin+0x4e>
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	71 f0       	breq	.+28     	; 0x10a4 <GPIO_writePin+0x68>
    1088:	bc c0       	rjmp	.+376    	; 0x1202 <GPIO_writePin+0x1c6>
    108a:	2c 81       	ldd	r18, Y+4	; 0x04
    108c:	3d 81       	ldd	r19, Y+5	; 0x05
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <GPIO_writePin+0x5a>
    1094:	5f c0       	rjmp	.+190    	; 0x1154 <GPIO_writePin+0x118>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <GPIO_writePin+0x66>
    10a0:	85 c0       	rjmp	.+266    	; 0x11ac <GPIO_writePin+0x170>
    10a2:	af c0       	rjmp	.+350    	; 0x1202 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	a1 f4       	brne	.+40     	; 0x10d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_writePin+0x8c>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_writePin+0x88>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	98 c0       	rjmp	.+304    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_writePin+0xb4>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_writePin+0xb0>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	83 c0       	rjmp	.+262    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	a1 f4       	brne	.+40     	; 0x112a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GPIO_writePin+0xe4>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <GPIO_writePin+0xe0>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	6c c0       	rjmp	.+216    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_writePin+0x10c>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_writePin+0x108>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	57 c0       	rjmp	.+174    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	a1 f4       	brne	.+40     	; 0x1182 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    115a:	a5 e3       	ldi	r26, 0x35	; 53
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e3       	ldi	r30, 0x35	; 53
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_writePin+0x13c>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <GPIO_writePin+0x138>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_writePin+0x164>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_writePin+0x160>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	2b c0       	rjmp	.+86     	; 0x1202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	a1 f4       	brne	.+40     	; 0x11da <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_writePin+0x194>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_writePin+0x190>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_writePin+0x1bc>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_writePin+0x1b8>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <GPIO_readPin+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_readPin+0x8>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1224:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	08 f0       	brcs	.+2      	; 0x122e <GPIO_readPin+0x1c>
    122c:	84 c0       	rjmp	.+264    	; 0x1336 <GPIO_readPin+0x124>
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <GPIO_readPin+0x24>
    1234:	80 c0       	rjmp	.+256    	; 0x1336 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	4c 81       	ldd	r20, Y+4	; 0x04
    1242:	5d 81       	ldd	r21, Y+5	; 0x05
    1244:	41 30       	cpi	r20, 0x01	; 1
    1246:	51 05       	cpc	r21, r1
    1248:	79 f1       	breq	.+94     	; 0x12a8 <GPIO_readPin+0x96>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	34 f4       	brge	.+12     	; 0x1260 <GPIO_readPin+0x4e>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	69 f0       	breq	.+26     	; 0x1278 <GPIO_readPin+0x66>
    125e:	6b c0       	rjmp	.+214    	; 0x1336 <GPIO_readPin+0x124>
    1260:	4c 81       	ldd	r20, Y+4	; 0x04
    1262:	5d 81       	ldd	r21, Y+5	; 0x05
    1264:	42 30       	cpi	r20, 0x02	; 2
    1266:	51 05       	cpc	r21, r1
    1268:	b9 f1       	breq	.+110    	; 0x12d8 <GPIO_readPin+0xc6>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <GPIO_readPin+0x64>
    1274:	49 c0       	rjmp	.+146    	; 0x1308 <GPIO_readPin+0xf6>
    1276:	5f c0       	rjmp	.+190    	; 0x1336 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1278:	e9 e3       	ldi	r30, 0x39	; 57
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_readPin+0x7e>
    128c:	55 95       	asr	r21
    128e:	47 95       	ror	r20
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_readPin+0x7a>
    1294:	ca 01       	movw	r24, r20
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	90 70       	andi	r25, 0x00	; 0
    129a:	88 23       	and	r24, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12a4:	19 82       	std	Y+1, r1	; 0x01
    12a6:	47 c0       	rjmp	.+142    	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_readPin+0xae>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_readPin+0xaa>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	88 23       	and	r24, r24
    12cc:	19 f0       	breq	.+6      	; 0x12d4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	31 c0       	rjmp	.+98     	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	2f c0       	rjmp	.+94     	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12d8:	e3 e3       	ldi	r30, 0x33	; 51
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_readPin+0xde>
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	8a 95       	dec	r24
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_readPin+0xda>
    12f4:	ca 01       	movw	r24, r20
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	90 70       	andi	r25, 0x00	; 0
    12fa:	88 23       	and	r24, r24
    12fc:	19 f0       	breq	.+6      	; 0x1304 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	17 c0       	rjmp	.+46     	; 0x1336 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1308:	e0 e3       	ldi	r30, 0x30	; 48
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a9 01       	movw	r20, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <GPIO_readPin+0x10e>
    131c:	55 95       	asr	r21
    131e:	47 95       	ror	r20
    1320:	8a 95       	dec	r24
    1322:	e2 f7       	brpl	.-8      	; 0x131c <GPIO_readPin+0x10a>
    1324:	ca 01       	movw	r24, r20
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	90 70       	andi	r25, 0x00	; 0
    132a:	88 23       	and	r24, r24
    132c:	19 f0       	breq	.+6      	; 0x1334 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1334:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_setupPortDirection+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <GPIO_setupPortDirection+0x8>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	90 f5       	brcc	.+100    	; 0x13c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3c 83       	std	Y+4, r19	; 0x04
    1366:	2b 83       	std	Y+3, r18	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <GPIO_setupPortDirection+0x5e>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <GPIO_setupPortDirection+0x3e>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <GPIO_setupPortDirection+0x54>
    1384:	1e c0       	rjmp	.+60     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	81 f0       	breq	.+32     	; 0x13b0 <GPIO_setupPortDirection+0x68>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <GPIO_setupPortDirection+0x72>
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    139c:	ea e3       	ldi	r30, 0x3A	; 58
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13b0:	e4 e3       	ldi	r30, 0x34	; 52
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <GPIO_writePort+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <GPIO_writePort+0x8>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	90 f5       	brcc	.+100    	; 0x144a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	d1 f0       	breq	.+52     	; 0x142e <GPIO_writePort+0x5e>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <GPIO_writePort+0x3e>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <GPIO_writePort+0x54>
    140c:	1e c0       	rjmp	.+60     	; 0x144a <GPIO_writePort+0x7a>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <GPIO_writePort+0x68>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	81 f0       	breq	.+32     	; 0x1442 <GPIO_writePort+0x72>
    1422:	13 c0       	rjmp	.+38     	; 0x144a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
    142c:	0e c0       	rjmp	.+28     	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
    1436:	09 c0       	rjmp	.+18     	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	04 c0       	rjmp	.+8      	; 0x144a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
			break;
		}
	}
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <GPIO_readPort+0x6>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <GPIO_readPort+0x8>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1466:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	90 f5       	brcc	.+100    	; 0x14d2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3c 83       	std	Y+4, r19	; 0x04
    1476:	2b 83       	std	Y+3, r18	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	d1 f0       	breq	.+52     	; 0x14b6 <GPIO_readPort+0x5e>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <GPIO_readPort+0x3e>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <GPIO_readPort+0x54>
    1494:	1e c0       	rjmp	.+60     	; 0x14d2 <GPIO_readPort+0x7a>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <GPIO_readPort+0x68>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	81 f0       	breq	.+32     	; 0x14ca <GPIO_readPort+0x72>
    14aa:	13 c0       	rjmp	.+38     	; 0x14d2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14ac:	e9 e3       	ldi	r30, 0x39	; 57
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14c0:	e3 e3       	ldi	r30, 0x33	; 51
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14ca:	e0 e3       	ldi	r30, 0x30	; 48
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <INT0_Init>:
#include "gpio.h"
#define INT0_Rising
#define INT1_Rising
#define INT2_Rising
void INT0_Init(void)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);//config interrupt as input
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT0);                  //enable interrupt
    14f4:	ab e5       	ldi	r26, 0x5B	; 91
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e5       	ldi	r30, 0x5B	; 91
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1502:	af e5       	ldi	r26, 0x5F	; 95
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ef e5       	ldi	r30, 0x5F	; 95
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24
#ifdef  INT0_Rising

	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	83 60       	ori	r24, 0x03	; 3
    151c:	8c 93       	st	X, r24
#else
	MCUCR |= (1<<ISC00);
	MCUCR &= ~(1<<ISC01);
#endif
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <INT1_Init>:

void INT1_Init(void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);//config interrupt as input
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT1);//enable interrupt
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1544:	af e5       	ldi	r26, 0x5F	; 95
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ef e5       	ldi	r30, 0x5F	; 95
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
#ifdef  INT1_Rising

	MCUCR |= (1<<ISC11) | (1<<ISC10);   // Trigger INT0 with the raising edge
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8c 60       	ori	r24, 0x0C	; 12
    155e:	8c 93       	st	X, r24
#else
	MCUCR |= (1<<ISC11);
	MCUCR &= ~(1<<ISC10);
#endif
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <INT2_Init>:
void INT2_Init(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);//config interrupt as input
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GICR  |= (1<<INT2);//enable interrupt
    1578:	ab e5       	ldi	r26, 0x5B	; 91
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	eb e5       	ldi	r30, 0x5B	; 91
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
#ifdef  INT2_Rising

	MCUCSR |= (1<<ISC2);  // Trigger INT0 with the raising edge
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	8c 93       	st	X, r24
#else
	MCUCSR &= ~(1<<ISC2);
#endif
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster( SPI_PRESCALLER  Config_Ptr)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	64 e0       	ldi	r22, 0x04	; 4
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	66 e0       	ldi	r22, 0x06	; 6
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	67 e0       	ldi	r22, 0x07	; 7
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	 * MSTR    = 1 Enable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    15dc:	ed e2       	ldi	r30, 0x2D	; 45
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 e5       	ldi	r24, 0x50	; 80
    15e2:	80 83       	st	Z, r24
	SPCR |= Config_Ptr; /* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
    15e4:	ad e2       	ldi	r26, 0x2D	; 45
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ed e2       	ldi	r30, 0x2D	; 45
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	90 81       	ld	r25, Z
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	89 2b       	or	r24, r25
    15f2:	8c 93       	st	X, r24
	SPSR &= ~(1<<SPI2X);
    15f4:	ae e2       	ldi	r26, 0x2E	; 46
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ee e2       	ldi	r30, 0x2E	; 46
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8e 7f       	andi	r24, 0xFE	; 254
    1600:	8c 93       	st	X, r24
#ifdef DOUBLE_SPEED
	SPSR |= (1<<SPI2X);
    1602:	ae e2       	ldi	r26, 0x2E	; 46
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e2       	ldi	r30, 0x2E	; 46
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	81 60       	ori	r24, 0x01	; 1
    160e:	8c 93       	st	X, r24
#endif
}
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	65 e0       	ldi	r22, 0x05	; 5
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	66 e0       	ldi	r22, 0x06	; 6
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	67 e0       	ldi	r22, 0x07	; 7
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	CLEAR_BIT(SPCR,SPCR_MSTR);
    1648:	ad e2       	ldi	r26, 0x2D	; 45
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ed e2       	ldi	r30, 0x2D	; 45
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7e       	andi	r24, 0xEF	; 239
    1654:	8c 93       	st	X, r24
	SPCR = (1<<SPE);
    1656:	ed e2       	ldi	r30, 0x2D	; 45
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 e4       	ldi	r24, 0x40	; 64
    165c:	80 83       	st	Z, r24

#ifdef DOUBLE_SPEED
	SPSR |= (1<<SPI2X);
    165e:	ae e2       	ldi	r26, 0x2E	; 46
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ee e2       	ldi	r30, 0x2E	; 46
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	8c 93       	st	X, r24
#endif
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    167e:	ef e2       	ldi	r30, 0x2F	; 47
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    1686:	ee e2       	ldi	r30, 0x2E	; 46
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    1690:	ef e2       	ldi	r30, 0x2F	; 47
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
}
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <SPI_sendString+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <SPI_sendString+0x8>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    16ae:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	fc 01       	movw	r30, r24
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	80 81       	ld	r24, Z
    16c6:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    16ca:	89 83       	std	Y+1, r24	; 0x01
		i++;
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	fc 01       	movw	r30, r24
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	80 81       	ld	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	31 f7       	brne	.-52     	; 0x16b4 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <SPI_receiveString+0xa>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    170a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	8c 01       	movw	r16, r24
    1718:	02 0f       	add	r16, r18
    171a:	13 1f       	adc	r17, r19
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	10 c0       	rjmp	.+32     	; 0x1748 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	8c 01       	movw	r16, r24
    173a:	02 0f       	add	r16, r18
    173c:	13 1f       	adc	r17, r19
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	0e 94 39 0b 	call	0x1672	; 0x1672 <SPI_sendReceiveByte>
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	fc 01       	movw	r30, r24
    1754:	e2 0f       	add	r30, r18
    1756:	f3 1f       	adc	r31, r19
    1758:	80 81       	ld	r24, Z
    175a:	83 32       	cpi	r24, 0x23	; 35
    175c:	29 f7       	brne	.-54     	; 0x1728 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	9b 81       	ldd	r25, Y+3	; 0x03
    1768:	fc 01       	movw	r30, r24
    176a:	e2 0f       	add	r30, r18
    176c:	f3 1f       	adc	r31, r19
    176e:	10 82       	st	Z, r1
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <__vector_5>:
uint16 g_timePeriodPlusHigh = 0;

 */

 ISR(TIMER2_OVF_vect)
{
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_CALLBACK_Fptr != NULL_PTR)
    17aa:	80 91 78 01 	lds	r24, 0x0178
    17ae:	90 91 79 01 	lds	r25, 0x0179
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <__vector_5+0x40>
	{
		(*Timer2_CALLBACK_Fptr)();
    17b6:	e0 91 78 01 	lds	r30, 0x0178
    17ba:	f0 91 79 01 	lds	r31, 0x0179
    17be:	09 95       	icall
	}
}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_CALLBACK_Fptr != NULL_PTR)
    1810:	80 91 78 01 	lds	r24, 0x0178
    1814:	90 91 79 01 	lds	r25, 0x0179
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	29 f0       	breq	.+10     	; 0x1826 <__vector_4+0x40>
	{
		(*Timer2_CALLBACK_Fptr)();
    181c:	e0 91 78 01 	lds	r30, 0x0178
    1820:	f0 91 79 01 	lds	r31, 0x0179
    1824:	09 95       	icall
	}

}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	bf 91       	pop	r27
    1830:	af 91       	pop	r26
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	7f 91       	pop	r23
    1838:	6f 91       	pop	r22
    183a:	5f 91       	pop	r21
    183c:	4f 91       	pop	r20
    183e:	3f 91       	pop	r19
    1840:	2f 91       	pop	r18
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1876:	80 91 7a 01 	lds	r24, 0x017A
    187a:	90 91 7b 01 	lds	r25, 0x017B
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	29 f0       	breq	.+10     	; 0x188c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1882:	e0 91 7a 01 	lds	r30, 0x017A
    1886:	f0 91 7b 01 	lds	r31, 0x017B
    188a:	09 95       	icall
	}
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_CALLBACK_Fptr != NULL_PTR)
    18dc:	80 91 76 01 	lds	r24, 0x0176
    18e0:	90 91 77 01 	lds	r25, 0x0177
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <__vector_9+0x40>
	{
		(*Timer1_CALLBACK_Fptr)();
    18e8:	e0 91 76 01 	lds	r30, 0x0176
    18ec:	f0 91 77 01 	lds	r31, 0x0177
    18f0:	09 95       	icall
	}
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_11>:
		(*Timer1_CALLBACK_Fptr)();
	}
}
 */
ISR(TIMER0_OVF_vect)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    1942:	80 91 74 01 	lds	r24, 0x0174
    1946:	90 91 75 01 	lds	r25, 0x0175
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	29 f0       	breq	.+10     	; 0x1958 <__vector_11+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    194e:	e0 91 74 01 	lds	r30, 0x0174
    1952:	f0 91 75 01 	lds	r31, 0x0175
    1956:	09 95       	icall
	}
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    19a8:	80 91 74 01 	lds	r24, 0x0174
    19ac:	90 91 75 01 	lds	r25, 0x0175
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	29 f0       	breq	.+10     	; 0x19be <__vector_10+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    19b4:	e0 91 74 01 	lds	r30, 0x0174
    19b8:	f0 91 75 01 	lds	r31, 0x0175
    19bc:	09 95       	icall
	}
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <TIMER0_init>:


void TIMER0_init(const Timer0_ConfigType * Config_Ptr)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <TIMER0_init+0x6>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |= Config_Ptr->prescaler;
    19f2:	a3 e5       	ldi	r26, 0x53	; 83
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e3 e5       	ldi	r30, 0x53	; 83
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	90 81       	ld	r25, Z
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	85 81       	ldd	r24, Z+5	; 0x05
    1a02:	89 2b       	or	r24, r25
    1a04:	8c 93       	st	X, r24
	TCNT0 = Config_Ptr->initial_value;
    1a06:	a2 e5       	ldi	r26, 0x52	; 82
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    1a14:	a9 e5       	ldi	r26, 0x59	; 89
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 e5       	ldi	r30, 0x59	; 89
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	81 60       	ori	r24, 0x01	; 1
    1a20:	8c 93       	st	X, r24
	if ((Config_Ptr->mode) == TIMER0_NORMAL_MODE)
    1a22:	e9 81       	ldd	r30, Y+1	; 0x01
    1a24:	fa 81       	ldd	r31, Y+2	; 0x02
    1a26:	84 81       	ldd	r24, Z+4	; 0x04
    1a28:	88 23       	and	r24, r24
    1a2a:	21 f5       	brne	.+72     	; 0x1a74 <TIMER0_init+0x90>
	{
		SET_BIT(TCCR0,FOC0);//disable non-pwm
    1a2c:	a3 e5       	ldi	r26, 0x53	; 83
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e3 e5       	ldi	r30, 0x53	; 83
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 68       	ori	r24, 0x80	; 128
    1a38:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1a3a:	a3 e5       	ldi	r26, 0x53	; 83
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e5       	ldi	r30, 0x53	; 83
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 7b       	andi	r24, 0xBF	; 191
    1a46:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);//choose normal mode
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	87 7f       	andi	r24, 0xF7	; 247
    1a54:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1a56:	a3 e5       	ldi	r26, 0x53	; 83
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e3 e5       	ldi	r30, 0x53	; 83
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 7e       	andi	r24, 0xEF	; 239
    1a62:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);//normal operation OC0 disconnected
    1a64:	a3 e5       	ldi	r26, 0x53	; 83
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e3 e5       	ldi	r30, 0x53	; 83
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 7d       	andi	r24, 0xDF	; 223
    1a70:	8c 93       	st	X, r24
    1a72:	7a c0       	rjmp	.+244    	; 0x1b68 <TIMER0_init+0x184>
		//enable interrupt

	}
	else if ((Config_Ptr->mode) == TIMER0_PWM_PHASE_COTROL)
    1a74:	e9 81       	ldd	r30, Y+1	; 0x01
    1a76:	fa 81       	ldd	r31, Y+2	; 0x02
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	e9 f4       	brne	.+58     	; 0x1ab8 <TIMER0_init+0xd4>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);
    1a7e:	a3 e5       	ldi	r26, 0x53	; 83
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e3 e5       	ldi	r30, 0x53	; 83
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	80 64       	ori	r24, 0x40	; 64
    1a8a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);//choose PHASE_CONTROL
    1a8c:	a3 e5       	ldi	r26, 0x53	; 83
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e3 e5       	ldi	r30, 0x53	; 83
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	87 7f       	andi	r24, 0xF7	; 247
    1a98:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1a9a:	a3 e5       	ldi	r26, 0x53	; 83
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8f 7e       	andi	r24, 0xEF	; 239
    1aa6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);//normal operation OC0 disconnected
    1aa8:	a3 e5       	ldi	r26, 0x53	; 83
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e3 e5       	ldi	r30, 0x53	; 83
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 7d       	andi	r24, 0xDF	; 223
    1ab4:	8c 93       	st	X, r24
    1ab6:	58 c0       	rjmp	.+176    	; 0x1b68 <TIMER0_init+0x184>

	}

	else if ((Config_Ptr->mode) == TIMER0_COMPARE_MODE)
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	84 81       	ldd	r24, Z+4	; 0x04
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	91 f5       	brne	.+100    	; 0x1b26 <TIMER0_init+0x142>

	{
		SET_BIT(TCCR0,FOC0);//disable non-pwm
    1ac2:	a3 e5       	ldi	r26, 0x53	; 83
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e3 e5       	ldi	r30, 0x53	; 83
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	8c 93       	st	X, r24

		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1ad0:	a3 e5       	ldi	r26, 0x53	; 83
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e3 e5       	ldi	r30, 0x53	; 83
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8f 7b       	andi	r24, 0xBF	; 191
    1adc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);//enable COMPARE mode
    1ade:	a3 e5       	ldi	r26, 0x53	; 83
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e3 e5       	ldi	r30, 0x53	; 83
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 60       	ori	r24, 0x08	; 8
    1aea:	8c 93       	st	X, r24
		//disconnect oc0 and meke compare normal mode
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1aec:	a3 e5       	ldi	r26, 0x53	; 83
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e3 e5       	ldi	r30, 0x53	; 83
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 7e       	andi	r24, 0xEF	; 239
    1af8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1afa:	a3 e5       	ldi	r26, 0x53	; 83
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e3 e5       	ldi	r30, 0x53	; 83
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 7d       	andi	r24, 0xDF	; 223
    1b06:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,OCIE0);
    1b08:	a9 e5       	ldi	r26, 0x59	; 89
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e9 e5       	ldi	r30, 0x59	; 89
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	82 60       	ori	r24, 0x02	; 2
    1b14:	8c 93       	st	X, r24
		OCR0=Config_Ptr->compare_value;//compare value
    1b16:	ac e5       	ldi	r26, 0x5C	; 92
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	8c 93       	st	X, r24
    1b24:	21 c0       	rjmp	.+66     	; 0x1b68 <TIMER0_init+0x184>
	}
	else if((Config_Ptr->mode) == TIMER0_FAST_PWM_MODE)
    1b26:	e9 81       	ldd	r30, Y+1	; 0x01
    1b28:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	e1 f4       	brne	.+56     	; 0x1b68 <TIMER0_init+0x184>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);
    1b30:	a3 e5       	ldi	r26, 0x53	; 83
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e3 e5       	ldi	r30, 0x53	; 83
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 64       	ori	r24, 0x40	; 64
    1b3c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);//enable FAST PWM MODE
    1b3e:	a3 e5       	ldi	r26, 0x53	; 83
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e3 e5       	ldi	r30, 0x53	; 83
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 60       	ori	r24, 0x08	; 8
    1b4a:	8c 93       	st	X, r24

		//disconnect oc0 and meke FAST PWM NORMAL MODE
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1b4c:	a3 e5       	ldi	r26, 0x53	; 83
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e3 e5       	ldi	r30, 0x53	; 83
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8f 7e       	andi	r24, 0xEF	; 239
    1b58:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1b5a:	a3 e5       	ldi	r26, 0x53	; 83
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e3 e5       	ldi	r30, 0x53	; 83
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	8c 93       	st	X, r24
	}

}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <TIMER0_deInit>:

void TIMER0_deInit(void)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1b7a:	e3 e5       	ldi	r30, 0x53	; 83
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	10 82       	st	Z, r1
	TCNT0 = 0;
    1b80:	e2 e5       	ldi	r30, 0x52	; 82
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);
    1b86:	a9 e5       	ldi	r26, 0x59	; 89
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 e5       	ldi	r30, 0x59	; 89
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8e 7f       	andi	r24, 0xFE	; 254
    1b92:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);
    1b94:	a8 e5       	ldi	r26, 0x58	; 88
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e8 e5       	ldi	r30, 0x58	; 88
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8e 7f       	andi	r24, 0xFE	; 254
    1ba0:	8c 93       	st	X, r24
	OCR0 = 0;
    1ba2:	ec e5       	ldi	r30, 0x5C	; 92
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1ba8:	a9 e5       	ldi	r26, 0x59	; 89
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e9 e5       	ldi	r30, 0x59	; 89
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8d 7f       	andi	r24, 0xFD	; 253
    1bb4:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF0);
    1bb6:	a8 e5       	ldi	r26, 0x58	; 88
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e8 e5       	ldi	r30, 0x58	; 88
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8d 7f       	andi	r24, 0xFD	; 253
    1bc2:	8c 93       	st	X, r24
	Timer0_CALLBACK_Fptr = NULL_PTR;
    1bc4:	10 92 75 01 	sts	0x0175, r1
    1bc8:	10 92 74 01 	sts	0x0174, r1
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <delay0>:




void delay0(uint32 seconds)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	28 97       	sbiw	r28, 0x08	; 8
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	6d 83       	std	Y+5, r22	; 0x05
    1be8:	7e 83       	std	Y+6, r23	; 0x06
    1bea:	8f 83       	std	Y+7, r24	; 0x07
    1bec:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    1bee:	10 92 8d 01 	sts	0x018D, r1
    1bf2:	10 92 8e 01 	sts	0x018E, r1
    1bf6:	10 92 8f 01 	sts	0x018F, r1
    1bfa:	10 92 90 01 	sts	0x0190, r1
	uint32 tick = seconds;
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	af 81       	ldd	r26, Y+7	; 0x07
    1c04:	b8 85       	ldd	r27, Y+8	; 0x08
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	ab 83       	std	Y+3, r26	; 0x03
    1c0c:	bc 83       	std	Y+4, r27	; 0x04
	TIMER0_setCallBack(&TIMER0_tick);
    1c0e:	87 e2       	ldi	r24, 0x27	; 39
    1c10:	9e e0       	ldi	r25, 0x0E	; 14
    1c12:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TIMER0_setCallBack>
	while(g_tick  < tick);
    1c16:	20 91 8d 01 	lds	r18, 0x018D
    1c1a:	30 91 8e 01 	lds	r19, 0x018E
    1c1e:	40 91 8f 01 	lds	r20, 0x018F
    1c22:	50 91 90 01 	lds	r21, 0x0190
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c2e:	28 17       	cp	r18, r24
    1c30:	39 07       	cpc	r19, r25
    1c32:	4a 07       	cpc	r20, r26
    1c34:	5b 07       	cpc	r21, r27
    1c36:	78 f3       	brcs	.-34     	; 0x1c16 <delay0+0x44>
	TIMER0_deInit();
    1c38:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <TIMER0_deInit>
}
    1c3c:	28 96       	adiw	r28, 0x08	; 8
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <TIMER0_tick>:

void TIMER0_tick(void)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1c56:	80 91 8d 01 	lds	r24, 0x018D
    1c5a:	90 91 8e 01 	lds	r25, 0x018E
    1c5e:	a0 91 8f 01 	lds	r26, 0x018F
    1c62:	b0 91 90 01 	lds	r27, 0x0190
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	80 93 8d 01 	sts	0x018D, r24
    1c70:	90 93 8e 01 	sts	0x018E, r25
    1c74:	a0 93 8f 01 	sts	0x018F, r26
    1c78:	b0 93 90 01 	sts	0x0190, r27
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <TIMER0_setCallBack>:

void TIMER0_setCallBack(void(*Copy_pvCallBackFunc)(void))
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <TIMER0_setCallBack+0x6>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CALLBACK_Fptr=Copy_pvCallBackFunc;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	90 93 75 01 	sts	0x0175, r25
    1c98:	80 93 74 01 	sts	0x0174, r24
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <PWM_TIMER0_Start>:

void PWM_TIMER0_Start(uint8 duty_cycle)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <PWM_TIMER0_Start+0x6>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 timer_value=((uint16)(duty_cycle*255)/100);
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	ca 01       	movw	r24, r20
    1cba:	9c 01       	movw	r18, r24
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	96 95       	lsr	r25
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	88 27       	eor	r24, r24
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	82 1b       	sub	r24, r18
    1cce:	93 0b       	sbc	r25, r19
    1cd0:	84 0f       	add	r24, r20
    1cd2:	95 1f       	adc	r25, r21
    1cd4:	24 e6       	ldi	r18, 0x64	; 100
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <__udivmodhi4>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR0,TCNT0);
    1ce2:	a3 e5       	ldi	r26, 0x53	; 83
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e3 e5       	ldi	r30, 0x53	; 83
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	e2 e5       	ldi	r30, 0x52	; 82
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <PWM_TIMER0_Start+0x5c>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	2a 95       	dec	r18
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <PWM_TIMER0_Start+0x58>
    1d06:	80 95       	com	r24
    1d08:	84 23       	and	r24, r20
    1d0a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_FOC0);
    1d0c:	a3 e5       	ldi	r26, 0x53	; 83
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e3 e5       	ldi	r30, 0x53	; 83
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 77       	andi	r24, 0x7F	; 127
    1d18:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    1d1a:	a9 e5       	ldi	r26, 0x59	; 89
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e9 e5       	ldi	r30, 0x59	; 89
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	81 60       	ori	r24, 0x01	; 1
    1d26:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01); //non inverting mode
    1d28:	a3 e5       	ldi	r26, 0x53	; 83
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e3 e5       	ldi	r30, 0x53	; 83
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 62       	ori	r24, 0x20	; 32
    1d34:	8c 93       	st	X, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	63 e0       	ldi	r22, 0x03	; 3
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	OCR0=timer_value;
    1d40:	ec e5       	ldi	r30, 0x5C	; 92
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	80 83       	st	Z, r24
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <TIMER1_init>:


void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <TIMER1_init+0x6>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = Config_Ptr->prescaler;
    1d60:	ae e4       	ldi	r26, 0x4E	; 78
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	87 81       	ldd	r24, Z+7	; 0x07
    1d6a:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    1d6c:	ac e4       	ldi	r26, 0x4C	; 76
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e9 81       	ldd	r30, Y+1	; 0x01
    1d72:	fa 81       	ldd	r31, Y+2	; 0x02
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	9c 93       	st	X, r25
    1d7c:	8e 93       	st	-X, r24
	SET_BIT(TCCR1A,COM1A0);
    1d7e:	af e4       	ldi	r26, 0x4F	; 79
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ef e4       	ldi	r30, 0x4F	; 79
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 64       	ori	r24, 0x40	; 64
    1d8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B0);
    1d8c:	af e4       	ldi	r26, 0x4F	; 79
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef e4       	ldi	r30, 0x4F	; 79
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 61       	ori	r24, 0x10	; 16
    1d98:	8c 93       	st	X, r24

	if ((Config_Ptr->mode)==TIMER1_NORMAL_MODE)
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	86 81       	ldd	r24, Z+6	; 0x06
    1da0:	88 23       	and	r24, r24
    1da2:	21 f5       	brne	.+72     	; 0x1dec <TIMER1_init+0x9a>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1da4:	af e4       	ldi	r26, 0x4F	; 79
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ef e4       	ldi	r30, 0x4F	; 79
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8e 7f       	andi	r24, 0xFE	; 254
    1db0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1db2:	af e4       	ldi	r26, 0x4F	; 79
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef e4       	ldi	r30, 0x4F	; 79
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8d 7f       	andi	r24, 0xFD	; 253
    1dbe:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1dc0:	ae e4       	ldi	r26, 0x4E	; 78
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ee e4       	ldi	r30, 0x4E	; 78
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	87 7f       	andi	r24, 0xF7	; 247
    1dcc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    1dce:	ae e4       	ldi	r26, 0x4E	; 78
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	ee e4       	ldi	r30, 0x4E	; 78
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 7e       	andi	r24, 0xEF	; 239
    1dda:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE1);
    1ddc:	a9 e5       	ldi	r26, 0x59	; 89
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e9 e5       	ldi	r30, 0x59	; 89
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	84 60       	ori	r24, 0x04	; 4
    1de8:	8c 93       	st	X, r24
    1dea:	d9 c0       	rjmp	.+434    	; 0x1f9e <TIMER1_init+0x24c>
	}
	else if ((Config_Ptr->mode)==TIMER1_COMPARE_OCR1A)
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	86 81       	ldd	r24, Z+6	; 0x06
    1df2:	84 30       	cpi	r24, 0x04	; 4
    1df4:	59 f5       	brne	.+86     	; 0x1e4c <TIMER1_init+0xfa>
	{
		TIMSK |= (1<<OCIE1A);
    1df6:	a9 e5       	ldi	r26, 0x59	; 89
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e9 e5       	ldi	r30, 0x59	; 89
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 61       	ori	r24, 0x10	; 16
    1e02:	8c 93       	st	X, r24
		TCCR1A |= (1<<FOC1A);
    1e04:	af e4       	ldi	r26, 0x4F	; 79
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ef e4       	ldi	r30, 0x4F	; 79
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 60       	ori	r24, 0x08	; 8
    1e10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1e12:	af e4       	ldi	r26, 0x4F	; 79
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e4       	ldi	r30, 0x4F	; 79
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8e 7f       	andi	r24, 0xFE	; 254
    1e1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1e20:	af e4       	ldi	r26, 0x4F	; 79
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	ef e4       	ldi	r30, 0x4F	; 79
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8d 7f       	andi	r24, 0xFD	; 253
    1e2c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1e2e:	ae e4       	ldi	r26, 0x4E	; 78
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ee e4       	ldi	r30, 0x4E	; 78
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 60       	ori	r24, 0x08	; 8
    1e3a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    1e3c:	ae e4       	ldi	r26, 0x4E	; 78
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ee e4       	ldi	r30, 0x4E	; 78
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 7e       	andi	r24, 0xEF	; 239
    1e48:	8c 93       	st	X, r24
    1e4a:	a9 c0       	rjmp	.+338    	; 0x1f9e <TIMER1_init+0x24c>

	}

	else if  ((Config_Ptr->mode)==TIMER1_PWM_Phase_Correct_ICR1)
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	8a 30       	cpi	r24, 0x0A	; 10
    1e54:	e9 f4       	brne	.+58     	; 0x1e90 <TIMER1_init+0x13e>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1e56:	af e4       	ldi	r26, 0x4F	; 79
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ef e4       	ldi	r30, 0x4F	; 79
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8e 7f       	andi	r24, 0xFE	; 254
    1e62:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1e64:	af e4       	ldi	r26, 0x4F	; 79
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ef e4       	ldi	r30, 0x4F	; 79
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	82 60       	ori	r24, 0x02	; 2
    1e70:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1e72:	ae e4       	ldi	r26, 0x4E	; 78
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ee e4       	ldi	r30, 0x4E	; 78
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	87 7f       	andi	r24, 0xF7	; 247
    1e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e80:	ae e4       	ldi	r26, 0x4E	; 78
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ee e4       	ldi	r30, 0x4E	; 78
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 61       	ori	r24, 0x10	; 16
    1e8c:	8c 93       	st	X, r24
    1e8e:	87 c0       	rjmp	.+270    	; 0x1f9e <TIMER1_init+0x24c>
	}
	else if  ((Config_Ptr->mode)==TIMER1_PWM_Phase_Correct_OCR1A)
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	86 81       	ldd	r24, Z+6	; 0x06
    1e96:	8b 30       	cpi	r24, 0x0B	; 11
    1e98:	e9 f4       	brne	.+58     	; 0x1ed4 <TIMER1_init+0x182>
	{
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1e9a:	af e4       	ldi	r26, 0x4F	; 79
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ef e4       	ldi	r30, 0x4F	; 79
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	81 60       	ori	r24, 0x01	; 1
    1ea6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1ea8:	af e4       	ldi	r26, 0x4F	; 79
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ef e4       	ldi	r30, 0x4F	; 79
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	82 60       	ori	r24, 0x02	; 2
    1eb4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1eb6:	ae e4       	ldi	r26, 0x4E	; 78
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ee e4       	ldi	r30, 0x4E	; 78
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	87 7f       	andi	r24, 0xF7	; 247
    1ec2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1ec4:	ae e4       	ldi	r26, 0x4E	; 78
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ee e4       	ldi	r30, 0x4E	; 78
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 61       	ori	r24, 0x10	; 16
    1ed0:	8c 93       	st	X, r24
    1ed2:	65 c0       	rjmp	.+202    	; 0x1f9e <TIMER1_init+0x24c>
	}
	else if  ((Config_Ptr->mode)==TIMER1_COMPARE_ICR1)
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	86 81       	ldd	r24, Z+6	; 0x06
    1eda:	8c 30       	cpi	r24, 0x0C	; 12
    1edc:	e9 f4       	brne	.+58     	; 0x1f18 <TIMER1_init+0x1c6>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1ede:	af e4       	ldi	r26, 0x4F	; 79
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	ef e4       	ldi	r30, 0x4F	; 79
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8e 7f       	andi	r24, 0xFE	; 254
    1eea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1eec:	af e4       	ldi	r26, 0x4F	; 79
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ef e4       	ldi	r30, 0x4F	; 79
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8d 7f       	andi	r24, 0xFD	; 253
    1ef8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1efa:	ae e4       	ldi	r26, 0x4E	; 78
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ee e4       	ldi	r30, 0x4E	; 78
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 60       	ori	r24, 0x08	; 8
    1f06:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f08:	ae e4       	ldi	r26, 0x4E	; 78
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	ee e4       	ldi	r30, 0x4E	; 78
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 61       	ori	r24, 0x10	; 16
    1f14:	8c 93       	st	X, r24
    1f16:	43 c0       	rjmp	.+134    	; 0x1f9e <TIMER1_init+0x24c>
	}
	else if  ((Config_Ptr->mode)==TIMER1_FAST_PWM_ICR1)
    1f18:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	8e 30       	cpi	r24, 0x0E	; 14
    1f20:	e9 f4       	brne	.+58     	; 0x1f5c <TIMER1_init+0x20a>
	{
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1f22:	af e4       	ldi	r26, 0x4F	; 79
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ef e4       	ldi	r30, 0x4F	; 79
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8e 7f       	andi	r24, 0xFE	; 254
    1f2e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f30:	af e4       	ldi	r26, 0x4F	; 79
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ef e4       	ldi	r30, 0x4F	; 79
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	82 60       	ori	r24, 0x02	; 2
    1f3c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f3e:	ae e4       	ldi	r26, 0x4E	; 78
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ee e4       	ldi	r30, 0x4E	; 78
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 60       	ori	r24, 0x08	; 8
    1f4a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f4c:	ae e4       	ldi	r26, 0x4E	; 78
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ee e4       	ldi	r30, 0x4E	; 78
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 61       	ori	r24, 0x10	; 16
    1f58:	8c 93       	st	X, r24
    1f5a:	21 c0       	rjmp	.+66     	; 0x1f9e <TIMER1_init+0x24c>
	}
	else if  ((Config_Ptr->mode)==TIMER1_FAST_PWM_OCR1A)
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	86 81       	ldd	r24, Z+6	; 0x06
    1f62:	8f 30       	cpi	r24, 0x0F	; 15
    1f64:	e1 f4       	brne	.+56     	; 0x1f9e <TIMER1_init+0x24c>
	{
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1f66:	af e4       	ldi	r26, 0x4F	; 79
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ef e4       	ldi	r30, 0x4F	; 79
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 60       	ori	r24, 0x01	; 1
    1f72:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f74:	af e4       	ldi	r26, 0x4F	; 79
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ef e4       	ldi	r30, 0x4F	; 79
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	82 60       	ori	r24, 0x02	; 2
    1f80:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f82:	ae e4       	ldi	r26, 0x4E	; 78
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	ee e4       	ldi	r30, 0x4E	; 78
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	88 60       	ori	r24, 0x08	; 8
    1f8e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f90:	ae e4       	ldi	r26, 0x4E	; 78
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ee e4       	ldi	r30, 0x4E	; 78
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 61       	ori	r24, 0x10	; 16
    1f9c:	8c 93       	st	X, r24
	}



#ifdef OCIE1A
	SET_BIT(TIMSK,OCIE1A);
    1f9e:	a9 e5       	ldi	r26, 0x59	; 89
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e9 e5       	ldi	r30, 0x59	; 89
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 61       	ori	r24, 0x10	; 16
    1faa:	8c 93       	st	X, r24
	OCR1A=Config_Ptr->compare_value_A;
    1fac:	aa e4       	ldi	r26, 0x4A	; 74
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	11 96       	adiw	r26, 0x01	; 1
    1fba:	9c 93       	st	X, r25
    1fbc:	8e 93       	st	-X, r24

#endif
#ifdef OCIE1B
	SET_BIT(TIMSK,OCIE1B);
    1fbe:	a9 e5       	ldi	r26, 0x59	; 89
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e9 e5       	ldi	r30, 0x59	; 89
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 60       	ori	r24, 0x08	; 8
    1fca:	8c 93       	st	X, r24
	OCR1B=Config_Ptr->compare_value_B;
    1fcc:	a8 e4       	ldi	r26, 0x48	; 72
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	84 81       	ldd	r24, Z+4	; 0x04
    1fd6:	95 81       	ldd	r25, Z+5	; 0x05
    1fd8:	11 96       	adiw	r26, 0x01	; 1
    1fda:	9c 93       	st	X, r25
    1fdc:	8e 93       	st	-X, r24
#endif
#ifdef TICIE1
	SET_BIT(TIMSK,TICIE1);
    1fde:	a9 e5       	ldi	r26, 0x59	; 89
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e9 e5       	ldi	r30, 0x59	; 89
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 62       	ori	r24, 0x20	; 32
    1fea:	8c 93       	st	X, r24
#endif
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <TIMER1_deInit>:



void TIMER1_deInit(void)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1ffe:	ef e4       	ldi	r30, 0x4F	; 79
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	10 82       	st	Z, r1
	TCCR1B = 0;
    2004:	ee e4       	ldi	r30, 0x4E	; 78
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	10 82       	st	Z, r1
	TCNT1 =  0;
    200a:	ec e4       	ldi	r30, 0x4C	; 76
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	11 82       	std	Z+1, r1	; 0x01
    2010:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);
    2012:	a9 e5       	ldi	r26, 0x59	; 89
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e9 e5       	ldi	r30, 0x59	; 89
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8b 7f       	andi	r24, 0xFB	; 251
    201e:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV1);
    2020:	a8 e5       	ldi	r26, 0x58	; 88
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e8 e5       	ldi	r30, 0x58	; 88
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8b 7f       	andi	r24, 0xFB	; 251
    202c:	8c 93       	st	X, r24
	OCR1A = 0;
    202e:	ea e4       	ldi	r30, 0x4A	; 74
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	11 82       	std	Z+1, r1	; 0x01
    2034:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    2036:	a9 e5       	ldi	r26, 0x59	; 89
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e9 e5       	ldi	r30, 0x59	; 89
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 7e       	andi	r24, 0xEF	; 239
    2042:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);
    2044:	a8 e5       	ldi	r26, 0x58	; 88
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e8 e5       	ldi	r30, 0x58	; 88
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8f 7e       	andi	r24, 0xEF	; 239
    2050:	8c 93       	st	X, r24
	Timer1_CALLBACK_Fptr = NULL_PTR;
    2052:	10 92 77 01 	sts	0x0177, r1
    2056:	10 92 76 01 	sts	0x0176, r1
}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <delay1>:
/* timer to count second*/

void delay1(uint32 seconds){
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	28 97       	sbiw	r28, 0x08	; 8
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	6d 83       	std	Y+5, r22	; 0x05
    2076:	7e 83       	std	Y+6, r23	; 0x06
    2078:	8f 83       	std	Y+7, r24	; 0x07
    207a:	98 87       	std	Y+8, r25	; 0x08

	g_tick1 = 0;
    207c:	10 92 89 01 	sts	0x0189, r1
    2080:	10 92 8a 01 	sts	0x018A, r1
    2084:	10 92 8b 01 	sts	0x018B, r1
    2088:	10 92 8c 01 	sts	0x018C, r1
	uint32 tick = seconds;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	af 81       	ldd	r26, Y+7	; 0x07
    2092:	b8 85       	ldd	r27, Y+8	; 0x08
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	ab 83       	std	Y+3, r26	; 0x03
    209a:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_setCallBack(&TIMER1_tick);
    209c:	8e e6       	ldi	r24, 0x6E	; 110
    209e:	90 e1       	ldi	r25, 0x10	; 16
    20a0:	0e 94 88 10 	call	0x2110	; 0x2110 <TIMER1_setCallBack>
	while(g_tick1  < tick);
    20a4:	20 91 89 01 	lds	r18, 0x0189
    20a8:	30 91 8a 01 	lds	r19, 0x018A
    20ac:	40 91 8b 01 	lds	r20, 0x018B
    20b0:	50 91 8c 01 	lds	r21, 0x018C
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ba:	bc 81       	ldd	r27, Y+4	; 0x04
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	4a 07       	cpc	r20, r26
    20c2:	5b 07       	cpc	r21, r27
    20c4:	78 f3       	brcs	.-34     	; 0x20a4 <delay1+0x44>
	TIMER1_deInit();
    20c6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TIMER1_deInit>
}
    20ca:	28 96       	adiw	r28, 0x08	; 8
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <TIMER1_tick>:
void TIMER1_tick(void){
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	g_tick1++;
    20e4:	80 91 89 01 	lds	r24, 0x0189
    20e8:	90 91 8a 01 	lds	r25, 0x018A
    20ec:	a0 91 8b 01 	lds	r26, 0x018B
    20f0:	b0 91 8c 01 	lds	r27, 0x018C
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	a1 1d       	adc	r26, r1
    20f8:	b1 1d       	adc	r27, r1
    20fa:	80 93 89 01 	sts	0x0189, r24
    20fe:	90 93 8a 01 	sts	0x018A, r25
    2102:	a0 93 8b 01 	sts	0x018B, r26
    2106:	b0 93 8c 01 	sts	0x018C, r27
}
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <TIMER1_setCallBack>:
void TIMER1_setCallBack(void(*a_ptr)(void))
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <TIMER1_setCallBack+0x6>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_CALLBACK_Fptr = a_ptr;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	90 93 77 01 	sts	0x0177, r25
    2126:	80 93 76 01 	sts	0x0176, r24
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <TIMER1_ICU_Enable>:

void TIMER1_ICU_Enable(const Icu_ConfigType * Config_Ptr)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <TIMER1_ICU_Enable+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    2142:	83 e0       	ldi	r24, 0x03	; 3
    2144:	66 e0       	ldi	r22, 0x06	; 6
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    214c:	ef e4       	ldi	r30, 0x4F	; 79
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	8c e0       	ldi	r24, 0x0C	; 12
    2152:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    2154:	ae e4       	ldi	r26, 0x4E	; 78
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ee e4       	ldi	r30, 0x4E	; 78
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	98 2f       	mov	r25, r24
    2160:	98 7f       	andi	r25, 0xF8	; 248
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	80 81       	ld	r24, Z
    2168:	89 2b       	or	r24, r25
    216a:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    216c:	ae e4       	ldi	r26, 0x4E	; 78
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ee e4       	ldi	r30, 0x4E	; 78
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	28 2f       	mov	r18, r24
    2178:	2f 7b       	andi	r18, 0xBF	; 191
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	81 81       	ldd	r24, Z+1	; 0x01
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	00 24       	eor	r0, r0
    2186:	96 95       	lsr	r25
    2188:	87 95       	ror	r24
    218a:	07 94       	ror	r0
    218c:	96 95       	lsr	r25
    218e:	87 95       	ror	r24
    2190:	07 94       	ror	r0
    2192:	98 2f       	mov	r25, r24
    2194:	80 2d       	mov	r24, r0
    2196:	82 2b       	or	r24, r18
    2198:	8c 93       	st	X, r24
	/* Initial Value for the input capture register */
	ICR1 = 0;
    219a:	e6 e4       	ldi	r30, 0x46	; 70
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	11 82       	std	Z+1, r1	; 0x01
    21a0:	10 82       	st	Z, r1
	/* Initial Value for Timer1 */
	TCNT1 = 0;
    21a2:	ec e4       	ldi	r30, 0x4C	; 76
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	11 82       	std	Z+1, r1	; 0x01
    21a8:	10 82       	st	Z, r1

	TIMSK |= (1<<TICIE1);/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
    21aa:	a9 e5       	ldi	r26, 0x59	; 89
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e9 e5       	ldi	r30, 0x59	; 89
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 62       	ori	r24, 0x20	; 32
    21b6:	8c 93       	st	X, r24

}
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <TIMER1_ICU_Disable>:

void TIMER1_ICU_Disable(void)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    21ca:	a9 e5       	ldi	r26, 0x59	; 89
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e9 e5       	ldi	r30, 0x59	; 89
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 7d       	andi	r24, 0xDF	; 223
    21d6:	8c 93       	st	X, r24
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <TIMER1_ICU_GetTCNT1>:

uint16 TIMER1_ICU_GetTCNT1(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    21e6:	e6 e4       	ldi	r30, 0x46	; 70
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <TIMER1_ICU_SetTCNT1>:

void TIMER1_ICU_SetTCNT1(uint16 new_tcnt1)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <TIMER1_ICU_SetTCNT1+0x6>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L = new_tcnt1;
    2202:	ec e4       	ldi	r30, 0x4C	; 76
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	80 83       	st	Z, r24
}
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <Icu_setCallBack>:


void Icu_setCallBack(void(*a_ptr)(void))
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <Icu_setCallBack+0x6>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	90 93 7b 01 	sts	0x017B, r25
    222a:	80 93 7a 01 	sts	0x017A, r24
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <Icu_setEdgeDetectionType>:

void Icu_setEdgeDetectionType(uint8 a_edgeType)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    2244:	ae e4       	ldi	r26, 0x4E	; 78
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ee e4       	ldi	r30, 0x4E	; 78
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	28 2f       	mov	r18, r24
    2250:	2f 7b       	andi	r18, 0xBF	; 191
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	00 24       	eor	r0, r0
    225a:	96 95       	lsr	r25
    225c:	87 95       	ror	r24
    225e:	07 94       	ror	r0
    2260:	96 95       	lsr	r25
    2262:	87 95       	ror	r24
    2264:	07 94       	ror	r0
    2266:	98 2f       	mov	r25, r24
    2268:	80 2d       	mov	r24, r0
    226a:	82 2b       	or	r24, r18
    226c:	8c 93       	st	X, r24
}
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <Icu_clearTimerValue>:
void Icu_clearTimerValue(void)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    227e:	ec e4       	ldi	r30, 0x4C	; 76
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	11 82       	std	Z+1, r1	; 0x01
    2284:	10 82       	st	Z, r1
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <TIMER2_init>:
	}
}
 */

void TIMER2_init(const Timer2_ConfigType * Config_Ptr)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <TIMER2_init+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01

	TCCR2 = Config_Ptr->prescaler;
    229a:	a5 e4       	ldi	r26, 0x45	; 69
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	85 81       	ldd	r24, Z+5	; 0x05
    22a4:	8c 93       	st	X, r24
	TCNT2 = Config_Ptr->initial_value;
    22a6:	a4 e4       	ldi	r26, 0x44	; 68
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE2);
    22b4:	a9 e5       	ldi	r26, 0x59	; 89
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	80 64       	ori	r24, 0x40	; 64
    22c0:	8c 93       	st	X, r24
	if ((Config_Ptr->mode) == TIMER2_NORMAL_MODE)
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	84 81       	ldd	r24, Z+4	; 0x04
    22c8:	88 23       	and	r24, r24
    22ca:	59 f5       	brne	.+86     	; 0x2322 <TIMER2_init+0x96>
	{
		SET_BIT(TCCR2,TCCR2_FOC02);//disable non-pwm
    22cc:	a5 e4       	ldi	r26, 0x45	; 69
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e5 e4       	ldi	r30, 0x45	; 69
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	80 68       	ori	r24, 0x80	; 128
    22d8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
    22da:	a5 e4       	ldi	r26, 0x45	; 69
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e5 e4       	ldi	r30, 0x45	; 69
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8f 7b       	andi	r24, 0xBF	; 191
    22e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    22e8:	a5 e4       	ldi	r26, 0x45	; 69
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e5 e4       	ldi	r30, 0x45	; 69
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	87 7f       	andi	r24, 0xF7	; 247
    22f4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    22f6:	a5 e4       	ldi	r26, 0x45	; 69
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e5 e4       	ldi	r30, 0x45	; 69
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8f 7e       	andi	r24, 0xEF	; 239
    2302:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2304:	a5 e4       	ldi	r26, 0x45	; 69
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e4       	ldi	r30, 0x45	; 69
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 7d       	andi	r24, 0xDF	; 223
    2310:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,TIMSK_TOIE2);
    2312:	a9 e5       	ldi	r26, 0x59	; 89
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e9 e5       	ldi	r30, 0x59	; 89
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	8c 93       	st	X, r24
    2320:	7a c0       	rjmp	.+244    	; 0x2416 <TIMER2_init+0x18a>
	}
	else if ((Config_Ptr->mode) == TIMER2_PWM_PHASE_COTROL)
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	84 81       	ldd	r24, Z+4	; 0x04
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	e9 f4       	brne	.+58     	; 0x2366 <TIMER2_init+0xda>
	{

		SET_BIT(TCCR2,TCCR2_WGM20);
    232c:	a5 e4       	ldi	r26, 0x45	; 69
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e5 e4       	ldi	r30, 0x45	; 69
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	80 64       	ori	r24, 0x40	; 64
    2338:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    233a:	a5 e4       	ldi	r26, 0x45	; 69
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e5 e4       	ldi	r30, 0x45	; 69
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	87 7f       	andi	r24, 0xF7	; 247
    2346:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    2348:	a5 e4       	ldi	r26, 0x45	; 69
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e5 e4       	ldi	r30, 0x45	; 69
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8f 7e       	andi	r24, 0xEF	; 239
    2354:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2356:	a5 e4       	ldi	r26, 0x45	; 69
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e4       	ldi	r30, 0x45	; 69
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 7d       	andi	r24, 0xDF	; 223
    2362:	8c 93       	st	X, r24
    2364:	58 c0       	rjmp	.+176    	; 0x2416 <TIMER2_init+0x18a>

	}

	else if ((Config_Ptr->mode) == TIMER2_COMPARE_MODE)
    2366:	e9 81       	ldd	r30, Y+1	; 0x01
    2368:	fa 81       	ldd	r31, Y+2	; 0x02
    236a:	84 81       	ldd	r24, Z+4	; 0x04
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	91 f5       	brne	.+100    	; 0x23d4 <TIMER2_init+0x148>

	{
		SET_BIT(TCCR2,TCCR2_FOC02);//enable non-pwm
    2370:	a5 e4       	ldi	r26, 0x45	; 69
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e4       	ldi	r30, 0x45	; 69
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	80 68       	ori	r24, 0x80	; 128
    237c:	8c 93       	st	X, r24
		OCR2=Config_Ptr->compare_value;//compare value
    237e:	a3 e4       	ldi	r26, 0x43	; 67
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
    238c:	a5 e4       	ldi	r26, 0x45	; 69
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e5 e4       	ldi	r30, 0x45	; 69
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8f 7b       	andi	r24, 0xBF	; 191
    2398:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    239a:	a5 e4       	ldi	r26, 0x45	; 69
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e5 e4       	ldi	r30, 0x45	; 69
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	88 60       	ori	r24, 0x08	; 8
    23a6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    23a8:	a5 e4       	ldi	r26, 0x45	; 69
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e5 e4       	ldi	r30, 0x45	; 69
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8f 7e       	andi	r24, 0xEF	; 239
    23b4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    23b6:	a5 e4       	ldi	r26, 0x45	; 69
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e5 e4       	ldi	r30, 0x45	; 69
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8f 7d       	andi	r24, 0xDF	; 223
    23c2:	8c 93       	st	X, r24
		//enable interrupt
		SET_BIT(TIMSK,TIMSK_OCIE2);
    23c4:	a9 e5       	ldi	r26, 0x59	; 89
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e9 e5       	ldi	r30, 0x59	; 89
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	8c 93       	st	X, r24
    23d2:	21 c0       	rjmp	.+66     	; 0x2416 <TIMER2_init+0x18a>
	}
	else if((Config_Ptr->mode) == TIMER2_FAST_PWM_MODE)
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	84 81       	ldd	r24, Z+4	; 0x04
    23da:	83 30       	cpi	r24, 0x03	; 3
    23dc:	e1 f4       	brne	.+56     	; 0x2416 <TIMER2_init+0x18a>
	{
		SET_BIT(TCCR2,TCCR2_WGM20);
    23de:	a5 e4       	ldi	r26, 0x45	; 69
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e4       	ldi	r30, 0x45	; 69
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	80 64       	ori	r24, 0x40	; 64
    23ea:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_WGM21);//choose normal mode
    23ec:	a5 e4       	ldi	r26, 0x45	; 69
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e4       	ldi	r30, 0x45	; 69
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	88 60       	ori	r24, 0x08	; 8
    23f8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    23fa:	a5 e4       	ldi	r26, 0x45	; 69
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e4       	ldi	r30, 0x45	; 69
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8f 7e       	andi	r24, 0xEF	; 239
    2406:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);//normal operation OC2 disconnected
    2408:	a5 e4       	ldi	r26, 0x45	; 69
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e5 e4       	ldi	r30, 0x45	; 69
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8f 7d       	andi	r24, 0xDF	; 223
    2414:	8c 93       	st	X, r24
	}

}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <TIMER2_deInit>:

void TIMER2_deInit(void)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    2428:	e5 e4       	ldi	r30, 0x45	; 69
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	10 82       	st	Z, r1
	TCNT2 = 0;
    242e:	e4 e4       	ldi	r30, 0x44	; 68
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TIMSK_TOIE2);
    2434:	a9 e5       	ldi	r26, 0x59	; 89
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e9 e5       	ldi	r30, 0x59	; 89
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 7b       	andi	r24, 0xBF	; 191
    2440:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV2);
    2442:	a8 e5       	ldi	r26, 0x58	; 88
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e8 e5       	ldi	r30, 0x58	; 88
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	8f 7b       	andi	r24, 0xBF	; 191
    244e:	8c 93       	st	X, r24
	OCR2 = 0;
    2450:	e3 e4       	ldi	r30, 0x43	; 67
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TIMSK_OCIE2);
    2456:	a9 e5       	ldi	r26, 0x59	; 89
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e9 e5       	ldi	r30, 0x59	; 89
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8f 77       	andi	r24, 0x7F	; 127
    2462:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF2);
    2464:	a8 e5       	ldi	r26, 0x58	; 88
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 e5       	ldi	r30, 0x58	; 88
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8f 77       	andi	r24, 0x7F	; 127
    2470:	8c 93       	st	X, r24
	Timer2_CALLBACK_Fptr = NULL_PTR;
    2472:	10 92 79 01 	sts	0x0179, r1
    2476:	10 92 78 01 	sts	0x0178, r1
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <delay2>:

void delay2(uint32 seconds)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	28 97       	sbiw	r28, 0x08	; 8
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	6d 83       	std	Y+5, r22	; 0x05
    2496:	7e 83       	std	Y+6, r23	; 0x06
    2498:	8f 83       	std	Y+7, r24	; 0x07
    249a:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    249c:	10 92 8d 01 	sts	0x018D, r1
    24a0:	10 92 8e 01 	sts	0x018E, r1
    24a4:	10 92 8f 01 	sts	0x018F, r1
    24a8:	10 92 90 01 	sts	0x0190, r1
	uint32 tick = seconds;
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	af 81       	ldd	r26, Y+7	; 0x07
    24b2:	b8 85       	ldd	r27, Y+8	; 0x08
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	ab 83       	std	Y+3, r26	; 0x03
    24ba:	bc 83       	std	Y+4, r27	; 0x04
	TIMER2_setCallBack(&TIMER2_tick);
    24bc:	8e e7       	ldi	r24, 0x7E	; 126
    24be:	92 e1       	ldi	r25, 0x12	; 18
    24c0:	0e 94 98 12 	call	0x2530	; 0x2530 <TIMER2_setCallBack>
	while(g_tick  < tick);
    24c4:	20 91 8d 01 	lds	r18, 0x018D
    24c8:	30 91 8e 01 	lds	r19, 0x018E
    24cc:	40 91 8f 01 	lds	r20, 0x018F
    24d0:	50 91 90 01 	lds	r21, 0x0190
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	ab 81       	ldd	r26, Y+3	; 0x03
    24da:	bc 81       	ldd	r27, Y+4	; 0x04
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	4a 07       	cpc	r20, r26
    24e2:	5b 07       	cpc	r21, r27
    24e4:	78 f3       	brcs	.-34     	; 0x24c4 <delay2+0x44>
	TIMER2_deInit();
    24e6:	0e 94 10 12 	call	0x2420	; 0x2420 <TIMER2_deInit>
}
    24ea:	28 96       	adiw	r28, 0x08	; 8
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <TIMER2_tick>:

void TIMER2_tick(void)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2504:	80 91 8d 01 	lds	r24, 0x018D
    2508:	90 91 8e 01 	lds	r25, 0x018E
    250c:	a0 91 8f 01 	lds	r26, 0x018F
    2510:	b0 91 90 01 	lds	r27, 0x0190
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	a1 1d       	adc	r26, r1
    2518:	b1 1d       	adc	r27, r1
    251a:	80 93 8d 01 	sts	0x018D, r24
    251e:	90 93 8e 01 	sts	0x018E, r25
    2522:	a0 93 8f 01 	sts	0x018F, r26
    2526:	b0 93 90 01 	sts	0x0190, r27
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <TIMER2_setCallBack>:

void TIMER2_setCallBack(void(*Copy_pvCallBackFunc)(void))
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <TIMER2_setCallBack+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	Timer2_CALLBACK_Fptr=Copy_pvCallBackFunc;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	90 93 79 01 	sts	0x0179, r25
    2546:	80 93 78 01 	sts	0x0178, r24
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <PWM_TIMER2_Start>:


void PWM_TIMER2_Start(uint8 duty_cycle)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <PWM_TIMER2_Start+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_value=((uint16)(duty_cycle*255)/100);
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	48 2f       	mov	r20, r24
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	ca 01       	movw	r24, r20
    2568:	9c 01       	movw	r18, r24
    256a:	22 0f       	add	r18, r18
    256c:	33 1f       	adc	r19, r19
    256e:	c9 01       	movw	r24, r18
    2570:	96 95       	lsr	r25
    2572:	98 2f       	mov	r25, r24
    2574:	88 27       	eor	r24, r24
    2576:	97 95       	ror	r25
    2578:	87 95       	ror	r24
    257a:	82 1b       	sub	r24, r18
    257c:	93 0b       	sbc	r25, r19
    257e:	84 0f       	add	r24, r20
    2580:	95 1f       	adc	r25, r21
    2582:	24 e6       	ldi	r18, 0x64	; 100
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	b9 01       	movw	r22, r18
    2588:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <__udivmodhi4>
    258c:	cb 01       	movw	r24, r22
    258e:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR2,TCNT2);
    2590:	a5 e4       	ldi	r26, 0x45	; 69
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e5 e4       	ldi	r30, 0x45	; 69
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	e4 e4       	ldi	r30, 0x44	; 68
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <PWM_TIMER2_Start+0x5c>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	2a 95       	dec	r18
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <PWM_TIMER2_Start+0x58>
    25b4:	80 95       	com	r24
    25b6:	84 23       	and	r24, r20
    25b8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_FOC02);
    25ba:	a5 e4       	ldi	r26, 0x45	; 69
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e4       	ldi	r30, 0x45	; 69
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 77       	andi	r24, 0x7F	; 127
    25c6:	8c 93       	st	X, r24
	TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    25c8:	a5 e4       	ldi	r26, 0x45	; 69
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e4       	ldi	r30, 0x45	; 69
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8c 66       	ori	r24, 0x6C	; 108
    25d4:	8c 93       	st	X, r24
	GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	67 e0       	ldi	r22, 0x07	; 7
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	OCR2=timer_value;
    25e0:	e3 e4       	ldi	r30, 0x43	; 67
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	80 83       	st	Z, r24
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <TWI_init>:

#include <avr/io.h>
#include "../LIB/common_macros.h"

void TWI_init(uint8 Copy_uint8MasterAddress)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    25fe:	e0 e2       	ldi	r30, 0x20	; 32
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	80 83       	st	Z, r24
	TWSR = 0x00;
    2606:	e1 e2       	ldi	r30, 0x21	; 33
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	if(Copy_uint8MasterAddress!=0)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	88 23       	and	r24, r24
    2610:	29 f0       	breq	.+10     	; 0x261c <TWI_init+0x2a>
	{
		TWAR=Copy_uint8MasterAddress<<1;
    2612:	e2 e2       	ldi	r30, 0x22	; 34
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	88 0f       	add	r24, r24
    261a:	80 83       	st	Z, r24
	} // my address = 0x01 :)

	TWCR = (1<<TWEN); /* enable TWI */
    261c:	e6 e5       	ldi	r30, 0x56	; 86
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	84 e0       	ldi	r24, 0x04	; 4
    2622:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,6);
    2624:	a6 e5       	ldi	r26, 0x56	; 86
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e6 e5       	ldi	r30, 0x56	; 86
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 64       	ori	r24, 0x40	; 64
    2630:	8c 93       	st	X, r24
}
    2632:	0f 90       	pop	r0
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(uint8 Copy_uint8SlaveAddress)
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	89 83       	std	Y+1, r24	; 0x01
	/*Initialization the node address*/
	TWAR=Copy_uint8SlaveAddress<<1;
    2646:	e2 e2       	ldi	r30, 0x22	; 34
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	88 0f       	add	r24, r24
    264e:	80 83       	st	Z, r24
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    2650:	a6 e5       	ldi	r26, 0x56	; 86
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e6 e5       	ldi	r30, 0x56	; 86
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	84 60       	ori	r24, 0x04	; 4
    265c:	8c 93       	st	X, r24
}
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <TWI_start>:
void TWI_start(void)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	84 ea       	ldi	r24, 0xA4	; 164
    2674:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2676:	e6 e5       	ldi	r30, 0x56	; 86
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	88 23       	and	r24, r24
    267e:	dc f7       	brge	.-10     	; 0x2676 <TWI_start+0x10>
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <TWI_stop>:

void TWI_stop(void)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    268e:	e6 e5       	ldi	r30, 0x56	; 86
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	84 e9       	ldi	r24, 0x94	; 148
    2694:	80 83       	st	Z, r24
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <I2C_SendSlaveAddressWithWrite>:

I2C_ErrorState I2C_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAddress)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <I2C_SendSlaveAddressWithWrite+0x6>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    26a8:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    26aa:	a6 e5       	ldi	r26, 0x56	; 86
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e6 e5       	ldi	r30, 0x56	; 86
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 7d       	andi	r24, 0xDF	; 223
    26b6:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    26b8:	e3 e2       	ldi	r30, 0x23	; 35
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	88 0f       	add	r24, r24
    26c0:	80 83       	st	Z, r24
	/*write request*/
	CLEAR_BIT(TWDR,0);
    26c2:	a3 e2       	ldi	r26, 0x23	; 35
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e3 e2       	ldi	r30, 0x23	; 35
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	8e 7f       	andi	r24, 0xFE	; 254
    26ce:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    26d0:	a6 e5       	ldi	r26, 0x56	; 86
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 68       	ori	r24, 0x80	; 128
    26dc:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    26de:	e6 e5       	ldi	r30, 0x56	; 86
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	88 23       	and	r24, r24
    26e6:	dc f7       	brge	.-10     	; 0x26de <I2C_SendSlaveAddressWithWrite+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_WR_ACK)
    26e8:	e1 e2       	ldi	r30, 0x21	; 33
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	88 7f       	andi	r24, 0xF8	; 248
    26f4:	90 70       	andi	r25, 0x00	; 0
    26f6:	88 31       	cpi	r24, 0x18	; 24
    26f8:	91 05       	cpc	r25, r1
    26fa:	11 f0       	breq	.+4      	; 0x2700 <I2C_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus=SlaveAddressWithWriteErr;
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    2700:	89 81       	ldd	r24, Y+1	; 0x01
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <I2C_SendSlaveAddressWithRead>:
I2C_ErrorState I2C_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAddress)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <I2C_SendSlaveAddressWithRead+0x6>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    2718:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    271a:	a6 e5       	ldi	r26, 0x56	; 86
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e6 e5       	ldi	r30, 0x56	; 86
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7d       	andi	r24, 0xDF	; 223
    2726:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    2728:	e3 e2       	ldi	r30, 0x23	; 35
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	88 0f       	add	r24, r24
    2730:	80 83       	st	Z, r24
	/*read request*/
	SET_BIT(TWDR,0);
    2732:	a3 e2       	ldi	r26, 0x23	; 35
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e3 e2       	ldi	r30, 0x23	; 35
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	81 60       	ori	r24, 0x01	; 1
    273e:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    2740:	a6 e5       	ldi	r26, 0x56	; 86
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e6 e5       	ldi	r30, 0x56	; 86
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	80 68       	ori	r24, 0x80	; 128
    274c:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    274e:	e6 e5       	ldi	r30, 0x56	; 86
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	88 1f       	adc	r24, r24
    2756:	88 27       	eor	r24, r24
    2758:	88 1f       	adc	r24, r24
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	90 70       	andi	r25, 0x00	; 0
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	a9 f3       	breq	.-22     	; 0x274e <I2C_SendSlaveAddressWithRead+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_RD_ACK )
    2764:	e1 e2       	ldi	r30, 0x21	; 33
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	88 7f       	andi	r24, 0xF8	; 248
    2770:	90 70       	andi	r25, 0x00	; 0
    2772:	80 34       	cpi	r24, 0x40	; 64
    2774:	91 05       	cpc	r25, r1
    2776:	11 f0       	breq	.+4      	; 0x277c <I2C_SendSlaveAddressWithRead+0x70>
	{
		Local_ErrStatus=SlaveAddressWithReadErr;
    2778:	84 e0       	ldi	r24, 0x04	; 4
    277a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    277c:	89 81       	ldd	r24, Y+1	; 0x01
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	0f 92       	push	r0
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2794:	e3 e2       	ldi	r30, 0x23	; 35
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    279c:	e6 e5       	ldi	r30, 0x56	; 86
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	84 e8       	ldi	r24, 0x84	; 132
    27a2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    27a4:	e6 e5       	ldi	r30, 0x56	; 86
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 23       	and	r24, r24
    27ac:	dc f7       	brge	.-10     	; 0x27a4 <TWI_writeByte+0x1c>
}
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    27be:	e6 e5       	ldi	r30, 0x56	; 86
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	84 ec       	ldi	r24, 0xC4	; 196
    27c4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    27c6:	e6 e5       	ldi	r30, 0x56	; 86
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	88 23       	and	r24, r24
    27ce:	dc f7       	brge	.-10     	; 0x27c6 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    27d0:	e3 e2       	ldi	r30, 0x23	; 35
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    27e4:	e6 e5       	ldi	r30, 0x56	; 86
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	84 e8       	ldi	r24, 0x84	; 132
    27ea:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    27ec:	e6 e5       	ldi	r30, 0x56	; 86
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	88 23       	and	r24, r24
    27f4:	dc f7       	brge	.-10     	; 0x27ec <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    27f6:	e3 e2       	ldi	r30, 0x23	; 35
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
}
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	0f 92       	push	r0
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    280c:	e1 e2       	ldi	r30, 0x21	; 33
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	88 7f       	andi	r24, 0xF8	; 248
    2814:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
}
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	00 d0       	rcall	.+0      	; 0x2826 <UART_init+0x6>
    2826:	00 d0       	rcall	.+0      	; 0x2828 <UART_init+0x8>
    2828:	00 d0       	rcall	.+0      	; 0x282a <UART_init+0xa>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	6b 83       	std	Y+3, r22	; 0x03
    2830:	7c 83       	std	Y+4, r23	; 0x04
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	9e 83       	std	Y+6, r25	; 0x06
    //Asynchronous
	uint16 ubrr_value = 0;
    2836:	1a 82       	std	Y+2, r1	; 0x02
    2838:	19 82       	std	Y+1, r1	; 0x01
    #ifdef  DOUBLE_SPEED
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    283a:	eb e2       	ldi	r30, 0x2B	; 43
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2842:	ea e2       	ldi	r30, 0x2A	; 42
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	88 e1       	ldi	r24, 0x18	; 24
    2848:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    284a:	e0 e4       	ldi	r30, 0x40	; 64
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	86 e8       	ldi	r24, 0x86	; 134
    2850:	80 83       	st	Z, r24

	 #ifdef  DOUBLE_SPEED
	/* Calculate the UBRR register value  DOUBLE SOEED MODE*/
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	ad 81       	ldd	r26, Y+5	; 0x05
    2858:	be 81       	ldd	r27, Y+6	; 0x06
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	aa 1f       	adc	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	aa 1f       	adc	r26, r26
    2870:	bb 1f       	adc	r27, r27
    2872:	9c 01       	movw	r18, r24
    2874:	ad 01       	movw	r20, r26
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	92 e1       	ldi	r25, 0x12	; 18
    287a:	aa e7       	ldi	r26, 0x7A	; 122
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__udivmodsi4>
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01

#endif


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2890:	e0 e4       	ldi	r30, 0x40	; 64
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	89 2f       	mov	r24, r25
    289a:	99 27       	eor	r25, r25
    289c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    289e:	e9 e2       	ldi	r30, 0x29	; 41
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	80 83       	st	Z, r24
}
    28a6:	26 96       	adiw	r28, 0x06	; 6
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	0f 92       	push	r0
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28c4:	eb e2       	ldi	r30, 0x2B	; 43
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	80 72       	andi	r24, 0x20	; 32
    28d0:	90 70       	andi	r25, 0x00	; 0
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	b9 f3       	breq	.-18     	; 0x28c4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    28d6:	ec e2       	ldi	r30, 0x2C	; 44
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    28ee:	eb e2       	ldi	r30, 0x2B	; 43
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	88 23       	and	r24, r24
    28f6:	dc f7       	brge	.-10     	; 0x28ee <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    28f8:	ec e2       	ldi	r30, 0x2C	; 44
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
}
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <UART_sendString+0x6>
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9b 83       	std	Y+3, r25	; 0x03
    2912:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2914:	19 82       	std	Y+1, r1	; 0x01
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	80 81       	ld	r24, Z
    292a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_sendByte>
		i++;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	88 23       	and	r24, r24
    2948:	39 f7       	brne	.-50     	; 0x2918 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <UART_receiveString+0xa>
    2960:	0f 92       	push	r0
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	9b 83       	std	Y+3, r25	; 0x03
    2968:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    296a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	8c 01       	movw	r16, r24
    2978:	02 0f       	add	r16, r18
    297a:	13 1f       	adc	r17, r19
    297c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_recieveByte>
    2980:	f8 01       	movw	r30, r16
    2982:	80 83       	st	Z, r24
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	8f 5f       	subi	r24, 0xFF	; 255
    298a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	9b 81       	ldd	r25, Y+3	; 0x03
    2996:	8c 01       	movw	r16, r24
    2998:	02 0f       	add	r16, r18
    299a:	13 1f       	adc	r17, r19
    299c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_recieveByte>
    29a0:	f8 01       	movw	r30, r16
    29a2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	9b 81       	ldd	r25, Y+3	; 0x03
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 0f       	add	r30, r18
    29b2:	f3 1f       	adc	r31, r19
    29b4:	80 81       	ld	r24, Z
    29b6:	83 32       	cpi	r24, 0x23	; 35
    29b8:	31 f7       	brne	.-52     	; 0x2986 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	fc 01       	movw	r30, r24
    29c6:	e2 0f       	add	r30, r18
    29c8:	f3 1f       	adc	r31, r19
    29ca:	10 82       	st	Z, r1
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	08 95       	ret

000029dc <INIT_SevenSegment_Display>:
#include <util/delay.h>
#include "../LIB/common_macros.h"
#include "../MCAL/gpio.h"

void INIT_SevenSegment_Display()
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
#ifdef COMMON_CATHOD

	GPIO_setupPinDirection(COMMON_CATHOD_PORT_ID,COMMON_CATHOD_PIN_ID,PIN_OUTPUT);     // configure pin 6 in PORTC as output pin
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	66 e0       	ldi	r22, 0x06	; 6
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(COMMON_CATHOD_PORT_ID, COMMON_CATHOD_PIN_ID, LOGIC_LOW);// Set pin 6 in PORTC with value 1 to enable the BJT NPN transistor to connect the first 7-segment common to the ground(common cathode)
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	66 e0       	ldi	r22, 0x06	; 6
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, PIN_OUTPUT);
#elif (SevenSegmentMode == 7)
	// configure pins as output from PA1 --> PA7
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, PIN_OUTPUT);
    29f8:	82 e0       	ldi	r24, 0x02	; 2
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, PIN_OUTPUT);
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	62 e0       	ldi	r22, 0x02	; 2
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, PIN_OUTPUT);
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	63 e0       	ldi	r22, 0x03	; 3
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, PIN_OUTPUT);
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	64 e0       	ldi	r22, 0x04	; 4
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, PIN_OUTPUT);
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	65 e0       	ldi	r22, 0x05	; 5
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, PIN_OUTPUT);
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	66 e0       	ldi	r22, 0x06	; 6
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, PIN_OUTPUT);
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	67 e0       	ldi	r22, 0x07	; 7
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#endif
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <Display_SevenSegment>:
void Display_SevenSegment(unsigned char value)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <Display_SevenSegment+0x6>
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
	}


#elif (SevenSegmentMode == 7)
#ifdef COMMON_CATHOD
	switch(value)
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3b 83       	std	Y+3, r19	; 0x03
    2a5a:	2a 83       	std	Y+2, r18	; 0x02
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	84 30       	cpi	r24, 0x04	; 4
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <Display_SevenSegment+0x24>
    2a66:	d7 c0       	rjmp	.+430    	; 0x2c16 <Display_SevenSegment+0x1d2>
    2a68:	2a 81       	ldd	r18, Y+2	; 0x02
    2a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a6c:	25 30       	cpi	r18, 0x05	; 5
    2a6e:	31 05       	cpc	r19, r1
    2a70:	ec f4       	brge	.+58     	; 0x2aac <Display_SevenSegment+0x68>
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	91 05       	cpc	r25, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <Display_SevenSegment+0x3a>
    2a7c:	60 c0       	rjmp	.+192    	; 0x2b3e <Display_SevenSegment+0xfa>
    2a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a80:	3b 81       	ldd	r19, Y+3	; 0x03
    2a82:	22 30       	cpi	r18, 0x02	; 2
    2a84:	31 05       	cpc	r19, r1
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <Display_SevenSegment+0x4e>
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	99 f1       	breq	.+102    	; 0x2af6 <Display_SevenSegment+0xb2>
    2a90:	99 c1       	rjmp	.+818    	; 0x2dc4 <Display_SevenSegment+0x380>
    2a92:	2a 81       	ldd	r18, Y+2	; 0x02
    2a94:	3b 81       	ldd	r19, Y+3	; 0x03
    2a96:	22 30       	cpi	r18, 0x02	; 2
    2a98:	31 05       	cpc	r19, r1
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <Display_SevenSegment+0x5a>
    2a9c:	74 c0       	rjmp	.+232    	; 0x2b86 <Display_SevenSegment+0x142>
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	83 30       	cpi	r24, 0x03	; 3
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <Display_SevenSegment+0x66>
    2aa8:	92 c0       	rjmp	.+292    	; 0x2bce <Display_SevenSegment+0x18a>
    2aaa:	8c c1       	rjmp	.+792    	; 0x2dc4 <Display_SevenSegment+0x380>
    2aac:	2a 81       	ldd	r18, Y+2	; 0x02
    2aae:	3b 81       	ldd	r19, Y+3	; 0x03
    2ab0:	27 30       	cpi	r18, 0x07	; 7
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <Display_SevenSegment+0x74>
    2ab6:	1b c1       	rjmp	.+566    	; 0x2cee <Display_SevenSegment+0x2aa>
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	88 30       	cpi	r24, 0x08	; 8
    2abe:	91 05       	cpc	r25, r1
    2ac0:	6c f4       	brge	.+26     	; 0x2adc <Display_SevenSegment+0x98>
    2ac2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ac4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ac6:	25 30       	cpi	r18, 0x05	; 5
    2ac8:	31 05       	cpc	r19, r1
    2aca:	09 f4       	brne	.+2      	; 0x2ace <Display_SevenSegment+0x8a>
    2acc:	c8 c0       	rjmp	.+400    	; 0x2c5e <Display_SevenSegment+0x21a>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	86 30       	cpi	r24, 0x06	; 6
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <Display_SevenSegment+0x96>
    2ad8:	e6 c0       	rjmp	.+460    	; 0x2ca6 <Display_SevenSegment+0x262>
    2ada:	74 c1       	rjmp	.+744    	; 0x2dc4 <Display_SevenSegment+0x380>
    2adc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ade:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae0:	28 30       	cpi	r18, 0x08	; 8
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <Display_SevenSegment+0xa4>
    2ae6:	27 c1       	rjmp	.+590    	; 0x2d36 <Display_SevenSegment+0x2f2>
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	89 30       	cpi	r24, 0x09	; 9
    2aee:	91 05       	cpc	r25, r1
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <Display_SevenSegment+0xb0>
    2af2:	45 c1       	rjmp	.+650    	; 0x2d7e <Display_SevenSegment+0x33a>
    2af4:	67 c1       	rjmp	.+718    	; 0x2dc4 <Display_SevenSegment+0x380>
	{
	case 0:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	63 e0       	ldi	r22, 0x03	; 3
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	64 e0       	ldi	r22, 0x04	; 4
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	65 e0       	ldi	r22, 0x05	; 5
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	66 e0       	ldi	r22, 0x06	; 6
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	67 e0       	ldi	r22, 0x07	; 7
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2b3c:	43 c1       	rjmp	.+646    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 1:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_LOW);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	61 e0       	ldi	r22, 0x01	; 1
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	62 e0       	ldi	r22, 0x02	; 2
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	63 e0       	ldi	r22, 0x03	; 3
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	65 e0       	ldi	r22, 0x05	; 5
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	66 e0       	ldi	r22, 0x06	; 6
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2b7a:	82 e0       	ldi	r24, 0x02	; 2
    2b7c:	67 e0       	ldi	r22, 0x07	; 7
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2b84:	1f c1       	rjmp	.+574    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 2:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_LOW);
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	63 e0       	ldi	r22, 0x03	; 3
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	64 e0       	ldi	r22, 0x04	; 4
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	65 e0       	ldi	r22, 0x05	; 5
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	66 e0       	ldi	r22, 0x06	; 6
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	67 e0       	ldi	r22, 0x07	; 7
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2bcc:	fb c0       	rjmp	.+502    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 3:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	61 e0       	ldi	r22, 0x01	; 1
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	62 e0       	ldi	r22, 0x02	; 2
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	63 e0       	ldi	r22, 0x03	; 3
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	64 e0       	ldi	r22, 0x04	; 4
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	65 e0       	ldi	r22, 0x05	; 5
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	66 e0       	ldi	r22, 0x06	; 6
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	67 e0       	ldi	r22, 0x07	; 7
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2c14:	d7 c0       	rjmp	.+430    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 4:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_LOW);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	63 e0       	ldi	r22, 0x03	; 3
    2c2e:	41 e0       	ldi	r20, 0x01	; 1
    2c30:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2c34:	82 e0       	ldi	r24, 0x02	; 2
    2c36:	64 e0       	ldi	r22, 0x04	; 4
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	65 e0       	ldi	r22, 0x05	; 5
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	66 e0       	ldi	r22, 0x06	; 6
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	67 e0       	ldi	r22, 0x07	; 7
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2c5c:	b3 c0       	rjmp	.+358    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 5:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	61 e0       	ldi	r22, 0x01	; 1
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_LOW);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	63 e0       	ldi	r22, 0x03	; 3
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	64 e0       	ldi	r22, 0x04	; 4
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	65 e0       	ldi	r22, 0x05	; 5
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	66 e0       	ldi	r22, 0x06	; 6
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	67 e0       	ldi	r22, 0x07	; 7
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2ca4:	8f c0       	rjmp	.+286    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 6:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	41 e0       	ldi	r20, 0x01	; 1
    2cac:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_LOW);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	62 e0       	ldi	r22, 0x02	; 2
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	63 e0       	ldi	r22, 0x03	; 3
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	64 e0       	ldi	r22, 0x04	; 4
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	65 e0       	ldi	r22, 0x05	; 5
    2cd2:	41 e0       	ldi	r20, 0x01	; 1
    2cd4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	66 e0       	ldi	r22, 0x06	; 6
    2cdc:	41 e0       	ldi	r20, 0x01	; 1
    2cde:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	67 e0       	ldi	r22, 0x07	; 7
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2cec:	6b c0       	rjmp	.+214    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 7:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	62 e0       	ldi	r22, 0x02	; 2
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	63 e0       	ldi	r22, 0x03	; 3
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	64 e0       	ldi	r22, 0x04	; 4
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	65 e0       	ldi	r22, 0x05	; 5
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_LOW);
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	66 e0       	ldi	r22, 0x06	; 6
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_LOW);
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	67 e0       	ldi	r22, 0x07	; 7
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2d34:	47 c0       	rjmp	.+142    	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 8:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	61 e0       	ldi	r22, 0x01	; 1
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	62 e0       	ldi	r22, 0x02	; 2
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	63 e0       	ldi	r22, 0x03	; 3
    2d4e:	41 e0       	ldi	r20, 0x01	; 1
    2d50:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_HIGH);
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	64 e0       	ldi	r22, 0x04	; 4
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_HIGH);
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	65 e0       	ldi	r22, 0x05	; 5
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	66 e0       	ldi	r22, 0x06	; 6
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	67 e0       	ldi	r22, 0x07	; 7
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    2d7c:	23 c0       	rjmp	.+70     	; 0x2dc4 <Display_SevenSegment+0x380>
		break;
	case 9:
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN1_ID, LOGIC_HIGH);
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	61 e0       	ldi	r22, 0x01	; 1
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN2_ID, LOGIC_HIGH);
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN3_ID, LOGIC_HIGH);
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN4_ID, LOGIC_LOW);
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	64 e0       	ldi	r22, 0x04	; 4
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN5_ID, LOGIC_LOW);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	65 e0       	ldi	r22, 0x05	; 5
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN6_ID, LOGIC_HIGH);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	66 e0       	ldi	r22, 0x06	; 6
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		GPIO_writePin(SevenSegment_PORT_ID, SevenSegment_PIN7_ID, LOGIC_HIGH);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	67 e0       	ldi	r22, 0x07	; 7
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
		}

#endif

#endif
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <EEPROM_writeByte+0x6>
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <EEPROM_writeByte+0x8>
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2de2:	0e 94 33 13 	call	0x2666	; 0x2666 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2de6:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2dea:	88 30       	cpi	r24, 0x08	; 8
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <EEPROM_writeByte+0x22>
        return ERROR;
    2dee:	1c 82       	std	Y+4, r1	; 0x04
    2df0:	28 c0       	rjmp	.+80     	; 0x2e42 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	9a 81       	ldd	r25, Y+2	; 0x02
    2df6:	80 70       	andi	r24, 0x00	; 0
    2df8:	97 70       	andi	r25, 0x07	; 7
    2dfa:	88 0f       	add	r24, r24
    2dfc:	89 2f       	mov	r24, r25
    2dfe:	88 1f       	adc	r24, r24
    2e00:	99 0b       	sbc	r25, r25
    2e02:	91 95       	neg	r25
    2e04:	80 6a       	ori	r24, 0xA0	; 160
    2e06:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2e0a:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2e0e:	88 31       	cpi	r24, 0x18	; 24
    2e10:	11 f0       	breq	.+4      	; 0x2e16 <EEPROM_writeByte+0x46>
        return ERROR;
    2e12:	1c 82       	std	Y+4, r1	; 0x04
    2e14:	16 c0       	rjmp	.+44     	; 0x2e42 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e1c:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2e20:	88 32       	cpi	r24, 0x28	; 40
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <EEPROM_writeByte+0x58>
        return ERROR;
    2e24:	1c 82       	std	Y+4, r1	; 0x04
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e2e:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2e32:	88 32       	cpi	r24, 0x28	; 40
    2e34:	11 f0       	breq	.+4      	; 0x2e3a <EEPROM_writeByte+0x6a>
        return ERROR;
    2e36:	1c 82       	std	Y+4, r1	; 0x04
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2e3a:	0e 94 43 13 	call	0x2686	; 0x2686 <TWI_stop>

    return SUCCESS;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8c 83       	std	Y+4, r24	; 0x04
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <EEPROM_readByte+0x6>
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <EEPROM_readByte+0x8>
    2e5a:	0f 92       	push	r0
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	7c 83       	std	Y+4, r23	; 0x04
    2e66:	6b 83       	std	Y+3, r22	; 0x03
    //*** we did that because the eeprom doesn't have a cpu to take decission****//



	/* Send the Start Bit */
    TWI_start();
    2e68:	0e 94 33 13 	call	0x2666	; 0x2666 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2e6c:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2e70:	88 30       	cpi	r24, 0x08	; 8
    2e72:	11 f0       	breq	.+4      	; 0x2e78 <EEPROM_readByte+0x26>
        return ERROR;
    2e74:	1d 82       	std	Y+5, r1	; 0x05
    2e76:	44 c0       	rjmp	.+136    	; 0x2f00 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	80 70       	andi	r24, 0x00	; 0
    2e7e:	97 70       	andi	r25, 0x07	; 7
    2e80:	88 0f       	add	r24, r24
    2e82:	89 2f       	mov	r24, r25
    2e84:	88 1f       	adc	r24, r24
    2e86:	99 0b       	sbc	r25, r25
    2e88:	91 95       	neg	r25
    2e8a:	80 6a       	ori	r24, 0xA0	; 160
    2e8c:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2e90:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2e94:	88 31       	cpi	r24, 0x18	; 24
    2e96:	11 f0       	breq	.+4      	; 0x2e9c <EEPROM_readByte+0x4a>
        return ERROR;
    2e98:	1d 82       	std	Y+5, r1	; 0x05
    2e9a:	32 c0       	rjmp	.+100    	; 0x2f00 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2ea2:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2ea6:	88 32       	cpi	r24, 0x28	; 40
    2ea8:	11 f0       	breq	.+4      	; 0x2eae <EEPROM_readByte+0x5c>
        return ERROR;
    2eaa:	1d 82       	std	Y+5, r1	; 0x05
    2eac:	29 c0       	rjmp	.+82     	; 0x2f00 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2eae:	0e 94 33 13 	call	0x2666	; 0x2666 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2eb2:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2eb6:	80 31       	cpi	r24, 0x10	; 16
    2eb8:	11 f0       	breq	.+4      	; 0x2ebe <EEPROM_readByte+0x6c>
        return ERROR;
    2eba:	1d 82       	std	Y+5, r1	; 0x05
    2ebc:	21 c0       	rjmp	.+66     	; 0x2f00 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	80 70       	andi	r24, 0x00	; 0
    2ec4:	97 70       	andi	r25, 0x07	; 7
    2ec6:	88 0f       	add	r24, r24
    2ec8:	89 2f       	mov	r24, r25
    2eca:	88 1f       	adc	r24, r24
    2ecc:	99 0b       	sbc	r25, r25
    2ece:	91 95       	neg	r25
    2ed0:	81 6a       	ori	r24, 0xA1	; 161
    2ed2:	0e 94 c4 13 	call	0x2788	; 0x2788 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2ed6:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2eda:	80 34       	cpi	r24, 0x40	; 64
    2edc:	11 f0       	breq	.+4      	; 0x2ee2 <EEPROM_readByte+0x90>
        return ERROR;
    2ede:	1d 82       	std	Y+5, r1	; 0x05
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2ee2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <TWI_readByteWithNACK>
    2ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eea:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2eec:	0e 94 01 14 	call	0x2802	; 0x2802 <TWI_getStatus>
    2ef0:	88 35       	cpi	r24, 0x58	; 88
    2ef2:	11 f0       	breq	.+4      	; 0x2ef8 <EEPROM_readByte+0xa6>
        return ERROR;
    2ef4:	1d 82       	std	Y+5, r1	; 0x05
    2ef6:	04 c0       	rjmp	.+8      	; 0x2f00 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2ef8:	0e 94 43 13 	call	0x2686	; 0x2686 <TWI_stop>

    return SUCCESS;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	60 97       	sbiw	r28, 0x10	; 16
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	61 e0       	ldi	r22, 0x01	; 1
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	62 e0       	ldi	r22, 0x02	; 2
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	63 e0       	ldi	r22, 0x03	; 3
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_INPUT);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	64 e0       	ldi	r22, 0x04	; 4
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	65 e0       	ldi	r22, 0x05	; 5
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	66 e0       	ldi	r22, 0x06	; 6
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	67 e0       	ldi	r22, 0x07	; 7
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2f76:	1f 86       	std	Y+15, r1	; 0x0f
    2f78:	ab c0       	rjmp	.+342    	; 0x30d0 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2f8e:	18 8a       	std	Y+16, r1	; 0x10
    2f90:	22 c0       	rjmp	.+68     	; 0x2fd6 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2f92:	88 89       	ldd	r24, Y+16	; 0x10
    2f94:	98 2f       	mov	r25, r24
    2f96:	9c 5f       	subi	r25, 0xFC	; 252
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	69 2f       	mov	r22, r25
    2f9c:	0e 94 09 09 	call	0x1212	; 0x1212 <GPIO_readPin>
    2fa0:	88 23       	and	r24, r24
    2fa2:	b1 f4       	brne	.+44     	; 0x2fd0 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	88 89       	ldd	r24, Y+16	; 0x10
    2fb6:	89 0f       	add	r24, r25
    2fb8:	8f 5f       	subi	r24, 0xFF	; 255
    2fba:	0e 94 6d 18 	call	0x30da	; 0x30da <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(100);
		}
	}	
}
    2fbe:	60 96       	adiw	r28, 0x10	; 16
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2fd0:	88 89       	ldd	r24, Y+16	; 0x10
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	88 8b       	std	Y+16, r24	; 0x10
    2fd6:	88 89       	ldd	r24, Y+16	; 0x10
    2fd8:	84 30       	cpi	r24, 0x04	; 4
    2fda:	d8 f2       	brcs	.-74     	; 0x2f92 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a8 ec       	ldi	r26, 0xC8	; 200
    2fec:	b2 e4       	ldi	r27, 0x42	; 66
    2fee:	8b 87       	std	Y+11, r24	; 0x0b
    2ff0:	9c 87       	std	Y+12, r25	; 0x0c
    2ff2:	ad 87       	std	Y+13, r26	; 0x0d
    2ff4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a ef       	ldi	r20, 0xFA	; 250
    3004:	54 e4       	ldi	r21, 0x44	; 68
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8f 83       	std	Y+7, r24	; 0x07
    3010:	98 87       	std	Y+8, r25	; 0x08
    3012:	a9 87       	std	Y+9, r26	; 0x09
    3014:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3016:	6f 81       	ldd	r22, Y+7	; 0x07
    3018:	78 85       	ldd	r23, Y+8	; 0x08
    301a:	89 85       	ldd	r24, Y+9	; 0x09
    301c:	9a 85       	ldd	r25, Y+10	; 0x0a
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3038:	6f 81       	ldd	r22, Y+7	; 0x07
    303a:	78 85       	ldd	r23, Y+8	; 0x08
    303c:	89 85       	ldd	r24, Y+9	; 0x09
    303e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	6b 85       	ldd	r22, Y+11	; 0x0b
    3052:	7c 85       	ldd	r23, Y+12	; 0x0c
    3054:	8d 85       	ldd	r24, Y+13	; 0x0d
    3056:	9e 85       	ldd	r25, Y+14	; 0x0e
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <KEYPAD_getPressedKey+0x186>
    307a:	88 ec       	ldi	r24, 0xC8	; 200
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	9c 83       	std	Y+4, r25	; 0x04
    3080:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	9c 81       	ldd	r25, Y+4	; 0x04
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <KEYPAD_getPressedKey+0x174>
    308a:	9c 83       	std	Y+4, r25	; 0x04
    308c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	9e 81       	ldd	r25, Y+6	; 0x06
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <KEYPAD_getPressedKey+0x168>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6f 81       	ldd	r22, Y+7	; 0x07
    30a4:	78 85       	ldd	r23, Y+8	; 0x08
    30a6:	89 85       	ldd	r24, Y+9	; 0x09
    30a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9e 83       	std	Y+6, r25	; 0x06
    30b4:	8d 83       	std	Y+5, r24	; 0x05
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	9a 83       	std	Y+2, r25	; 0x02
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <KEYPAD_getPressedKey+0x1b0>
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    30ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	8f 87       	std	Y+15, r24	; 0x0f
    30d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d2:	84 30       	cpi	r24, 0x04	; 4
    30d4:	08 f4       	brcc	.+2      	; 0x30d8 <KEYPAD_getPressedKey+0x1c6>
    30d6:	51 cf       	rjmp	.-350    	; 0x2f7a <KEYPAD_getPressedKey+0x68>
    30d8:	4e cf       	rjmp	.-356    	; 0x2f76 <KEYPAD_getPressedKey+0x64>

000030da <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    30e8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	3c 83       	std	Y+4, r19	; 0x04
    30f2:	2b 83       	std	Y+3, r18	; 0x03
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	88 30       	cpi	r24, 0x08	; 8
    30fa:	91 05       	cpc	r25, r1
    30fc:	09 f4       	brne	.+2      	; 0x3100 <KEYPAD_4x4_adjustKeyNumber+0x26>
    30fe:	70 c0       	rjmp	.+224    	; 0x31e0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3100:	2b 81       	ldd	r18, Y+3	; 0x03
    3102:	3c 81       	ldd	r19, Y+4	; 0x04
    3104:	29 30       	cpi	r18, 0x09	; 9
    3106:	31 05       	cpc	r19, r1
    3108:	5c f5       	brge	.+86     	; 0x3160 <KEYPAD_4x4_adjustKeyNumber+0x86>
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	84 30       	cpi	r24, 0x04	; 4
    3110:	91 05       	cpc	r25, r1
    3112:	09 f4       	brne	.+2      	; 0x3116 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3114:	59 c0       	rjmp	.+178    	; 0x31c8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3116:	2b 81       	ldd	r18, Y+3	; 0x03
    3118:	3c 81       	ldd	r19, Y+4	; 0x04
    311a:	25 30       	cpi	r18, 0x05	; 5
    311c:	31 05       	cpc	r19, r1
    311e:	9c f4       	brge	.+38     	; 0x3146 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	91 05       	cpc	r25, r1
    3128:	09 f4       	brne	.+2      	; 0x312c <KEYPAD_4x4_adjustKeyNumber+0x52>
    312a:	48 c0       	rjmp	.+144    	; 0x31bc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	23 30       	cpi	r18, 0x03	; 3
    3132:	31 05       	cpc	r19, r1
    3134:	0c f0       	brlt	.+2      	; 0x3138 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3136:	45 c0       	rjmp	.+138    	; 0x31c2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	9c 81       	ldd	r25, Y+4	; 0x04
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	91 05       	cpc	r25, r1
    3140:	09 f4       	brne	.+2      	; 0x3144 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3142:	39 c0       	rjmp	.+114    	; 0x31b6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3144:	67 c0       	rjmp	.+206    	; 0x3214 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3146:	2b 81       	ldd	r18, Y+3	; 0x03
    3148:	3c 81       	ldd	r19, Y+4	; 0x04
    314a:	26 30       	cpi	r18, 0x06	; 6
    314c:	31 05       	cpc	r19, r1
    314e:	09 f4       	brne	.+2      	; 0x3152 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3150:	41 c0       	rjmp	.+130    	; 0x31d4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	9c 81       	ldd	r25, Y+4	; 0x04
    3156:	87 30       	cpi	r24, 0x07	; 7
    3158:	91 05       	cpc	r25, r1
    315a:	0c f0       	brlt	.+2      	; 0x315e <KEYPAD_4x4_adjustKeyNumber+0x84>
    315c:	3e c0       	rjmp	.+124    	; 0x31da <KEYPAD_4x4_adjustKeyNumber+0x100>
    315e:	37 c0       	rjmp	.+110    	; 0x31ce <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3160:	2b 81       	ldd	r18, Y+3	; 0x03
    3162:	3c 81       	ldd	r19, Y+4	; 0x04
    3164:	2c 30       	cpi	r18, 0x0C	; 12
    3166:	31 05       	cpc	r19, r1
    3168:	09 f4       	brne	.+2      	; 0x316c <KEYPAD_4x4_adjustKeyNumber+0x92>
    316a:	46 c0       	rjmp	.+140    	; 0x31f8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	8d 30       	cpi	r24, 0x0D	; 13
    3172:	91 05       	cpc	r25, r1
    3174:	5c f4       	brge	.+22     	; 0x318c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3176:	2b 81       	ldd	r18, Y+3	; 0x03
    3178:	3c 81       	ldd	r19, Y+4	; 0x04
    317a:	2a 30       	cpi	r18, 0x0A	; 10
    317c:	31 05       	cpc	r19, r1
    317e:	b1 f1       	breq	.+108    	; 0x31ec <KEYPAD_4x4_adjustKeyNumber+0x112>
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	8b 30       	cpi	r24, 0x0B	; 11
    3186:	91 05       	cpc	r25, r1
    3188:	a4 f5       	brge	.+104    	; 0x31f2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    318a:	2d c0       	rjmp	.+90     	; 0x31e6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    318c:	2b 81       	ldd	r18, Y+3	; 0x03
    318e:	3c 81       	ldd	r19, Y+4	; 0x04
    3190:	2e 30       	cpi	r18, 0x0E	; 14
    3192:	31 05       	cpc	r19, r1
    3194:	b9 f1       	breq	.+110    	; 0x3204 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	8e 30       	cpi	r24, 0x0E	; 14
    319c:	91 05       	cpc	r25, r1
    319e:	7c f1       	brlt	.+94     	; 0x31fe <KEYPAD_4x4_adjustKeyNumber+0x124>
    31a0:	2b 81       	ldd	r18, Y+3	; 0x03
    31a2:	3c 81       	ldd	r19, Y+4	; 0x04
    31a4:	2f 30       	cpi	r18, 0x0F	; 15
    31a6:	31 05       	cpc	r19, r1
    31a8:	79 f1       	breq	.+94     	; 0x3208 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	80 31       	cpi	r24, 0x10	; 16
    31b0:	91 05       	cpc	r25, r1
    31b2:	69 f1       	breq	.+90     	; 0x320e <KEYPAD_4x4_adjustKeyNumber+0x134>
    31b4:	2f c0       	rjmp	.+94     	; 0x3214 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    31b6:	87 e0       	ldi	r24, 0x07	; 7
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	2e c0       	rjmp	.+92     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    31bc:	88 e0       	ldi	r24, 0x08	; 8
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	2b c0       	rjmp	.+86     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    31c2:	89 e0       	ldi	r24, 0x09	; 9
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	28 c0       	rjmp	.+80     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    31c8:	85 e2       	ldi	r24, 0x25	; 37
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	25 c0       	rjmp	.+74     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    31ce:	84 e0       	ldi	r24, 0x04	; 4
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	22 c0       	rjmp	.+68     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    31d4:	85 e0       	ldi	r24, 0x05	; 5
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	1f c0       	rjmp	.+62     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    31da:	86 e0       	ldi	r24, 0x06	; 6
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	1c c0       	rjmp	.+56     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    31e0:	8a e2       	ldi	r24, 0x2A	; 42
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	19 c0       	rjmp	.+50     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	16 c0       	rjmp	.+44     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	13 c0       	rjmp	.+38     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	10 c0       	rjmp	.+32     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    31f8:	8d e2       	ldi	r24, 0x2D	; 45
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	0d c0       	rjmp	.+26     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    31fe:	8d e0       	ldi	r24, 0x0D	; 13
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	0a c0       	rjmp	.+20     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3204:	19 82       	std	Y+1, r1	; 0x01
    3206:	08 c0       	rjmp	.+16     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3208:	8d e3       	ldi	r24, 0x3D	; 61
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    320e:	8b e2       	ldi	r24, 0x2B	; 43
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
} 
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	2e 97       	sbiw	r28, 0x0e	; 14
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	62 e0       	ldi	r22, 0x02	; 2
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	63 e0       	ldi	r22, 0x03	; 3
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 ea       	ldi	r26, 0xA0	; 160
    3256:	b1 e4       	ldi	r27, 0x41	; 65
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a ef       	ldi	r20, 0xFA	; 250
    326e:	54 e4       	ldi	r21, 0x44	; 68
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <LCD_init+0x7a>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <LCD_init+0xf8>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <LCD_init+0xda>
    32e4:	88 ec       	ldi	r24, 0xC8	; 200
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <LCD_init+0xc8>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <LCD_init+0xbc>
    330a:	14 c0       	rjmp	.+40     	; 0x3334 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_init+0x104>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	64 e0       	ldi	r22, 0x04	; 4
    3338:	41 e0       	ldi	r20, 0x01	; 1
    333a:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	65 e0       	ldi	r22, 0x05	; 5
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    3348:	82 e0       	ldi	r24, 0x02	; 2
    334a:	66 e0       	ldi	r22, 0x06	; 6
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	67 e0       	ldi	r22, 0x07	; 7
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	//send data by two parts nible by nible
	//init each line in lcd 4 bit
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    335c:	83 e3       	ldi	r24, 0x33	; 51
    335e:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3362:	82 e3       	ldi	r24, 0x32	; 50
    3364:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3368:	88 e2       	ldi	r24, 0x28	; 40
    336a:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    336e:	8c e0       	ldi	r24, 0x0C	; 12
    3370:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
}
    337a:	2e 96       	adiw	r28, 0x0e	; 14
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	c3 56       	subi	r28, 0x63	; 99
    339a:	d0 40       	sbci	r29, 0x00	; 0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	fe 01       	movw	r30, r28
    33a8:	ed 59       	subi	r30, 0x9D	; 157
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	62 e0       	ldi	r22, 0x02	; 2
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    33b8:	fe 01       	movw	r30, r28
    33ba:	e1 5a       	subi	r30, 0xA1	; 161
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	a0 e8       	ldi	r26, 0x80	; 128
    33c4:	bf e3       	ldi	r27, 0x3F	; 63
    33c6:	80 83       	st	Z, r24
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	a2 83       	std	Z+2, r26	; 0x02
    33cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ce:	8e 01       	movw	r16, r28
    33d0:	05 5a       	subi	r16, 0xA5	; 165
    33d2:	1f 4f       	sbci	r17, 0xFF	; 255
    33d4:	fe 01       	movw	r30, r28
    33d6:	e1 5a       	subi	r30, 0xA1	; 161
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	60 81       	ld	r22, Z
    33dc:	71 81       	ldd	r23, Z+1	; 0x01
    33de:	82 81       	ldd	r24, Z+2	; 0x02
    33e0:	93 81       	ldd	r25, Z+3	; 0x03
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a ef       	ldi	r20, 0xFA	; 250
    33e8:	54 e4       	ldi	r21, 0x44	; 68
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	f8 01       	movw	r30, r16
    33f4:	80 83       	st	Z, r24
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	a2 83       	std	Z+2, r26	; 0x02
    33fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33fc:	fe 01       	movw	r30, r28
    33fe:	e5 5a       	subi	r30, 0xA5	; 165
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	60 81       	ld	r22, Z
    3404:	71 81       	ldd	r23, Z+1	; 0x01
    3406:	82 81       	ldd	r24, Z+2	; 0x02
    3408:	93 81       	ldd	r25, Z+3	; 0x03
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	44 f4       	brge	.+16     	; 0x342a <LCD_sendCommand+0x9e>
		__ticks = 1;
    341a:	fe 01       	movw	r30, r28
    341c:	e7 5a       	subi	r30, 0xA7	; 167
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	80 83       	st	Z, r24
    3428:	64 c0       	rjmp	.+200    	; 0x34f2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    342a:	fe 01       	movw	r30, r28
    342c:	e5 5a       	subi	r30, 0xA5	; 165
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	3f ef       	ldi	r19, 0xFF	; 255
    343c:	4f e7       	ldi	r20, 0x7F	; 127
    343e:	57 e4       	ldi	r21, 0x47	; 71
    3440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3444:	18 16       	cp	r1, r24
    3446:	0c f0       	brlt	.+2      	; 0x344a <LCD_sendCommand+0xbe>
    3448:	43 c0       	rjmp	.+134    	; 0x34d0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	fe 01       	movw	r30, r28
    344c:	e1 5a       	subi	r30, 0xA1	; 161
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	8e 01       	movw	r16, r28
    346a:	07 5a       	subi	r16, 0xA7	; 167
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	f8 01       	movw	r30, r16
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	1f c0       	rjmp	.+62     	; 0x34c0 <LCD_sendCommand+0x134>
    3482:	fe 01       	movw	r30, r28
    3484:	e9 5a       	subi	r30, 0xA9	; 169
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	88 ec       	ldi	r24, 0xC8	; 200
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
    3490:	fe 01       	movw	r30, r28
    3492:	e9 5a       	subi	r30, 0xA9	; 169
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <LCD_sendCommand+0x10e>
    349e:	fe 01       	movw	r30, r28
    34a0:	e9 5a       	subi	r30, 0xA9	; 169
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	91 83       	std	Z+1, r25	; 0x01
    34a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	de 01       	movw	r26, r28
    34aa:	a7 5a       	subi	r26, 0xA7	; 167
    34ac:	bf 4f       	sbci	r27, 0xFF	; 255
    34ae:	fe 01       	movw	r30, r28
    34b0:	e7 5a       	subi	r30, 0xA7	; 167
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	11 96       	adiw	r26, 0x01	; 1
    34bc:	9c 93       	st	X, r25
    34be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c0:	fe 01       	movw	r30, r28
    34c2:	e7 5a       	subi	r30, 0xA7	; 167
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 81       	ld	r24, Z
    34c8:	91 81       	ldd	r25, Z+1	; 0x01
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	d1 f6       	brne	.-76     	; 0x3482 <LCD_sendCommand+0xf6>
    34ce:	27 c0       	rjmp	.+78     	; 0x351e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	8e 01       	movw	r16, r28
    34d2:	07 5a       	subi	r16, 0xA7	; 167
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	fe 01       	movw	r30, r28
    34d8:	e5 5a       	subi	r30, 0xA5	; 165
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	f8 01       	movw	r30, r16
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	de 01       	movw	r26, r28
    34f4:	ab 5a       	subi	r26, 0xAB	; 171
    34f6:	bf 4f       	sbci	r27, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	e7 5a       	subi	r30, 0xA7	; 167
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	8d 93       	st	X+, r24
    3504:	9c 93       	st	X, r25
    3506:	fe 01       	movw	r30, r28
    3508:	eb 5a       	subi	r30, 0xAB	; 171
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <LCD_sendCommand+0x184>
    3514:	fe 01       	movw	r30, r28
    3516:	eb 5a       	subi	r30, 0xAB	; 171
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	63 e0       	ldi	r22, 0x03	; 3
    3522:	41 e0       	ldi	r20, 0x01	; 1
    3524:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3528:	fe 01       	movw	r30, r28
    352a:	ef 5a       	subi	r30, 0xAF	; 175
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 e8       	ldi	r26, 0x80	; 128
    3534:	bf e3       	ldi	r27, 0x3F	; 63
    3536:	80 83       	st	Z, r24
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	a2 83       	std	Z+2, r26	; 0x02
    353c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	8e 01       	movw	r16, r28
    3540:	03 5b       	subi	r16, 0xB3	; 179
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	fe 01       	movw	r30, r28
    3546:	ef 5a       	subi	r30, 0xAF	; 175
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	4a ef       	ldi	r20, 0xFA	; 250
    3558:	54 e4       	ldi	r21, 0x44	; 68
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	f8 01       	movw	r30, r16
    3564:	80 83       	st	Z, r24
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	a2 83       	std	Z+2, r26	; 0x02
    356a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    356c:	fe 01       	movw	r30, r28
    356e:	e3 5b       	subi	r30, 0xB3	; 179
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	44 f4       	brge	.+16     	; 0x359a <LCD_sendCommand+0x20e>
		__ticks = 1;
    358a:	fe 01       	movw	r30, r28
    358c:	e5 5b       	subi	r30, 0xB5	; 181
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
    3598:	64 c0       	rjmp	.+200    	; 0x3662 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    359a:	fe 01       	movw	r30, r28
    359c:	e3 5b       	subi	r30, 0xB3	; 179
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	3f ef       	ldi	r19, 0xFF	; 255
    35ac:	4f e7       	ldi	r20, 0x7F	; 127
    35ae:	57 e4       	ldi	r21, 0x47	; 71
    35b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b4:	18 16       	cp	r1, r24
    35b6:	0c f0       	brlt	.+2      	; 0x35ba <LCD_sendCommand+0x22e>
    35b8:	43 c0       	rjmp	.+134    	; 0x3640 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ba:	fe 01       	movw	r30, r28
    35bc:	ef 5a       	subi	r30, 0xAF	; 175
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	60 81       	ld	r22, Z
    35c2:	71 81       	ldd	r23, Z+1	; 0x01
    35c4:	82 81       	ldd	r24, Z+2	; 0x02
    35c6:	93 81       	ldd	r25, Z+3	; 0x03
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	8e 01       	movw	r16, r28
    35da:	05 5b       	subi	r16, 0xB5	; 181
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	bc 01       	movw	r22, r24
    35e0:	cd 01       	movw	r24, r26
    35e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	f8 01       	movw	r30, r16
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	80 83       	st	Z, r24
    35f0:	1f c0       	rjmp	.+62     	; 0x3630 <LCD_sendCommand+0x2a4>
    35f2:	fe 01       	movw	r30, r28
    35f4:	e7 5b       	subi	r30, 0xB7	; 183
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	88 ec       	ldi	r24, 0xC8	; 200
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
    3600:	fe 01       	movw	r30, r28
    3602:	e7 5b       	subi	r30, 0xB7	; 183
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <LCD_sendCommand+0x27e>
    360e:	fe 01       	movw	r30, r28
    3610:	e7 5b       	subi	r30, 0xB7	; 183
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3618:	de 01       	movw	r26, r28
    361a:	a5 5b       	subi	r26, 0xB5	; 181
    361c:	bf 4f       	sbci	r27, 0xFF	; 255
    361e:	fe 01       	movw	r30, r28
    3620:	e5 5b       	subi	r30, 0xB5	; 181
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	91 81       	ldd	r25, Z+1	; 0x01
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	11 96       	adiw	r26, 0x01	; 1
    362c:	9c 93       	st	X, r25
    362e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3630:	fe 01       	movw	r30, r28
    3632:	e5 5b       	subi	r30, 0xB5	; 181
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	80 81       	ld	r24, Z
    3638:	91 81       	ldd	r25, Z+1	; 0x01
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	d1 f6       	brne	.-76     	; 0x35f2 <LCD_sendCommand+0x266>
    363e:	27 c0       	rjmp	.+78     	; 0x368e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	8e 01       	movw	r16, r28
    3642:	05 5b       	subi	r16, 0xB5	; 181
    3644:	1f 4f       	sbci	r17, 0xFF	; 255
    3646:	fe 01       	movw	r30, r28
    3648:	e3 5b       	subi	r30, 0xB3	; 179
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	60 81       	ld	r22, Z
    364e:	71 81       	ldd	r23, Z+1	; 0x01
    3650:	82 81       	ldd	r24, Z+2	; 0x02
    3652:	93 81       	ldd	r25, Z+3	; 0x03
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	f8 01       	movw	r30, r16
    365e:	91 83       	std	Z+1, r25	; 0x01
    3660:	80 83       	st	Z, r24
    3662:	de 01       	movw	r26, r28
    3664:	a9 5b       	subi	r26, 0xB9	; 185
    3666:	bf 4f       	sbci	r27, 0xFF	; 255
    3668:	fe 01       	movw	r30, r28
    366a:	e5 5b       	subi	r30, 0xB5	; 181
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	80 81       	ld	r24, Z
    3670:	91 81       	ldd	r25, Z+1	; 0x01
    3672:	8d 93       	st	X+, r24
    3674:	9c 93       	st	X, r25
    3676:	fe 01       	movw	r30, r28
    3678:	e9 5b       	subi	r30, 0xB9	; 185
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 81       	ld	r24, Z
    367e:	91 81       	ldd	r25, Z+1	; 0x01
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCD_sendCommand+0x2f4>
    3684:	fe 01       	movw	r30, r28
    3686:	e9 5b       	subi	r30, 0xB9	; 185
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    368e:	fe 01       	movw	r30, r28
    3690:	ed 59       	subi	r30, 0x9D	; 157
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	88 2f       	mov	r24, r24
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	80 71       	andi	r24, 0x10	; 16
    369c:	90 70       	andi	r25, 0x00	; 0
    369e:	95 95       	asr	r25
    36a0:	87 95       	ror	r24
    36a2:	95 95       	asr	r25
    36a4:	87 95       	ror	r24
    36a6:	95 95       	asr	r25
    36a8:	87 95       	ror	r24
    36aa:	95 95       	asr	r25
    36ac:	87 95       	ror	r24
    36ae:	98 2f       	mov	r25, r24
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	64 e0       	ldi	r22, 0x04	; 4
    36b4:	49 2f       	mov	r20, r25
    36b6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    36ba:	fe 01       	movw	r30, r28
    36bc:	ed 59       	subi	r30, 0x9D	; 157
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	80 72       	andi	r24, 0x20	; 32
    36c8:	90 70       	andi	r25, 0x00	; 0
    36ca:	95 95       	asr	r25
    36cc:	87 95       	ror	r24
    36ce:	95 95       	asr	r25
    36d0:	87 95       	ror	r24
    36d2:	95 95       	asr	r25
    36d4:	87 95       	ror	r24
    36d6:	95 95       	asr	r25
    36d8:	87 95       	ror	r24
    36da:	95 95       	asr	r25
    36dc:	87 95       	ror	r24
    36de:	98 2f       	mov	r25, r24
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	65 e0       	ldi	r22, 0x05	; 5
    36e4:	49 2f       	mov	r20, r25
    36e6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    36ea:	fe 01       	movw	r30, r28
    36ec:	ed 59       	subi	r30, 0x9D	; 157
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	88 2f       	mov	r24, r24
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	80 74       	andi	r24, 0x40	; 64
    36f8:	90 70       	andi	r25, 0x00	; 0
    36fa:	08 2e       	mov	r0, r24
    36fc:	89 2f       	mov	r24, r25
    36fe:	00 0c       	add	r0, r0
    3700:	88 1f       	adc	r24, r24
    3702:	99 0b       	sbc	r25, r25
    3704:	00 0c       	add	r0, r0
    3706:	88 1f       	adc	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	98 2f       	mov	r25, r24
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	66 e0       	ldi	r22, 0x06	; 6
    3710:	49 2f       	mov	r20, r25
    3712:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3716:	fe 01       	movw	r30, r28
    3718:	ed 59       	subi	r30, 0x9D	; 157
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	98 2f       	mov	r25, r24
    3720:	99 1f       	adc	r25, r25
    3722:	99 27       	eor	r25, r25
    3724:	99 1f       	adc	r25, r25
    3726:	82 e0       	ldi	r24, 0x02	; 2
    3728:	67 e0       	ldi	r22, 0x07	; 7
    372a:	49 2f       	mov	r20, r25
    372c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3730:	fe 01       	movw	r30, r28
    3732:	ed 5b       	subi	r30, 0xBD	; 189
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	a0 e8       	ldi	r26, 0x80	; 128
    373c:	bf e3       	ldi	r27, 0x3F	; 63
    373e:	80 83       	st	Z, r24
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	a2 83       	std	Z+2, r26	; 0x02
    3744:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3746:	8e 01       	movw	r16, r28
    3748:	01 5c       	subi	r16, 0xC1	; 193
    374a:	1f 4f       	sbci	r17, 0xFF	; 255
    374c:	fe 01       	movw	r30, r28
    374e:	ed 5b       	subi	r30, 0xBD	; 189
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	60 81       	ld	r22, Z
    3754:	71 81       	ldd	r23, Z+1	; 0x01
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	93 81       	ldd	r25, Z+3	; 0x03
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a ef       	ldi	r20, 0xFA	; 250
    3760:	54 e4       	ldi	r21, 0x44	; 68
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	f8 01       	movw	r30, r16
    376c:	80 83       	st	Z, r24
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	a2 83       	std	Z+2, r26	; 0x02
    3772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3774:	fe 01       	movw	r30, r28
    3776:	ff 96       	adiw	r30, 0x3f	; 63
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e8       	ldi	r20, 0x80	; 128
    3786:	5f e3       	ldi	r21, 0x3F	; 63
    3788:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    378c:	88 23       	and	r24, r24
    378e:	2c f4       	brge	.+10     	; 0x379a <LCD_sendCommand+0x40e>
		__ticks = 1;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	9e af       	std	Y+62, r25	; 0x3e
    3796:	8d af       	std	Y+61, r24	; 0x3d
    3798:	46 c0       	rjmp	.+140    	; 0x3826 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    379a:	fe 01       	movw	r30, r28
    379c:	ff 96       	adiw	r30, 0x3f	; 63
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	64 f5       	brge	.+88     	; 0x380e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b6:	fe 01       	movw	r30, r28
    37b8:	ed 5b       	subi	r30, 0xBD	; 189
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	60 81       	ld	r22, Z
    37be:	71 81       	ldd	r23, Z+1	; 0x01
    37c0:	82 81       	ldd	r24, Z+2	; 0x02
    37c2:	93 81       	ldd	r25, Z+3	; 0x03
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e2       	ldi	r20, 0x20	; 32
    37ca:	51 e4       	ldi	r21, 0x41	; 65
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9e af       	std	Y+62, r25	; 0x3e
    37e2:	8d af       	std	Y+61, r24	; 0x3d
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <LCD_sendCommand+0x478>
    37e6:	88 ec       	ldi	r24, 0xC8	; 200
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9c af       	std	Y+60, r25	; 0x3c
    37ec:	8b af       	std	Y+59, r24	; 0x3b
    37ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    37f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <LCD_sendCommand+0x466>
    37f6:	9c af       	std	Y+60, r25	; 0x3c
    37f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    37fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	9e af       	std	Y+62, r25	; 0x3e
    3802:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3804:	8d ad       	ldd	r24, Y+61	; 0x3d
    3806:	9e ad       	ldd	r25, Y+62	; 0x3e
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	69 f7       	brne	.-38     	; 0x37e6 <LCD_sendCommand+0x45a>
    380c:	16 c0       	rjmp	.+44     	; 0x383a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380e:	fe 01       	movw	r30, r28
    3810:	ff 96       	adiw	r30, 0x3f	; 63
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9e af       	std	Y+62, r25	; 0x3e
    3824:	8d af       	std	Y+61, r24	; 0x3d
    3826:	8d ad       	ldd	r24, Y+61	; 0x3d
    3828:	9e ad       	ldd	r25, Y+62	; 0x3e
    382a:	9a af       	std	Y+58, r25	; 0x3a
    382c:	89 af       	std	Y+57, r24	; 0x39
    382e:	89 ad       	ldd	r24, Y+57	; 0x39
    3830:	9a ad       	ldd	r25, Y+58	; 0x3a
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <LCD_sendCommand+0x4a6>
    3836:	9a af       	std	Y+58, r25	; 0x3a
    3838:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    383a:	82 e0       	ldi	r24, 0x02	; 2
    383c:	63 e0       	ldi	r22, 0x03	; 3
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e8       	ldi	r26, 0x80	; 128
    384a:	bf e3       	ldi	r27, 0x3F	; 63
    384c:	8d ab       	std	Y+53, r24	; 0x35
    384e:	9e ab       	std	Y+54, r25	; 0x36
    3850:	af ab       	std	Y+55, r26	; 0x37
    3852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	6d a9       	ldd	r22, Y+53	; 0x35
    3856:	7e a9       	ldd	r23, Y+54	; 0x36
    3858:	8f a9       	ldd	r24, Y+55	; 0x37
    385a:	98 ad       	ldd	r25, Y+56	; 0x38
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	89 ab       	std	Y+49, r24	; 0x31
    386e:	9a ab       	std	Y+50, r25	; 0x32
    3870:	ab ab       	std	Y+51, r26	; 0x33
    3872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3874:	69 a9       	ldd	r22, Y+49	; 0x31
    3876:	7a a9       	ldd	r23, Y+50	; 0x32
    3878:	8b a9       	ldd	r24, Y+51	; 0x33
    387a:	9c a9       	ldd	r25, Y+52	; 0x34
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <LCD_sendCommand+0x50a>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	98 ab       	std	Y+48, r25	; 0x30
    3892:	8f a7       	std	Y+47, r24	; 0x2f
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3896:	69 a9       	ldd	r22, Y+49	; 0x31
    3898:	7a a9       	ldd	r23, Y+50	; 0x32
    389a:	8b a9       	ldd	r24, Y+51	; 0x33
    389c:	9c a9       	ldd	r25, Y+52	; 0x34
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	6d a9       	ldd	r22, Y+53	; 0x35
    38b0:	7e a9       	ldd	r23, Y+54	; 0x36
    38b2:	8f a9       	ldd	r24, Y+55	; 0x37
    38b4:	98 ad       	ldd	r25, Y+56	; 0x38
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	98 ab       	std	Y+48, r25	; 0x30
    38d4:	8f a7       	std	Y+47, r24	; 0x2f
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <LCD_sendCommand+0x56a>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9e a7       	std	Y+46, r25	; 0x2e
    38de:	8d a7       	std	Y+45, r24	; 0x2d
    38e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    38e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <LCD_sendCommand+0x558>
    38e8:	9e a7       	std	Y+46, r25	; 0x2e
    38ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ee:	98 a9       	ldd	r25, Y+48	; 0x30
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	98 ab       	std	Y+48, r25	; 0x30
    38f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38f8:	98 a9       	ldd	r25, Y+48	; 0x30
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <LCD_sendCommand+0x54c>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	69 a9       	ldd	r22, Y+49	; 0x31
    3902:	7a a9       	ldd	r23, Y+50	; 0x32
    3904:	8b a9       	ldd	r24, Y+51	; 0x33
    3906:	9c a9       	ldd	r25, Y+52	; 0x34
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	98 ab       	std	Y+48, r25	; 0x30
    3912:	8f a7       	std	Y+47, r24	; 0x2f
    3914:	8f a5       	ldd	r24, Y+47	; 0x2f
    3916:	98 a9       	ldd	r25, Y+48	; 0x30
    3918:	9c a7       	std	Y+44, r25	; 0x2c
    391a:	8b a7       	std	Y+43, r24	; 0x2b
    391c:	8b a5       	ldd	r24, Y+43	; 0x2b
    391e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <LCD_sendCommand+0x594>
    3924:	9c a7       	std	Y+44, r25	; 0x2c
    3926:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	63 e0       	ldi	r22, 0x03	; 3
    392c:	41 e0       	ldi	r20, 0x01	; 1
    392e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	a0 e8       	ldi	r26, 0x80	; 128
    3938:	bf e3       	ldi	r27, 0x3F	; 63
    393a:	8f a3       	std	Y+39, r24	; 0x27
    393c:	98 a7       	std	Y+40, r25	; 0x28
    393e:	a9 a7       	std	Y+41, r26	; 0x29
    3940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3942:	6f a1       	ldd	r22, Y+39	; 0x27
    3944:	78 a5       	ldd	r23, Y+40	; 0x28
    3946:	89 a5       	ldd	r24, Y+41	; 0x29
    3948:	9a a5       	ldd	r25, Y+42	; 0x2a
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	4a ef       	ldi	r20, 0xFA	; 250
    3950:	54 e4       	ldi	r21, 0x44	; 68
    3952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	8b a3       	std	Y+35, r24	; 0x23
    395c:	9c a3       	std	Y+36, r25	; 0x24
    395e:	ad a3       	std	Y+37, r26	; 0x25
    3960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3962:	6b a1       	ldd	r22, Y+35	; 0x23
    3964:	7c a1       	ldd	r23, Y+36	; 0x24
    3966:	8d a1       	ldd	r24, Y+37	; 0x25
    3968:	9e a1       	ldd	r25, Y+38	; 0x26
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e8       	ldi	r20, 0x80	; 128
    3970:	5f e3       	ldi	r21, 0x3F	; 63
    3972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3976:	88 23       	and	r24, r24
    3978:	2c f4       	brge	.+10     	; 0x3984 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	9a a3       	std	Y+34, r25	; 0x22
    3980:	89 a3       	std	Y+33, r24	; 0x21
    3982:	3f c0       	rjmp	.+126    	; 0x3a02 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3984:	6b a1       	ldd	r22, Y+35	; 0x23
    3986:	7c a1       	ldd	r23, Y+36	; 0x24
    3988:	8d a1       	ldd	r24, Y+37	; 0x25
    398a:	9e a1       	ldd	r25, Y+38	; 0x26
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	3f ef       	ldi	r19, 0xFF	; 255
    3990:	4f e7       	ldi	r20, 0x7F	; 127
    3992:	57 e4       	ldi	r21, 0x47	; 71
    3994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3998:	18 16       	cp	r1, r24
    399a:	4c f5       	brge	.+82     	; 0x39ee <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399c:	6f a1       	ldd	r22, Y+39	; 0x27
    399e:	78 a5       	ldd	r23, Y+40	; 0x28
    39a0:	89 a5       	ldd	r24, Y+41	; 0x29
    39a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e2       	ldi	r20, 0x20	; 32
    39aa:	51 e4       	ldi	r21, 0x41	; 65
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	9a a3       	std	Y+34, r25	; 0x22
    39c2:	89 a3       	std	Y+33, r24	; 0x21
    39c4:	0f c0       	rjmp	.+30     	; 0x39e4 <LCD_sendCommand+0x658>
    39c6:	88 ec       	ldi	r24, 0xC8	; 200
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	98 a3       	std	Y+32, r25	; 0x20
    39cc:	8f 8f       	std	Y+31, r24	; 0x1f
    39ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39d0:	98 a1       	ldd	r25, Y+32	; 0x20
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	f1 f7       	brne	.-4      	; 0x39d2 <LCD_sendCommand+0x646>
    39d6:	98 a3       	std	Y+32, r25	; 0x20
    39d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39da:	89 a1       	ldd	r24, Y+33	; 0x21
    39dc:	9a a1       	ldd	r25, Y+34	; 0x22
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	9a a3       	std	Y+34, r25	; 0x22
    39e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e4:	89 a1       	ldd	r24, Y+33	; 0x21
    39e6:	9a a1       	ldd	r25, Y+34	; 0x22
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	69 f7       	brne	.-38     	; 0x39c6 <LCD_sendCommand+0x63a>
    39ec:	14 c0       	rjmp	.+40     	; 0x3a16 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ee:	6b a1       	ldd	r22, Y+35	; 0x23
    39f0:	7c a1       	ldd	r23, Y+36	; 0x24
    39f2:	8d a1       	ldd	r24, Y+37	; 0x25
    39f4:	9e a1       	ldd	r25, Y+38	; 0x26
    39f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	9a a3       	std	Y+34, r25	; 0x22
    3a00:	89 a3       	std	Y+33, r24	; 0x21
    3a02:	89 a1       	ldd	r24, Y+33	; 0x21
    3a04:	9a a1       	ldd	r25, Y+34	; 0x22
    3a06:	9e 8f       	std	Y+30, r25	; 0x1e
    3a08:	8d 8f       	std	Y+29, r24	; 0x1d
    3a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <LCD_sendCommand+0x682>
    3a12:	9e 8f       	std	Y+30, r25	; 0x1e
    3a14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3a16:	fe 01       	movw	r30, r28
    3a18:	ed 59       	subi	r30, 0x9D	; 157
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	98 2f       	mov	r25, r24
    3a20:	91 70       	andi	r25, 0x01	; 1
    3a22:	82 e0       	ldi	r24, 0x02	; 2
    3a24:	64 e0       	ldi	r22, 0x04	; 4
    3a26:	49 2f       	mov	r20, r25
    3a28:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ed 59       	subi	r30, 0x9D	; 157
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	82 70       	andi	r24, 0x02	; 2
    3a3a:	90 70       	andi	r25, 0x00	; 0
    3a3c:	95 95       	asr	r25
    3a3e:	87 95       	ror	r24
    3a40:	98 2f       	mov	r25, r24
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	65 e0       	ldi	r22, 0x05	; 5
    3a46:	49 2f       	mov	r20, r25
    3a48:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ed 59       	subi	r30, 0x9D	; 157
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	80 81       	ld	r24, Z
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	84 70       	andi	r24, 0x04	; 4
    3a5a:	90 70       	andi	r25, 0x00	; 0
    3a5c:	95 95       	asr	r25
    3a5e:	87 95       	ror	r24
    3a60:	95 95       	asr	r25
    3a62:	87 95       	ror	r24
    3a64:	98 2f       	mov	r25, r24
    3a66:	82 e0       	ldi	r24, 0x02	; 2
    3a68:	66 e0       	ldi	r22, 0x06	; 6
    3a6a:	49 2f       	mov	r20, r25
    3a6c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3a70:	fe 01       	movw	r30, r28
    3a72:	ed 59       	subi	r30, 0x9D	; 157
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	88 2f       	mov	r24, r24
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	88 70       	andi	r24, 0x08	; 8
    3a7e:	90 70       	andi	r25, 0x00	; 0
    3a80:	95 95       	asr	r25
    3a82:	87 95       	ror	r24
    3a84:	95 95       	asr	r25
    3a86:	87 95       	ror	r24
    3a88:	95 95       	asr	r25
    3a8a:	87 95       	ror	r24
    3a8c:	98 2f       	mov	r25, r24
    3a8e:	82 e0       	ldi	r24, 0x02	; 2
    3a90:	67 e0       	ldi	r22, 0x07	; 7
    3a92:	49 2f       	mov	r20, r25
    3a94:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	a0 e8       	ldi	r26, 0x80	; 128
    3a9e:	bf e3       	ldi	r27, 0x3F	; 63
    3aa0:	89 8f       	std	Y+25, r24	; 0x19
    3aa2:	9a 8f       	std	Y+26, r25	; 0x1a
    3aa4:	ab 8f       	std	Y+27, r26	; 0x1b
    3aa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa8:	69 8d       	ldd	r22, Y+25	; 0x19
    3aaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a ef       	ldi	r20, 0xFA	; 250
    3ab6:	54 e4       	ldi	r21, 0x44	; 68
    3ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	8d 8b       	std	Y+21, r24	; 0x15
    3ac2:	9e 8b       	std	Y+22, r25	; 0x16
    3ac4:	af 8b       	std	Y+23, r26	; 0x17
    3ac6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aca:	7e 89       	ldd	r23, Y+22	; 0x16
    3acc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ace:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e8       	ldi	r20, 0x80	; 128
    3ad6:	5f e3       	ldi	r21, 0x3F	; 63
    3ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3adc:	88 23       	and	r24, r24
    3ade:	2c f4       	brge	.+10     	; 0x3aea <LCD_sendCommand+0x75e>
		__ticks = 1;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	9c 8b       	std	Y+20, r25	; 0x14
    3ae6:	8b 8b       	std	Y+19, r24	; 0x13
    3ae8:	3f c0       	rjmp	.+126    	; 0x3b68 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3aea:	6d 89       	ldd	r22, Y+21	; 0x15
    3aec:	7e 89       	ldd	r23, Y+22	; 0x16
    3aee:	8f 89       	ldd	r24, Y+23	; 0x17
    3af0:	98 8d       	ldd	r25, Y+24	; 0x18
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	3f ef       	ldi	r19, 0xFF	; 255
    3af6:	4f e7       	ldi	r20, 0x7F	; 127
    3af8:	57 e4       	ldi	r21, 0x47	; 71
    3afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3afe:	18 16       	cp	r1, r24
    3b00:	4c f5       	brge	.+82     	; 0x3b54 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	69 8d       	ldd	r22, Y+25	; 0x19
    3b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e2       	ldi	r20, 0x20	; 32
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9c 8b       	std	Y+20, r25	; 0x14
    3b28:	8b 8b       	std	Y+19, r24	; 0x13
    3b2a:	0f c0       	rjmp	.+30     	; 0x3b4a <LCD_sendCommand+0x7be>
    3b2c:	88 ec       	ldi	r24, 0xC8	; 200
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	9a 8b       	std	Y+18, r25	; 0x12
    3b32:	89 8b       	std	Y+17, r24	; 0x11
    3b34:	89 89       	ldd	r24, Y+17	; 0x11
    3b36:	9a 89       	ldd	r25, Y+18	; 0x12
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <LCD_sendCommand+0x7ac>
    3b3c:	9a 8b       	std	Y+18, r25	; 0x12
    3b3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	8b 89       	ldd	r24, Y+19	; 0x13
    3b42:	9c 89       	ldd	r25, Y+20	; 0x14
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9c 8b       	std	Y+20, r25	; 0x14
    3b48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <LCD_sendCommand+0x7a0>
    3b52:	14 c0       	rjmp	.+40     	; 0x3b7c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b54:	6d 89       	ldd	r22, Y+21	; 0x15
    3b56:	7e 89       	ldd	r23, Y+22	; 0x16
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9c 8b       	std	Y+20, r25	; 0x14
    3b66:	8b 8b       	std	Y+19, r24	; 0x13
    3b68:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6c:	98 8b       	std	Y+16, r25	; 0x10
    3b6e:	8f 87       	std	Y+15, r24	; 0x0f
    3b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b72:	98 89       	ldd	r25, Y+16	; 0x10
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <LCD_sendCommand+0x7e8>
    3b78:	98 8b       	std	Y+16, r25	; 0x10
    3b7a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
    3b7e:	63 e0       	ldi	r22, 0x03	; 3
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	a0 e8       	ldi	r26, 0x80	; 128
    3b8c:	bf e3       	ldi	r27, 0x3F	; 63
    3b8e:	8b 87       	std	Y+11, r24	; 0x0b
    3b90:	9c 87       	std	Y+12, r25	; 0x0c
    3b92:	ad 87       	std	Y+13, r26	; 0x0d
    3b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	4a ef       	ldi	r20, 0xFA	; 250
    3ba4:	54 e4       	ldi	r21, 0x44	; 68
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8f 83       	std	Y+7, r24	; 0x07
    3bb0:	98 87       	std	Y+8, r25	; 0x08
    3bb2:	a9 87       	std	Y+9, r26	; 0x09
    3bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb8:	78 85       	ldd	r23, Y+8	; 0x08
    3bba:	89 85       	ldd	r24, Y+9	; 0x09
    3bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e8       	ldi	r20, 0x80	; 128
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	2c f4       	brge	.+10     	; 0x3bd8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
    3bd6:	3f c0       	rjmp	.+126    	; 0x3c56 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bda:	78 85       	ldd	r23, Y+8	; 0x08
    3bdc:	89 85       	ldd	r24, Y+9	; 0x09
    3bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	4f e7       	ldi	r20, 0x7F	; 127
    3be6:	57 e4       	ldi	r21, 0x47	; 71
    3be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bec:	18 16       	cp	r1, r24
    3bee:	4c f5       	brge	.+82     	; 0x3c42 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e2       	ldi	r20, 0x20	; 32
    3bfe:	51 e4       	ldi	r21, 0x41	; 65
    3c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	bc 01       	movw	r22, r24
    3c0a:	cd 01       	movw	r24, r26
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	0f c0       	rjmp	.+30     	; 0x3c38 <LCD_sendCommand+0x8ac>
    3c1a:	88 ec       	ldi	r24, 0xC8	; 200
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	8b 83       	std	Y+3, r24	; 0x03
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	f1 f7       	brne	.-4      	; 0x3c26 <LCD_sendCommand+0x89a>
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	9e 81       	ldd	r25, Y+6	; 0x06
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	9e 83       	std	Y+6, r25	; 0x06
    3c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c38:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	69 f7       	brne	.-38     	; 0x3c1a <LCD_sendCommand+0x88e>
    3c40:	14 c0       	rjmp	.+40     	; 0x3c6a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c42:	6f 81       	ldd	r22, Y+7	; 0x07
    3c44:	78 85       	ldd	r23, Y+8	; 0x08
    3c46:	89 85       	ldd	r24, Y+9	; 0x09
    3c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	9a 83       	std	Y+2, r25	; 0x02
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	9a 81       	ldd	r25, Y+2	; 0x02
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	f1 f7       	brne	.-4      	; 0x3c62 <LCD_sendCommand+0x8d6>
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3c6a:	cd 59       	subi	r28, 0x9D	; 157
    3c6c:	df 4f       	sbci	r29, 0xFF	; 255
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	f8 94       	cli
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	cf 91       	pop	r28
    3c7a:	df 91       	pop	r29
    3c7c:	1f 91       	pop	r17
    3c7e:	0f 91       	pop	r16
    3c80:	08 95       	ret

00003c82 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	c3 56       	subi	r28, 0x63	; 99
    3c90:	d0 40       	sbci	r29, 0x00	; 0
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	ed 59       	subi	r30, 0x9D	; 157
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	62 e0       	ldi	r22, 0x02	; 2
    3ca8:	41 e0       	ldi	r20, 0x01	; 1
    3caa:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e1 5a       	subi	r30, 0xA1	; 161
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	a0 e8       	ldi	r26, 0x80	; 128
    3cba:	bf e3       	ldi	r27, 0x3F	; 63
    3cbc:	80 83       	st	Z, r24
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	a2 83       	std	Z+2, r26	; 0x02
    3cc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc4:	8e 01       	movw	r16, r28
    3cc6:	05 5a       	subi	r16, 0xA5	; 165
    3cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e1 5a       	subi	r30, 0xA1	; 161
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	4a ef       	ldi	r20, 0xFA	; 250
    3cde:	54 e4       	ldi	r21, 0x44	; 68
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	f8 01       	movw	r30, r16
    3cea:	80 83       	st	Z, r24
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	a2 83       	std	Z+2, r26	; 0x02
    3cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e5 5a       	subi	r30, 0xA5	; 165
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	60 81       	ld	r22, Z
    3cfa:	71 81       	ldd	r23, Z+1	; 0x01
    3cfc:	82 81       	ldd	r24, Z+2	; 0x02
    3cfe:	93 81       	ldd	r25, Z+3	; 0x03
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	40 e8       	ldi	r20, 0x80	; 128
    3d06:	5f e3       	ldi	r21, 0x3F	; 63
    3d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d0c:	88 23       	and	r24, r24
    3d0e:	44 f4       	brge	.+16     	; 0x3d20 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3d10:	fe 01       	movw	r30, r28
    3d12:	e7 5a       	subi	r30, 0xA7	; 167
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	91 83       	std	Z+1, r25	; 0x01
    3d1c:	80 83       	st	Z, r24
    3d1e:	64 c0       	rjmp	.+200    	; 0x3de8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3d20:	fe 01       	movw	r30, r28
    3d22:	e5 5a       	subi	r30, 0xA5	; 165
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	4f e7       	ldi	r20, 0x7F	; 127
    3d34:	57 e4       	ldi	r21, 0x47	; 71
    3d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3a:	18 16       	cp	r1, r24
    3d3c:	0c f0       	brlt	.+2      	; 0x3d40 <LCD_displayCharacter+0xbe>
    3d3e:	43 c0       	rjmp	.+134    	; 0x3dc6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d40:	fe 01       	movw	r30, r28
    3d42:	e1 5a       	subi	r30, 0xA1	; 161
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	60 81       	ld	r22, Z
    3d48:	71 81       	ldd	r23, Z+1	; 0x01
    3d4a:	82 81       	ldd	r24, Z+2	; 0x02
    3d4c:	93 81       	ldd	r25, Z+3	; 0x03
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e2       	ldi	r20, 0x20	; 32
    3d54:	51 e4       	ldi	r21, 0x41	; 65
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	8e 01       	movw	r16, r28
    3d60:	07 5a       	subi	r16, 0xA7	; 167
    3d62:	1f 4f       	sbci	r17, 0xFF	; 255
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	f8 01       	movw	r30, r16
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	80 83       	st	Z, r24
    3d76:	1f c0       	rjmp	.+62     	; 0x3db6 <LCD_displayCharacter+0x134>
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e9 5a       	subi	r30, 0xA9	; 169
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	88 ec       	ldi	r24, 0xC8	; 200
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
    3d86:	fe 01       	movw	r30, r28
    3d88:	e9 5a       	subi	r30, 0xA9	; 169
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	91 81       	ldd	r25, Z+1	; 0x01
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	f1 f7       	brne	.-4      	; 0x3d90 <LCD_displayCharacter+0x10e>
    3d94:	fe 01       	movw	r30, r28
    3d96:	e9 5a       	subi	r30, 0xA9	; 169
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9e:	de 01       	movw	r26, r28
    3da0:	a7 5a       	subi	r26, 0xA7	; 167
    3da2:	bf 4f       	sbci	r27, 0xFF	; 255
    3da4:	fe 01       	movw	r30, r28
    3da6:	e7 5a       	subi	r30, 0xA7	; 167
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	11 96       	adiw	r26, 0x01	; 1
    3db2:	9c 93       	st	X, r25
    3db4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db6:	fe 01       	movw	r30, r28
    3db8:	e7 5a       	subi	r30, 0xA7	; 167
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 81       	ld	r24, Z
    3dbe:	91 81       	ldd	r25, Z+1	; 0x01
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	d1 f6       	brne	.-76     	; 0x3d78 <LCD_displayCharacter+0xf6>
    3dc4:	27 c0       	rjmp	.+78     	; 0x3e14 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	8e 01       	movw	r16, r28
    3dc8:	07 5a       	subi	r16, 0xA7	; 167
    3dca:	1f 4f       	sbci	r17, 0xFF	; 255
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e5 5a       	subi	r30, 0xA5	; 165
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	f8 01       	movw	r30, r16
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	80 83       	st	Z, r24
    3de8:	de 01       	movw	r26, r28
    3dea:	ab 5a       	subi	r26, 0xAB	; 171
    3dec:	bf 4f       	sbci	r27, 0xFF	; 255
    3dee:	fe 01       	movw	r30, r28
    3df0:	e7 5a       	subi	r30, 0xA7	; 167
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	8d 93       	st	X+, r24
    3dfa:	9c 93       	st	X, r25
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	eb 5a       	subi	r30, 0xAB	; 171
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	f1 f7       	brne	.-4      	; 0x3e06 <LCD_displayCharacter+0x184>
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	eb 5a       	subi	r30, 0xAB	; 171
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	63 e0       	ldi	r22, 0x03	; 3
    3e18:	41 e0       	ldi	r20, 0x01	; 1
    3e1a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    3e1e:	fe 01       	movw	r30, r28
    3e20:	ef 5a       	subi	r30, 0xAF	; 175
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	a0 e8       	ldi	r26, 0x80	; 128
    3e2a:	bf e3       	ldi	r27, 0x3F	; 63
    3e2c:	80 83       	st	Z, r24
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	a2 83       	std	Z+2, r26	; 0x02
    3e32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e34:	8e 01       	movw	r16, r28
    3e36:	03 5b       	subi	r16, 0xB3	; 179
    3e38:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	ef 5a       	subi	r30, 0xAF	; 175
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	4a ef       	ldi	r20, 0xFA	; 250
    3e4e:	54 e4       	ldi	r21, 0x44	; 68
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	f8 01       	movw	r30, r16
    3e5a:	80 83       	st	Z, r24
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	a2 83       	std	Z+2, r26	; 0x02
    3e60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e62:	fe 01       	movw	r30, r28
    3e64:	e3 5b       	subi	r30, 0xB3	; 179
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	60 81       	ld	r22, Z
    3e6a:	71 81       	ldd	r23, Z+1	; 0x01
    3e6c:	82 81       	ldd	r24, Z+2	; 0x02
    3e6e:	93 81       	ldd	r25, Z+3	; 0x03
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	40 e8       	ldi	r20, 0x80	; 128
    3e76:	5f e3       	ldi	r21, 0x3F	; 63
    3e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e7c:	88 23       	and	r24, r24
    3e7e:	44 f4       	brge	.+16     	; 0x3e90 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3e80:	fe 01       	movw	r30, r28
    3e82:	e5 5b       	subi	r30, 0xB5	; 181
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	80 83       	st	Z, r24
    3e8e:	64 c0       	rjmp	.+200    	; 0x3f58 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3e90:	fe 01       	movw	r30, r28
    3e92:	e3 5b       	subi	r30, 0xB3	; 179
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	3f ef       	ldi	r19, 0xFF	; 255
    3ea2:	4f e7       	ldi	r20, 0x7F	; 127
    3ea4:	57 e4       	ldi	r21, 0x47	; 71
    3ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eaa:	18 16       	cp	r1, r24
    3eac:	0c f0       	brlt	.+2      	; 0x3eb0 <LCD_displayCharacter+0x22e>
    3eae:	43 c0       	rjmp	.+134    	; 0x3f36 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	ef 5a       	subi	r30, 0xAF	; 175
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e2       	ldi	r20, 0x20	; 32
    3ec4:	51 e4       	ldi	r21, 0x41	; 65
    3ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	8e 01       	movw	r16, r28
    3ed0:	05 5b       	subi	r16, 0xB5	; 181
    3ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	f8 01       	movw	r30, r16
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24
    3ee6:	1f c0       	rjmp	.+62     	; 0x3f26 <LCD_displayCharacter+0x2a4>
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e7 5b       	subi	r30, 0xB7	; 183
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	88 ec       	ldi	r24, 0xC8	; 200
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	91 83       	std	Z+1, r25	; 0x01
    3ef4:	80 83       	st	Z, r24
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e7 5b       	subi	r30, 0xB7	; 183
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <LCD_displayCharacter+0x27e>
    3f04:	fe 01       	movw	r30, r28
    3f06:	e7 5b       	subi	r30, 0xB7	; 183
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0e:	de 01       	movw	r26, r28
    3f10:	a5 5b       	subi	r26, 0xB5	; 181
    3f12:	bf 4f       	sbci	r27, 0xFF	; 255
    3f14:	fe 01       	movw	r30, r28
    3f16:	e5 5b       	subi	r30, 0xB5	; 181
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	11 96       	adiw	r26, 0x01	; 1
    3f22:	9c 93       	st	X, r25
    3f24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f26:	fe 01       	movw	r30, r28
    3f28:	e5 5b       	subi	r30, 0xB5	; 181
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 81       	ld	r24, Z
    3f2e:	91 81       	ldd	r25, Z+1	; 0x01
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	d1 f6       	brne	.-76     	; 0x3ee8 <LCD_displayCharacter+0x266>
    3f34:	27 c0       	rjmp	.+78     	; 0x3f84 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f36:	8e 01       	movw	r16, r28
    3f38:	05 5b       	subi	r16, 0xB5	; 181
    3f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e3 5b       	subi	r30, 0xB3	; 179
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	60 81       	ld	r22, Z
    3f44:	71 81       	ldd	r23, Z+1	; 0x01
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	93 81       	ldd	r25, Z+3	; 0x03
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	f8 01       	movw	r30, r16
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
    3f58:	de 01       	movw	r26, r28
    3f5a:	a9 5b       	subi	r26, 0xB9	; 185
    3f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e5 5b       	subi	r30, 0xB5	; 181
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	91 81       	ldd	r25, Z+1	; 0x01
    3f68:	8d 93       	st	X+, r24
    3f6a:	9c 93       	st	X, r25
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e9 5b       	subi	r30, 0xB9	; 185
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	f1 f7       	brne	.-4      	; 0x3f76 <LCD_displayCharacter+0x2f4>
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e9 5b       	subi	r30, 0xB9	; 185
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3f84:	fe 01       	movw	r30, r28
    3f86:	ed 59       	subi	r30, 0x9D	; 157
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	80 81       	ld	r24, Z
    3f8c:	88 2f       	mov	r24, r24
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	80 71       	andi	r24, 0x10	; 16
    3f92:	90 70       	andi	r25, 0x00	; 0
    3f94:	95 95       	asr	r25
    3f96:	87 95       	ror	r24
    3f98:	95 95       	asr	r25
    3f9a:	87 95       	ror	r24
    3f9c:	95 95       	asr	r25
    3f9e:	87 95       	ror	r24
    3fa0:	95 95       	asr	r25
    3fa2:	87 95       	ror	r24
    3fa4:	98 2f       	mov	r25, r24
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	64 e0       	ldi	r22, 0x04	; 4
    3faa:	49 2f       	mov	r20, r25
    3fac:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	ed 59       	subi	r30, 0x9D	; 157
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	88 2f       	mov	r24, r24
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	80 72       	andi	r24, 0x20	; 32
    3fbe:	90 70       	andi	r25, 0x00	; 0
    3fc0:	95 95       	asr	r25
    3fc2:	87 95       	ror	r24
    3fc4:	95 95       	asr	r25
    3fc6:	87 95       	ror	r24
    3fc8:	95 95       	asr	r25
    3fca:	87 95       	ror	r24
    3fcc:	95 95       	asr	r25
    3fce:	87 95       	ror	r24
    3fd0:	95 95       	asr	r25
    3fd2:	87 95       	ror	r24
    3fd4:	98 2f       	mov	r25, r24
    3fd6:	82 e0       	ldi	r24, 0x02	; 2
    3fd8:	65 e0       	ldi	r22, 0x05	; 5
    3fda:	49 2f       	mov	r20, r25
    3fdc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	ed 59       	subi	r30, 0x9D	; 157
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	80 81       	ld	r24, Z
    3fe8:	88 2f       	mov	r24, r24
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	80 74       	andi	r24, 0x40	; 64
    3fee:	90 70       	andi	r25, 0x00	; 0
    3ff0:	08 2e       	mov	r0, r24
    3ff2:	89 2f       	mov	r24, r25
    3ff4:	00 0c       	add	r0, r0
    3ff6:	88 1f       	adc	r24, r24
    3ff8:	99 0b       	sbc	r25, r25
    3ffa:	00 0c       	add	r0, r0
    3ffc:	88 1f       	adc	r24, r24
    3ffe:	99 1f       	adc	r25, r25
    4000:	98 2f       	mov	r25, r24
    4002:	82 e0       	ldi	r24, 0x02	; 2
    4004:	66 e0       	ldi	r22, 0x06	; 6
    4006:	49 2f       	mov	r20, r25
    4008:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    400c:	fe 01       	movw	r30, r28
    400e:	ed 59       	subi	r30, 0x9D	; 157
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	80 81       	ld	r24, Z
    4014:	98 2f       	mov	r25, r24
    4016:	99 1f       	adc	r25, r25
    4018:	99 27       	eor	r25, r25
    401a:	99 1f       	adc	r25, r25
    401c:	82 e0       	ldi	r24, 0x02	; 2
    401e:	67 e0       	ldi	r22, 0x07	; 7
    4020:	49 2f       	mov	r20, r25
    4022:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    4026:	fe 01       	movw	r30, r28
    4028:	ed 5b       	subi	r30, 0xBD	; 189
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	a0 e8       	ldi	r26, 0x80	; 128
    4032:	bf e3       	ldi	r27, 0x3F	; 63
    4034:	80 83       	st	Z, r24
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	a2 83       	std	Z+2, r26	; 0x02
    403a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403c:	8e 01       	movw	r16, r28
    403e:	01 5c       	subi	r16, 0xC1	; 193
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	fe 01       	movw	r30, r28
    4044:	ed 5b       	subi	r30, 0xBD	; 189
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	60 81       	ld	r22, Z
    404a:	71 81       	ldd	r23, Z+1	; 0x01
    404c:	82 81       	ldd	r24, Z+2	; 0x02
    404e:	93 81       	ldd	r25, Z+3	; 0x03
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	4a ef       	ldi	r20, 0xFA	; 250
    4056:	54 e4       	ldi	r21, 0x44	; 68
    4058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	80 83       	st	Z, r24
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	a2 83       	std	Z+2, r26	; 0x02
    4068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    406a:	fe 01       	movw	r30, r28
    406c:	ff 96       	adiw	r30, 0x3f	; 63
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e8       	ldi	r20, 0x80	; 128
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4082:	88 23       	and	r24, r24
    4084:	2c f4       	brge	.+10     	; 0x4090 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	9e af       	std	Y+62, r25	; 0x3e
    408c:	8d af       	std	Y+61, r24	; 0x3d
    408e:	46 c0       	rjmp	.+140    	; 0x411c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    4090:	fe 01       	movw	r30, r28
    4092:	ff 96       	adiw	r30, 0x3f	; 63
    4094:	60 81       	ld	r22, Z
    4096:	71 81       	ldd	r23, Z+1	; 0x01
    4098:	82 81       	ldd	r24, Z+2	; 0x02
    409a:	93 81       	ldd	r25, Z+3	; 0x03
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	3f ef       	ldi	r19, 0xFF	; 255
    40a0:	4f e7       	ldi	r20, 0x7F	; 127
    40a2:	57 e4       	ldi	r21, 0x47	; 71
    40a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a8:	18 16       	cp	r1, r24
    40aa:	64 f5       	brge	.+88     	; 0x4104 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ac:	fe 01       	movw	r30, r28
    40ae:	ed 5b       	subi	r30, 0xBD	; 189
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e2       	ldi	r20, 0x20	; 32
    40c0:	51 e4       	ldi	r21, 0x41	; 65
    40c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	bc 01       	movw	r22, r24
    40cc:	cd 01       	movw	r24, r26
    40ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	9e af       	std	Y+62, r25	; 0x3e
    40d8:	8d af       	std	Y+61, r24	; 0x3d
    40da:	0f c0       	rjmp	.+30     	; 0x40fa <LCD_displayCharacter+0x478>
    40dc:	88 ec       	ldi	r24, 0xC8	; 200
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	9c af       	std	Y+60, r25	; 0x3c
    40e2:	8b af       	std	Y+59, r24	; 0x3b
    40e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    40e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	f1 f7       	brne	.-4      	; 0x40e8 <LCD_displayCharacter+0x466>
    40ec:	9c af       	std	Y+60, r25	; 0x3c
    40ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	9e af       	std	Y+62, r25	; 0x3e
    40f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    40fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	69 f7       	brne	.-38     	; 0x40dc <LCD_displayCharacter+0x45a>
    4102:	16 c0       	rjmp	.+44     	; 0x4130 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4104:	fe 01       	movw	r30, r28
    4106:	ff 96       	adiw	r30, 0x3f	; 63
    4108:	60 81       	ld	r22, Z
    410a:	71 81       	ldd	r23, Z+1	; 0x01
    410c:	82 81       	ldd	r24, Z+2	; 0x02
    410e:	93 81       	ldd	r25, Z+3	; 0x03
    4110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	9e af       	std	Y+62, r25	; 0x3e
    411a:	8d af       	std	Y+61, r24	; 0x3d
    411c:	8d ad       	ldd	r24, Y+61	; 0x3d
    411e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4120:	9a af       	std	Y+58, r25	; 0x3a
    4122:	89 af       	std	Y+57, r24	; 0x39
    4124:	89 ad       	ldd	r24, Y+57	; 0x39
    4126:	9a ad       	ldd	r25, Y+58	; 0x3a
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <LCD_displayCharacter+0x4a6>
    412c:	9a af       	std	Y+58, r25	; 0x3a
    412e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	63 e0       	ldi	r22, 0x03	; 3
    4134:	40 e0       	ldi	r20, 0x00	; 0
    4136:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	a0 e8       	ldi	r26, 0x80	; 128
    4140:	bf e3       	ldi	r27, 0x3F	; 63
    4142:	8d ab       	std	Y+53, r24	; 0x35
    4144:	9e ab       	std	Y+54, r25	; 0x36
    4146:	af ab       	std	Y+55, r26	; 0x37
    4148:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414a:	6d a9       	ldd	r22, Y+53	; 0x35
    414c:	7e a9       	ldd	r23, Y+54	; 0x36
    414e:	8f a9       	ldd	r24, Y+55	; 0x37
    4150:	98 ad       	ldd	r25, Y+56	; 0x38
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	4a ef       	ldi	r20, 0xFA	; 250
    4158:	54 e4       	ldi	r21, 0x44	; 68
    415a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	89 ab       	std	Y+49, r24	; 0x31
    4164:	9a ab       	std	Y+50, r25	; 0x32
    4166:	ab ab       	std	Y+51, r26	; 0x33
    4168:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    416a:	69 a9       	ldd	r22, Y+49	; 0x31
    416c:	7a a9       	ldd	r23, Y+50	; 0x32
    416e:	8b a9       	ldd	r24, Y+51	; 0x33
    4170:	9c a9       	ldd	r25, Y+52	; 0x34
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	40 e8       	ldi	r20, 0x80	; 128
    4178:	5f e3       	ldi	r21, 0x3F	; 63
    417a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    417e:	88 23       	and	r24, r24
    4180:	2c f4       	brge	.+10     	; 0x418c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	98 ab       	std	Y+48, r25	; 0x30
    4188:	8f a7       	std	Y+47, r24	; 0x2f
    418a:	3f c0       	rjmp	.+126    	; 0x420a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    418c:	69 a9       	ldd	r22, Y+49	; 0x31
    418e:	7a a9       	ldd	r23, Y+50	; 0x32
    4190:	8b a9       	ldd	r24, Y+51	; 0x33
    4192:	9c a9       	ldd	r25, Y+52	; 0x34
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	3f ef       	ldi	r19, 0xFF	; 255
    4198:	4f e7       	ldi	r20, 0x7F	; 127
    419a:	57 e4       	ldi	r21, 0x47	; 71
    419c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a0:	18 16       	cp	r1, r24
    41a2:	4c f5       	brge	.+82     	; 0x41f6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a4:	6d a9       	ldd	r22, Y+53	; 0x35
    41a6:	7e a9       	ldd	r23, Y+54	; 0x36
    41a8:	8f a9       	ldd	r24, Y+55	; 0x37
    41aa:	98 ad       	ldd	r25, Y+56	; 0x38
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e2       	ldi	r20, 0x20	; 32
    41b2:	51 e4       	ldi	r21, 0x41	; 65
    41b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	bc 01       	movw	r22, r24
    41be:	cd 01       	movw	r24, r26
    41c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	98 ab       	std	Y+48, r25	; 0x30
    41ca:	8f a7       	std	Y+47, r24	; 0x2f
    41cc:	0f c0       	rjmp	.+30     	; 0x41ec <LCD_displayCharacter+0x56a>
    41ce:	88 ec       	ldi	r24, 0xC8	; 200
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	9e a7       	std	Y+46, r25	; 0x2e
    41d4:	8d a7       	std	Y+45, r24	; 0x2d
    41d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    41d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	f1 f7       	brne	.-4      	; 0x41da <LCD_displayCharacter+0x558>
    41de:	9e a7       	std	Y+46, r25	; 0x2e
    41e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e4:	98 a9       	ldd	r25, Y+48	; 0x30
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	98 ab       	std	Y+48, r25	; 0x30
    41ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ee:	98 a9       	ldd	r25, Y+48	; 0x30
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	69 f7       	brne	.-38     	; 0x41ce <LCD_displayCharacter+0x54c>
    41f4:	14 c0       	rjmp	.+40     	; 0x421e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f6:	69 a9       	ldd	r22, Y+49	; 0x31
    41f8:	7a a9       	ldd	r23, Y+50	; 0x32
    41fa:	8b a9       	ldd	r24, Y+51	; 0x33
    41fc:	9c a9       	ldd	r25, Y+52	; 0x34
    41fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	98 ab       	std	Y+48, r25	; 0x30
    4208:	8f a7       	std	Y+47, r24	; 0x2f
    420a:	8f a5       	ldd	r24, Y+47	; 0x2f
    420c:	98 a9       	ldd	r25, Y+48	; 0x30
    420e:	9c a7       	std	Y+44, r25	; 0x2c
    4210:	8b a7       	std	Y+43, r24	; 0x2b
    4212:	8b a5       	ldd	r24, Y+43	; 0x2b
    4214:	9c a5       	ldd	r25, Y+44	; 0x2c
    4216:	01 97       	sbiw	r24, 0x01	; 1
    4218:	f1 f7       	brne	.-4      	; 0x4216 <LCD_displayCharacter+0x594>
    421a:	9c a7       	std	Y+44, r25	; 0x2c
    421c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    421e:	82 e0       	ldi	r24, 0x02	; 2
    4220:	63 e0       	ldi	r22, 0x03	; 3
    4222:	41 e0       	ldi	r20, 0x01	; 1
    4224:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	a0 e8       	ldi	r26, 0x80	; 128
    422e:	bf e3       	ldi	r27, 0x3F	; 63
    4230:	8f a3       	std	Y+39, r24	; 0x27
    4232:	98 a7       	std	Y+40, r25	; 0x28
    4234:	a9 a7       	std	Y+41, r26	; 0x29
    4236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4238:	6f a1       	ldd	r22, Y+39	; 0x27
    423a:	78 a5       	ldd	r23, Y+40	; 0x28
    423c:	89 a5       	ldd	r24, Y+41	; 0x29
    423e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	4a ef       	ldi	r20, 0xFA	; 250
    4246:	54 e4       	ldi	r21, 0x44	; 68
    4248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	8b a3       	std	Y+35, r24	; 0x23
    4252:	9c a3       	std	Y+36, r25	; 0x24
    4254:	ad a3       	std	Y+37, r26	; 0x25
    4256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4258:	6b a1       	ldd	r22, Y+35	; 0x23
    425a:	7c a1       	ldd	r23, Y+36	; 0x24
    425c:	8d a1       	ldd	r24, Y+37	; 0x25
    425e:	9e a1       	ldd	r25, Y+38	; 0x26
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e8       	ldi	r20, 0x80	; 128
    4266:	5f e3       	ldi	r21, 0x3F	; 63
    4268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    426c:	88 23       	and	r24, r24
    426e:	2c f4       	brge	.+10     	; 0x427a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	9a a3       	std	Y+34, r25	; 0x22
    4276:	89 a3       	std	Y+33, r24	; 0x21
    4278:	3f c0       	rjmp	.+126    	; 0x42f8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    427a:	6b a1       	ldd	r22, Y+35	; 0x23
    427c:	7c a1       	ldd	r23, Y+36	; 0x24
    427e:	8d a1       	ldd	r24, Y+37	; 0x25
    4280:	9e a1       	ldd	r25, Y+38	; 0x26
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	3f ef       	ldi	r19, 0xFF	; 255
    4286:	4f e7       	ldi	r20, 0x7F	; 127
    4288:	57 e4       	ldi	r21, 0x47	; 71
    428a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    428e:	18 16       	cp	r1, r24
    4290:	4c f5       	brge	.+82     	; 0x42e4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4292:	6f a1       	ldd	r22, Y+39	; 0x27
    4294:	78 a5       	ldd	r23, Y+40	; 0x28
    4296:	89 a5       	ldd	r24, Y+41	; 0x29
    4298:	9a a5       	ldd	r25, Y+42	; 0x2a
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	40 e2       	ldi	r20, 0x20	; 32
    42a0:	51 e4       	ldi	r21, 0x41	; 65
    42a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	bc 01       	movw	r22, r24
    42ac:	cd 01       	movw	r24, r26
    42ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	9a a3       	std	Y+34, r25	; 0x22
    42b8:	89 a3       	std	Y+33, r24	; 0x21
    42ba:	0f c0       	rjmp	.+30     	; 0x42da <LCD_displayCharacter+0x658>
    42bc:	88 ec       	ldi	r24, 0xC8	; 200
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	98 a3       	std	Y+32, r25	; 0x20
    42c2:	8f 8f       	std	Y+31, r24	; 0x1f
    42c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42c6:	98 a1       	ldd	r25, Y+32	; 0x20
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <LCD_displayCharacter+0x646>
    42cc:	98 a3       	std	Y+32, r25	; 0x20
    42ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d0:	89 a1       	ldd	r24, Y+33	; 0x21
    42d2:	9a a1       	ldd	r25, Y+34	; 0x22
    42d4:	01 97       	sbiw	r24, 0x01	; 1
    42d6:	9a a3       	std	Y+34, r25	; 0x22
    42d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42da:	89 a1       	ldd	r24, Y+33	; 0x21
    42dc:	9a a1       	ldd	r25, Y+34	; 0x22
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	69 f7       	brne	.-38     	; 0x42bc <LCD_displayCharacter+0x63a>
    42e2:	14 c0       	rjmp	.+40     	; 0x430c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e4:	6b a1       	ldd	r22, Y+35	; 0x23
    42e6:	7c a1       	ldd	r23, Y+36	; 0x24
    42e8:	8d a1       	ldd	r24, Y+37	; 0x25
    42ea:	9e a1       	ldd	r25, Y+38	; 0x26
    42ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	9a a3       	std	Y+34, r25	; 0x22
    42f6:	89 a3       	std	Y+33, r24	; 0x21
    42f8:	89 a1       	ldd	r24, Y+33	; 0x21
    42fa:	9a a1       	ldd	r25, Y+34	; 0x22
    42fc:	9e 8f       	std	Y+30, r25	; 0x1e
    42fe:	8d 8f       	std	Y+29, r24	; 0x1d
    4300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	f1 f7       	brne	.-4      	; 0x4304 <LCD_displayCharacter+0x682>
    4308:	9e 8f       	std	Y+30, r25	; 0x1e
    430a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    430c:	fe 01       	movw	r30, r28
    430e:	ed 59       	subi	r30, 0x9D	; 157
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	80 81       	ld	r24, Z
    4314:	98 2f       	mov	r25, r24
    4316:	91 70       	andi	r25, 0x01	; 1
    4318:	82 e0       	ldi	r24, 0x02	; 2
    431a:	64 e0       	ldi	r22, 0x04	; 4
    431c:	49 2f       	mov	r20, r25
    431e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    4322:	fe 01       	movw	r30, r28
    4324:	ed 59       	subi	r30, 0x9D	; 157
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	88 2f       	mov	r24, r24
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	82 70       	andi	r24, 0x02	; 2
    4330:	90 70       	andi	r25, 0x00	; 0
    4332:	95 95       	asr	r25
    4334:	87 95       	ror	r24
    4336:	98 2f       	mov	r25, r24
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	65 e0       	ldi	r22, 0x05	; 5
    433c:	49 2f       	mov	r20, r25
    433e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    4342:	fe 01       	movw	r30, r28
    4344:	ed 59       	subi	r30, 0x9D	; 157
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	80 81       	ld	r24, Z
    434a:	88 2f       	mov	r24, r24
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	84 70       	andi	r24, 0x04	; 4
    4350:	90 70       	andi	r25, 0x00	; 0
    4352:	95 95       	asr	r25
    4354:	87 95       	ror	r24
    4356:	95 95       	asr	r25
    4358:	87 95       	ror	r24
    435a:	98 2f       	mov	r25, r24
    435c:	82 e0       	ldi	r24, 0x02	; 2
    435e:	66 e0       	ldi	r22, 0x06	; 6
    4360:	49 2f       	mov	r20, r25
    4362:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    4366:	fe 01       	movw	r30, r28
    4368:	ed 59       	subi	r30, 0x9D	; 157
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	88 2f       	mov	r24, r24
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	88 70       	andi	r24, 0x08	; 8
    4374:	90 70       	andi	r25, 0x00	; 0
    4376:	95 95       	asr	r25
    4378:	87 95       	ror	r24
    437a:	95 95       	asr	r25
    437c:	87 95       	ror	r24
    437e:	95 95       	asr	r25
    4380:	87 95       	ror	r24
    4382:	98 2f       	mov	r25, r24
    4384:	82 e0       	ldi	r24, 0x02	; 2
    4386:	67 e0       	ldi	r22, 0x07	; 7
    4388:	49 2f       	mov	r20, r25
    438a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	a0 e8       	ldi	r26, 0x80	; 128
    4394:	bf e3       	ldi	r27, 0x3F	; 63
    4396:	89 8f       	std	Y+25, r24	; 0x19
    4398:	9a 8f       	std	Y+26, r25	; 0x1a
    439a:	ab 8f       	std	Y+27, r26	; 0x1b
    439c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439e:	69 8d       	ldd	r22, Y+25	; 0x19
    43a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	4a ef       	ldi	r20, 0xFA	; 250
    43ac:	54 e4       	ldi	r21, 0x44	; 68
    43ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	8d 8b       	std	Y+21, r24	; 0x15
    43b8:	9e 8b       	std	Y+22, r25	; 0x16
    43ba:	af 8b       	std	Y+23, r26	; 0x17
    43bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43be:	6d 89       	ldd	r22, Y+21	; 0x15
    43c0:	7e 89       	ldd	r23, Y+22	; 0x16
    43c2:	8f 89       	ldd	r24, Y+23	; 0x17
    43c4:	98 8d       	ldd	r25, Y+24	; 0x18
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	40 e8       	ldi	r20, 0x80	; 128
    43cc:	5f e3       	ldi	r21, 0x3F	; 63
    43ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d2:	88 23       	and	r24, r24
    43d4:	2c f4       	brge	.+10     	; 0x43e0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	9c 8b       	std	Y+20, r25	; 0x14
    43dc:	8b 8b       	std	Y+19, r24	; 0x13
    43de:	3f c0       	rjmp	.+126    	; 0x445e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    43e0:	6d 89       	ldd	r22, Y+21	; 0x15
    43e2:	7e 89       	ldd	r23, Y+22	; 0x16
    43e4:	8f 89       	ldd	r24, Y+23	; 0x17
    43e6:	98 8d       	ldd	r25, Y+24	; 0x18
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	3f ef       	ldi	r19, 0xFF	; 255
    43ec:	4f e7       	ldi	r20, 0x7F	; 127
    43ee:	57 e4       	ldi	r21, 0x47	; 71
    43f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f4:	18 16       	cp	r1, r24
    43f6:	4c f5       	brge	.+82     	; 0x444a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f8:	69 8d       	ldd	r22, Y+25	; 0x19
    43fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	40 e2       	ldi	r20, 0x20	; 32
    4406:	51 e4       	ldi	r21, 0x41	; 65
    4408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440c:	dc 01       	movw	r26, r24
    440e:	cb 01       	movw	r24, r22
    4410:	bc 01       	movw	r22, r24
    4412:	cd 01       	movw	r24, r26
    4414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	9c 8b       	std	Y+20, r25	; 0x14
    441e:	8b 8b       	std	Y+19, r24	; 0x13
    4420:	0f c0       	rjmp	.+30     	; 0x4440 <LCD_displayCharacter+0x7be>
    4422:	88 ec       	ldi	r24, 0xC8	; 200
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	9a 8b       	std	Y+18, r25	; 0x12
    4428:	89 8b       	std	Y+17, r24	; 0x11
    442a:	89 89       	ldd	r24, Y+17	; 0x11
    442c:	9a 89       	ldd	r25, Y+18	; 0x12
    442e:	01 97       	sbiw	r24, 0x01	; 1
    4430:	f1 f7       	brne	.-4      	; 0x442e <LCD_displayCharacter+0x7ac>
    4432:	9a 8b       	std	Y+18, r25	; 0x12
    4434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4436:	8b 89       	ldd	r24, Y+19	; 0x13
    4438:	9c 89       	ldd	r25, Y+20	; 0x14
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	9c 8b       	std	Y+20, r25	; 0x14
    443e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4440:	8b 89       	ldd	r24, Y+19	; 0x13
    4442:	9c 89       	ldd	r25, Y+20	; 0x14
    4444:	00 97       	sbiw	r24, 0x00	; 0
    4446:	69 f7       	brne	.-38     	; 0x4422 <LCD_displayCharacter+0x7a0>
    4448:	14 c0       	rjmp	.+40     	; 0x4472 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    444a:	6d 89       	ldd	r22, Y+21	; 0x15
    444c:	7e 89       	ldd	r23, Y+22	; 0x16
    444e:	8f 89       	ldd	r24, Y+23	; 0x17
    4450:	98 8d       	ldd	r25, Y+24	; 0x18
    4452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	9c 8b       	std	Y+20, r25	; 0x14
    445c:	8b 8b       	std	Y+19, r24	; 0x13
    445e:	8b 89       	ldd	r24, Y+19	; 0x13
    4460:	9c 89       	ldd	r25, Y+20	; 0x14
    4462:	98 8b       	std	Y+16, r25	; 0x10
    4464:	8f 87       	std	Y+15, r24	; 0x0f
    4466:	8f 85       	ldd	r24, Y+15	; 0x0f
    4468:	98 89       	ldd	r25, Y+16	; 0x10
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	f1 f7       	brne	.-4      	; 0x446a <LCD_displayCharacter+0x7e8>
    446e:	98 8b       	std	Y+16, r25	; 0x10
    4470:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4472:	82 e0       	ldi	r24, 0x02	; 2
    4474:	63 e0       	ldi	r22, 0x03	; 3
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	a0 e8       	ldi	r26, 0x80	; 128
    4482:	bf e3       	ldi	r27, 0x3F	; 63
    4484:	8b 87       	std	Y+11, r24	; 0x0b
    4486:	9c 87       	std	Y+12, r25	; 0x0c
    4488:	ad 87       	std	Y+13, r26	; 0x0d
    448a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448c:	6b 85       	ldd	r22, Y+11	; 0x0b
    448e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4490:	8d 85       	ldd	r24, Y+13	; 0x0d
    4492:	9e 85       	ldd	r25, Y+14	; 0x0e
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	4a ef       	ldi	r20, 0xFA	; 250
    449a:	54 e4       	ldi	r21, 0x44	; 68
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8f 83       	std	Y+7, r24	; 0x07
    44a6:	98 87       	std	Y+8, r25	; 0x08
    44a8:	a9 87       	std	Y+9, r26	; 0x09
    44aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ac:	6f 81       	ldd	r22, Y+7	; 0x07
    44ae:	78 85       	ldd	r23, Y+8	; 0x08
    44b0:	89 85       	ldd	r24, Y+9	; 0x09
    44b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e8       	ldi	r20, 0x80	; 128
    44ba:	5f e3       	ldi	r21, 0x3F	; 63
    44bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	2c f4       	brge	.+10     	; 0x44ce <LCD_displayCharacter+0x84c>
		__ticks = 1;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	9e 83       	std	Y+6, r25	; 0x06
    44ca:	8d 83       	std	Y+5, r24	; 0x05
    44cc:	3f c0       	rjmp	.+126    	; 0x454c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    44ce:	6f 81       	ldd	r22, Y+7	; 0x07
    44d0:	78 85       	ldd	r23, Y+8	; 0x08
    44d2:	89 85       	ldd	r24, Y+9	; 0x09
    44d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	3f ef       	ldi	r19, 0xFF	; 255
    44da:	4f e7       	ldi	r20, 0x7F	; 127
    44dc:	57 e4       	ldi	r21, 0x47	; 71
    44de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44e2:	18 16       	cp	r1, r24
    44e4:	4c f5       	brge	.+82     	; 0x4538 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e2       	ldi	r20, 0x20	; 32
    44f4:	51 e4       	ldi	r21, 0x41	; 65
    44f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	bc 01       	movw	r22, r24
    4500:	cd 01       	movw	r24, r26
    4502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	9e 83       	std	Y+6, r25	; 0x06
    450c:	8d 83       	std	Y+5, r24	; 0x05
    450e:	0f c0       	rjmp	.+30     	; 0x452e <LCD_displayCharacter+0x8ac>
    4510:	88 ec       	ldi	r24, 0xC8	; 200
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	9c 83       	std	Y+4, r25	; 0x04
    4516:	8b 83       	std	Y+3, r24	; 0x03
    4518:	8b 81       	ldd	r24, Y+3	; 0x03
    451a:	9c 81       	ldd	r25, Y+4	; 0x04
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <LCD_displayCharacter+0x89a>
    4520:	9c 83       	std	Y+4, r25	; 0x04
    4522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4524:	8d 81       	ldd	r24, Y+5	; 0x05
    4526:	9e 81       	ldd	r25, Y+6	; 0x06
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	9e 83       	std	Y+6, r25	; 0x06
    452c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452e:	8d 81       	ldd	r24, Y+5	; 0x05
    4530:	9e 81       	ldd	r25, Y+6	; 0x06
    4532:	00 97       	sbiw	r24, 0x00	; 0
    4534:	69 f7       	brne	.-38     	; 0x4510 <LCD_displayCharacter+0x88e>
    4536:	14 c0       	rjmp	.+40     	; 0x4560 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4538:	6f 81       	ldd	r22, Y+7	; 0x07
    453a:	78 85       	ldd	r23, Y+8	; 0x08
    453c:	89 85       	ldd	r24, Y+9	; 0x09
    453e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9e 83       	std	Y+6, r25	; 0x06
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	8d 81       	ldd	r24, Y+5	; 0x05
    454e:	9e 81       	ldd	r25, Y+6	; 0x06
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	89 83       	std	Y+1, r24	; 0x01
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	9a 81       	ldd	r25, Y+2	; 0x02
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <LCD_displayCharacter+0x8d6>
    455c:	9a 83       	std	Y+2, r25	; 0x02
    455e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4560:	cd 59       	subi	r28, 0x9D	; 157
    4562:	df 4f       	sbci	r29, 0xFF	; 255
    4564:	0f b6       	in	r0, 0x3f	; 63
    4566:	f8 94       	cli
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	0f be       	out	0x3f, r0	; 63
    456c:	cd bf       	out	0x3d, r28	; 61
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	1f 91       	pop	r17
    4574:	0f 91       	pop	r16
    4576:	08 95       	ret

00004578 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <LCD_displayString+0x6>
    457e:	0f 92       	push	r0
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	9b 83       	std	Y+3, r25	; 0x03
    4586:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4588:	19 82       	std	Y+1, r1	; 0x01
    458a:	0e c0       	rjmp	.+28     	; 0x45a8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	28 2f       	mov	r18, r24
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	8a 81       	ldd	r24, Y+2	; 0x02
    4594:	9b 81       	ldd	r25, Y+3	; 0x03
    4596:	fc 01       	movw	r30, r24
    4598:	e2 0f       	add	r30, r18
    459a:	f3 1f       	adc	r31, r19
    459c:	80 81       	ld	r24, Z
    459e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <LCD_displayCharacter>
		i++;
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	8f 5f       	subi	r24, 0xFF	; 255
    45a6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	28 2f       	mov	r18, r24
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	8a 81       	ldd	r24, Y+2	; 0x02
    45b0:	9b 81       	ldd	r25, Y+3	; 0x03
    45b2:	fc 01       	movw	r30, r24
    45b4:	e2 0f       	add	r30, r18
    45b6:	f3 1f       	adc	r31, r19
    45b8:	80 81       	ld	r24, Z
    45ba:	88 23       	and	r24, r24
    45bc:	39 f7       	brne	.-50     	; 0x458c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	0f 90       	pop	r0
    45c4:	cf 91       	pop	r28
    45c6:	df 91       	pop	r29
    45c8:	08 95       	ret

000045ca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	00 d0       	rcall	.+0      	; 0x45d0 <LCD_moveCursor+0x6>
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <LCD_moveCursor+0x8>
    45d2:	0f 92       	push	r0
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	8a 83       	std	Y+2, r24	; 0x02
    45da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    45dc:	8a 81       	ldd	r24, Y+2	; 0x02
    45de:	28 2f       	mov	r18, r24
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	3d 83       	std	Y+5, r19	; 0x05
    45e4:	2c 83       	std	Y+4, r18	; 0x04
    45e6:	8c 81       	ldd	r24, Y+4	; 0x04
    45e8:	9d 81       	ldd	r25, Y+5	; 0x05
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	91 05       	cpc	r25, r1
    45ee:	c1 f0       	breq	.+48     	; 0x4620 <LCD_moveCursor+0x56>
    45f0:	2c 81       	ldd	r18, Y+4	; 0x04
    45f2:	3d 81       	ldd	r19, Y+5	; 0x05
    45f4:	22 30       	cpi	r18, 0x02	; 2
    45f6:	31 05       	cpc	r19, r1
    45f8:	2c f4       	brge	.+10     	; 0x4604 <LCD_moveCursor+0x3a>
    45fa:	8c 81       	ldd	r24, Y+4	; 0x04
    45fc:	9d 81       	ldd	r25, Y+5	; 0x05
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	61 f0       	breq	.+24     	; 0x461a <LCD_moveCursor+0x50>
    4602:	19 c0       	rjmp	.+50     	; 0x4636 <LCD_moveCursor+0x6c>
    4604:	2c 81       	ldd	r18, Y+4	; 0x04
    4606:	3d 81       	ldd	r19, Y+5	; 0x05
    4608:	22 30       	cpi	r18, 0x02	; 2
    460a:	31 05       	cpc	r19, r1
    460c:	69 f0       	breq	.+26     	; 0x4628 <LCD_moveCursor+0x5e>
    460e:	8c 81       	ldd	r24, Y+4	; 0x04
    4610:	9d 81       	ldd	r25, Y+5	; 0x05
    4612:	83 30       	cpi	r24, 0x03	; 3
    4614:	91 05       	cpc	r25, r1
    4616:	61 f0       	breq	.+24     	; 0x4630 <LCD_moveCursor+0x66>
    4618:	0e c0       	rjmp	.+28     	; 0x4636 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    461a:	8b 81       	ldd	r24, Y+3	; 0x03
    461c:	89 83       	std	Y+1, r24	; 0x01
    461e:	0b c0       	rjmp	.+22     	; 0x4636 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4620:	8b 81       	ldd	r24, Y+3	; 0x03
    4622:	80 5c       	subi	r24, 0xC0	; 192
    4624:	89 83       	std	Y+1, r24	; 0x01
    4626:	07 c0       	rjmp	.+14     	; 0x4636 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    4628:	8b 81       	ldd	r24, Y+3	; 0x03
    462a:	80 5f       	subi	r24, 0xF0	; 240
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	03 c0       	rjmp	.+6      	; 0x4636 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	80 5b       	subi	r24, 0xB0	; 176
    4634:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	80 68       	ori	r24, 0x80	; 128
    463a:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
}
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	cf 91       	pop	r28
    464a:	df 91       	pop	r29
    464c:	08 95       	ret

0000464e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    464e:	df 93       	push	r29
    4650:	cf 93       	push	r28
    4652:	00 d0       	rcall	.+0      	; 0x4654 <LCD_displayStringRowColumn+0x6>
    4654:	00 d0       	rcall	.+0      	; 0x4656 <LCD_displayStringRowColumn+0x8>
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	89 83       	std	Y+1, r24	; 0x01
    465c:	6a 83       	std	Y+2, r22	; 0x02
    465e:	5c 83       	std	Y+4, r21	; 0x04
    4660:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	6a 81       	ldd	r22, Y+2	; 0x02
    4666:	0e 94 e5 22 	call	0x45ca	; 0x45ca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    466a:	8b 81       	ldd	r24, Y+3	; 0x03
    466c:	9c 81       	ldd	r25, Y+4	; 0x04
    466e:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_displayString>
}
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	08 95       	ret

00004680 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	62 97       	sbiw	r28, 0x12	; 18
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	9a 8b       	std	Y+18, r25	; 0x12
    4696:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4698:	89 89       	ldd	r24, Y+17	; 0x11
    469a:	9a 89       	ldd	r25, Y+18	; 0x12
    469c:	9e 01       	movw	r18, r28
    469e:	2f 5f       	subi	r18, 0xFF	; 255
    46a0:	3f 4f       	sbci	r19, 0xFF	; 255
    46a2:	b9 01       	movw	r22, r18
    46a4:	4a e0       	ldi	r20, 0x0A	; 10
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	0e 94 24 27 	call	0x4e48	; 0x4e48 <itoa>
   LCD_displayString(buff); /* Display the string */
    46ac:	ce 01       	movw	r24, r28
    46ae:	01 96       	adiw	r24, 0x01	; 1
    46b0:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_displayString>
}
    46b4:	62 96       	adiw	r28, 0x12	; 18
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	cd bf       	out	0x3d, r28	; 61
    46c0:	cf 91       	pop	r28
    46c2:	df 91       	pop	r29
    46c4:	08 95       	ret

000046c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    46c6:	df 93       	push	r29
    46c8:	cf 93       	push	r28
    46ca:	cd b7       	in	r28, 0x3d	; 61
    46cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_sendCommand>
}
    46d4:	cf 91       	pop	r28
    46d6:	df 91       	pop	r29
    46d8:	08 95       	ret

000046da <motor_init>:

#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include "../MCAL/gpio.h"

void motor_init()
{
    46da:	df 93       	push	r29
    46dc:	cf 93       	push	r28
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_IN1_PORT_ID ,Motor_IN1_PIN_ID,PIN_OUTPUT );
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	64 e0       	ldi	r22, 0x04	; 4
    46e6:	41 e0       	ldi	r20, 0x01	; 1
    46e8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_IN2_PORT_ID ,Motor_IN2_PIN_ID,PIN_OUTPUT );
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	65 e0       	ldi	r22, 0x05	; 5
    46f0:	41 e0       	ldi	r20, 0x01	; 1
    46f2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	64 e0       	ldi	r22, 0x04	; 4
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	65 e0       	ldi	r22, 0x05	; 5
    4704:	40 e0       	ldi	r20, 0x00	; 0
    4706:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <changeSpeed>:
void changeSpeed(unsigned char x)
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	0f 92       	push	r0
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	89 83       	std	Y+1, r24	; 0x01
//the most speed is 256
	PWM_TIMER0_Start(x);
    471c:	89 81       	ldd	r24, Y+1	; 0x01
    471e:	88 2f       	mov	r24, r24
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <PWM_TIMER0_Start>

}
    4726:	0f 90       	pop	r0
    4728:	cf 91       	pop	r28
    472a:	df 91       	pop	r29
    472c:	08 95       	ret

0000472e <rotate_cw>:
void rotate_cw()
{
    472e:	df 93       	push	r29
    4730:	cf 93       	push	r28
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	64 e0       	ldi	r22, 0x04	; 4
    473a:	41 e0       	ldi	r20, 0x01	; 1
    473c:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	65 e0       	ldi	r22, 0x05	; 5
    4744:	40 e0       	ldi	r20, 0x00	; 0
    4746:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <rotate_acw>:
void rotate_acw()
{
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	64 e0       	ldi	r22, 0x04	; 4
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_HIGH);
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	65 e0       	ldi	r22, 0x05	; 5
    4766:	41 e0       	ldi	r20, 0x01	; 1
    4768:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    476c:	cf 91       	pop	r28
    476e:	df 91       	pop	r29
    4770:	08 95       	ret

00004772 <motor_stop>:
void motor_stop()
{
    4772:	df 93       	push	r29
    4774:	cf 93       	push	r28
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	64 e0       	ldi	r22, 0x04	; 4
    477e:	40 e0       	ldi	r20, 0x00	; 0
    4780:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	65 e0       	ldi	r22, 0x05	; 5
    4788:	40 e0       	ldi	r20, 0x00	; 0
    478a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <motor2_init>:

#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include "../MCAL/gpio.h"

void motor2_init()
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_IN1_PORT_ID ,Motor_IN1_PIN_ID,PIN_OUTPUT );
    479c:	83 e0       	ldi	r24, 0x03	; 3
    479e:	64 e0       	ldi	r22, 0x04	; 4
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_IN2_PORT_ID ,Motor_IN2_PIN_ID,PIN_OUTPUT );
    47a6:	83 e0       	ldi	r24, 0x03	; 3
    47a8:	65 e0       	ldi	r22, 0x05	; 5
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>

	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	64 e0       	ldi	r22, 0x04	; 4
    47b4:	40 e0       	ldi	r20, 0x00	; 0
    47b6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    47ba:	83 e0       	ldi	r24, 0x03	; 3
    47bc:	65 e0       	ldi	r22, 0x05	; 5
    47be:	40 e0       	ldi	r20, 0x00	; 0
    47c0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	08 95       	ret

000047ca <changeSpeed2>:
void changeSpeed2(unsigned char x)
{
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	0f 92       	push	r0
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
    47d4:	89 83       	std	Y+1, r24	; 0x01

	PWM_TIMER2_Start(x);
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
    47d8:	88 2f       	mov	r24, r24
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0e 94 aa 12 	call	0x2554	; 0x2554 <PWM_TIMER2_Start>

}
    47e0:	0f 90       	pop	r0
    47e2:	cf 91       	pop	r28
    47e4:	df 91       	pop	r29
    47e6:	08 95       	ret

000047e8 <rotate2_cw>:
void rotate2_cw()
{
    47e8:	df 93       	push	r29
    47ea:	cf 93       	push	r28
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_HIGH);
    47f0:	83 e0       	ldi	r24, 0x03	; 3
    47f2:	64 e0       	ldi	r22, 0x04	; 4
    47f4:	41 e0       	ldi	r20, 0x01	; 1
    47f6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    47fa:	83 e0       	ldi	r24, 0x03	; 3
    47fc:	65 e0       	ldi	r22, 0x05	; 5
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <rotate2_acw>:
void rotate2_acw()
{
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    4812:	83 e0       	ldi	r24, 0x03	; 3
    4814:	64 e0       	ldi	r22, 0x04	; 4
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_HIGH);
    481c:	83 e0       	ldi	r24, 0x03	; 3
    481e:	65 e0       	ldi	r22, 0x05	; 5
    4820:	41 e0       	ldi	r20, 0x01	; 1
    4822:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4826:	cf 91       	pop	r28
    4828:	df 91       	pop	r29
    482a:	08 95       	ret

0000482c <motor2_stop>:
void motor2_stop()
{
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Motor_IN1_PORT_ID, Motor_IN1_PIN_ID, LOGIC_LOW);
    4834:	83 e0       	ldi	r24, 0x03	; 3
    4836:	64 e0       	ldi	r22, 0x04	; 4
    4838:	40 e0       	ldi	r20, 0x00	; 0
    483a:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
	GPIO_writePin(Motor_IN2_PORT_ID,  Motor_IN2_PIN_ID, LOGIC_LOW);
    483e:	83 e0       	ldi	r24, 0x03	; 3
    4840:	65 e0       	ldi	r22, 0x05	; 5
    4842:	40 e0       	ldi	r20, 0x00	; 0
    4844:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4848:	cf 91       	pop	r28
    484a:	df 91       	pop	r29
    484c:	08 95       	ret

0000484e <Ultrasonic_edgeProcessing>:
float64 distance=0;
uint8 g_edgeCount = 0;
uint16 g_timeHigh=0;

void Ultrasonic_edgeProcessing(void)
{
    484e:	df 93       	push	r29
    4850:	cf 93       	push	r28
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    4856:	80 91 80 01 	lds	r24, 0x0180
    485a:	8f 5f       	subi	r24, 0xFF	; 255
    485c:	80 93 80 01 	sts	0x0180, r24
	if(g_edgeCount == 1)
    4860:	80 91 80 01 	lds	r24, 0x0180
    4864:	81 30       	cpi	r24, 0x01	; 1
    4866:	39 f4       	brne	.+14     	; 0x4876 <Ultrasonic_edgeProcessing+0x28>
	{
		Icu_clearTimerValue();
    4868:	0e 94 3b 11 	call	0x2276	; 0x2276 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	0e 94 1c 11 	call	0x2238	; 0x2238 <Icu_setEdgeDetectionType>
    4874:	10 c0       	rjmp	.+32     	; 0x4896 <Ultrasonic_edgeProcessing+0x48>
	}
	else if(g_edgeCount == 2)
    4876:	80 91 80 01 	lds	r24, 0x0180
    487a:	82 30       	cpi	r24, 0x02	; 2
    487c:	61 f4       	brne	.+24     	; 0x4896 <Ultrasonic_edgeProcessing+0x48>
	{
		g_timeHigh = TIMER1_ICU_GetTCNT1();
    487e:	0e 94 ef 10 	call	0x21de	; 0x21de <TIMER1_ICU_GetTCNT1>
    4882:	90 93 82 01 	sts	0x0182, r25
    4886:	80 93 81 01 	sts	0x0181, r24
		Icu_setEdgeDetectionType(RISING);
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 1c 11 	call	0x2238	; 0x2238 <Icu_setEdgeDetectionType>
		g_edgeCount=0;
    4892:	10 92 80 01 	sts	0x0180, r1
	}

}
    4896:	cf 91       	pop	r28
    4898:	df 91       	pop	r29
    489a:	08 95       	ret

0000489c <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    489c:	df 93       	push	r29
    489e:	cf 93       	push	r28
    48a0:	cd b7       	in	r28, 0x3d	; 61
    48a2:	de b7       	in	r29, 0x3e	; 62
    48a4:	28 97       	sbiw	r28, 0x08	; 8
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	cd bf       	out	0x3d, r28	; 61
	/* Create configuration structure for ICU driver */
	Timer1_ConfigType Icu_Config_ultrasonic = {timer1_PRESCALAR_CLK8,RISING};
    48b0:	88 e0       	ldi	r24, 0x08	; 8
    48b2:	fe 01       	movw	r30, r28
    48b4:	31 96       	adiw	r30, 0x01	; 1
    48b6:	df 01       	movw	r26, r30
    48b8:	98 2f       	mov	r25, r24
    48ba:	1d 92       	st	X+, r1
    48bc:	9a 95       	dec	r25
    48be:	e9 f7       	brne	.-6      	; 0x48ba <Ultrasonic_init+0x1e>
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	9a 83       	std	Y+2, r25	; 0x02
    48c6:	89 83       	std	Y+1, r24	; 0x01
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	9c 83       	std	Y+4, r25	; 0x04
    48ce:	8b 83       	std	Y+3, r24	; 0x03
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    48d0:	87 e2       	ldi	r24, 0x27	; 39
    48d2:	94 e2       	ldi	r25, 0x24	; 36
    48d4:	0e 94 0a 11 	call	0x2214	; 0x2214 <Icu_setCallBack>
	TIMER1_ICU_Enable(&Icu_Config_ultrasonic);
    48d8:	ce 01       	movw	r24, r28
    48da:	01 96       	adiw	r24, 0x01	; 1
    48dc:	0e 94 9a 10 	call	0x2134	; 0x2134 <TIMER1_ICU_Enable>
	GPIO_setupPinDirection(TRIG_PORT_ID, TRIG_PIN_ID, PIN_OUTPUT);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	65 e0       	ldi	r22, 0x05	; 5
    48e4:	41 e0       	ldi	r20, 0x01	; 1
    48e6:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_setupPinDirection>
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_LOW);
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	65 e0       	ldi	r22, 0x05	; 5
    48ee:	40 e0       	ldi	r20, 0x00	; 0
    48f0:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>

}
    48f4:	28 96       	adiw	r28, 0x08	; 8
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	cf 91       	pop	r28
    4902:	df 91       	pop	r29
    4904:	08 95       	ret

00004906 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    4906:	df 93       	push	r29
    4908:	cf 93       	push	r28
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	68 97       	sbiw	r28, 0x18	; 24
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_HIGH);
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	65 e0       	ldi	r22, 0x05	; 5
    491e:	41 e0       	ldi	r20, 0x01	; 1
    4920:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	a0 e2       	ldi	r26, 0x20	; 32
    492a:	b1 e4       	ldi	r27, 0x41	; 65
    492c:	8d 8b       	std	Y+21, r24	; 0x15
    492e:	9e 8b       	std	Y+22, r25	; 0x16
    4930:	af 8b       	std	Y+23, r26	; 0x17
    4932:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4934:	6d 89       	ldd	r22, Y+21	; 0x15
    4936:	7e 89       	ldd	r23, Y+22	; 0x16
    4938:	8f 89       	ldd	r24, Y+23	; 0x17
    493a:	98 8d       	ldd	r25, Y+24	; 0x18
    493c:	2b ea       	ldi	r18, 0xAB	; 171
    493e:	3a ea       	ldi	r19, 0xAA	; 170
    4940:	4a e2       	ldi	r20, 0x2A	; 42
    4942:	50 e4       	ldi	r21, 0x40	; 64
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	89 8b       	std	Y+17, r24	; 0x11
    494e:	9a 8b       	std	Y+18, r25	; 0x12
    4950:	ab 8b       	std	Y+19, r26	; 0x13
    4952:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4954:	69 89       	ldd	r22, Y+17	; 0x11
    4956:	7a 89       	ldd	r23, Y+18	; 0x12
    4958:	8b 89       	ldd	r24, Y+19	; 0x13
    495a:	9c 89       	ldd	r25, Y+20	; 0x14
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e8       	ldi	r20, 0x80	; 128
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4968:	88 23       	and	r24, r24
    496a:	1c f4       	brge	.+6      	; 0x4972 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	88 8b       	std	Y+16, r24	; 0x10
    4970:	91 c0       	rjmp	.+290    	; 0x4a94 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    4972:	69 89       	ldd	r22, Y+17	; 0x11
    4974:	7a 89       	ldd	r23, Y+18	; 0x12
    4976:	8b 89       	ldd	r24, Y+19	; 0x13
    4978:	9c 89       	ldd	r25, Y+20	; 0x14
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	4f e7       	ldi	r20, 0x7F	; 127
    4980:	53 e4       	ldi	r21, 0x43	; 67
    4982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4986:	18 16       	cp	r1, r24
    4988:	0c f0       	brlt	.+2      	; 0x498c <Ultrasonic_Trigger+0x86>
    498a:	7b c0       	rjmp	.+246    	; 0x4a82 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    498c:	6d 89       	ldd	r22, Y+21	; 0x15
    498e:	7e 89       	ldd	r23, Y+22	; 0x16
    4990:	8f 89       	ldd	r24, Y+23	; 0x17
    4992:	98 8d       	ldd	r25, Y+24	; 0x18
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	4a e7       	ldi	r20, 0x7A	; 122
    499a:	54 e4       	ldi	r21, 0x44	; 68
    499c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	8c 87       	std	Y+12, r24	; 0x0c
    49a6:	9d 87       	std	Y+13, r25	; 0x0d
    49a8:	ae 87       	std	Y+14, r26	; 0x0e
    49aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    49ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    49b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    49b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	4a ef       	ldi	r20, 0xFA	; 250
    49ba:	54 e4       	ldi	r21, 0x44	; 68
    49bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c0:	dc 01       	movw	r26, r24
    49c2:	cb 01       	movw	r24, r22
    49c4:	88 87       	std	Y+8, r24	; 0x08
    49c6:	99 87       	std	Y+9, r25	; 0x09
    49c8:	aa 87       	std	Y+10, r26	; 0x0a
    49ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    49cc:	68 85       	ldd	r22, Y+8	; 0x08
    49ce:	79 85       	ldd	r23, Y+9	; 0x09
    49d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	40 e8       	ldi	r20, 0x80	; 128
    49da:	5f e3       	ldi	r21, 0x3F	; 63
    49dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e0:	88 23       	and	r24, r24
    49e2:	2c f4       	brge	.+10     	; 0x49ee <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	9f 83       	std	Y+7, r25	; 0x07
    49ea:	8e 83       	std	Y+6, r24	; 0x06
    49ec:	3f c0       	rjmp	.+126    	; 0x4a6c <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    49ee:	68 85       	ldd	r22, Y+8	; 0x08
    49f0:	79 85       	ldd	r23, Y+9	; 0x09
    49f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	3f ef       	ldi	r19, 0xFF	; 255
    49fa:	4f e7       	ldi	r20, 0x7F	; 127
    49fc:	57 e4       	ldi	r21, 0x47	; 71
    49fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a02:	18 16       	cp	r1, r24
    4a04:	4c f5       	brge	.+82     	; 0x4a58 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a06:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a08:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e2       	ldi	r20, 0x20	; 32
    4a14:	51 e4       	ldi	r21, 0x41	; 65
    4a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	bc 01       	movw	r22, r24
    4a20:	cd 01       	movw	r24, r26
    4a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a26:	dc 01       	movw	r26, r24
    4a28:	cb 01       	movw	r24, r22
    4a2a:	9f 83       	std	Y+7, r25	; 0x07
    4a2c:	8e 83       	std	Y+6, r24	; 0x06
    4a2e:	0f c0       	rjmp	.+30     	; 0x4a4e <Ultrasonic_Trigger+0x148>
    4a30:	88 ec       	ldi	r24, 0xC8	; 200
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	9d 83       	std	Y+5, r25	; 0x05
    4a36:	8c 83       	std	Y+4, r24	; 0x04
    4a38:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a3c:	01 97       	sbiw	r24, 0x01	; 1
    4a3e:	f1 f7       	brne	.-4      	; 0x4a3c <Ultrasonic_Trigger+0x136>
    4a40:	9d 83       	std	Y+5, r25	; 0x05
    4a42:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a44:	8e 81       	ldd	r24, Y+6	; 0x06
    4a46:	9f 81       	ldd	r25, Y+7	; 0x07
    4a48:	01 97       	sbiw	r24, 0x01	; 1
    4a4a:	9f 83       	std	Y+7, r25	; 0x07
    4a4c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a50:	9f 81       	ldd	r25, Y+7	; 0x07
    4a52:	00 97       	sbiw	r24, 0x00	; 0
    4a54:	69 f7       	brne	.-38     	; 0x4a30 <Ultrasonic_Trigger+0x12a>
    4a56:	24 c0       	rjmp	.+72     	; 0x4aa0 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a58:	68 85       	ldd	r22, Y+8	; 0x08
    4a5a:	79 85       	ldd	r23, Y+9	; 0x09
    4a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	9f 83       	std	Y+7, r25	; 0x07
    4a6a:	8e 83       	std	Y+6, r24	; 0x06
    4a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a70:	9b 83       	std	Y+3, r25	; 0x03
    4a72:	8a 83       	std	Y+2, r24	; 0x02
    4a74:	8a 81       	ldd	r24, Y+2	; 0x02
    4a76:	9b 81       	ldd	r25, Y+3	; 0x03
    4a78:	01 97       	sbiw	r24, 0x01	; 1
    4a7a:	f1 f7       	brne	.-4      	; 0x4a78 <Ultrasonic_Trigger+0x172>
    4a7c:	9b 83       	std	Y+3, r25	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	0f c0       	rjmp	.+30     	; 0x4aa0 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a82:	69 89       	ldd	r22, Y+17	; 0x11
    4a84:	7a 89       	ldd	r23, Y+18	; 0x12
    4a86:	8b 89       	ldd	r24, Y+19	; 0x13
    4a88:	9c 89       	ldd	r25, Y+20	; 0x14
    4a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	88 8b       	std	Y+16, r24	; 0x10
    4a94:	88 89       	ldd	r24, Y+16	; 0x10
    4a96:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	8a 95       	dec	r24
    4a9c:	f1 f7       	brne	.-4      	; 0x4a9a <Ultrasonic_Trigger+0x194>
    4a9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIG_PORT_ID, TRIG_PIN_ID,LOGIC_LOW);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	65 e0       	ldi	r22, 0x05	; 5
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 1e 08 	call	0x103c	; 0x103c <GPIO_writePin>
}
    4aaa:	68 96       	adiw	r28, 0x18	; 24
    4aac:	0f b6       	in	r0, 0x3f	; 63
    4aae:	f8 94       	cli
    4ab0:	de bf       	out	0x3e, r29	; 62
    4ab2:	0f be       	out	0x3f, r0	; 63
    4ab4:	cd bf       	out	0x3d, r28	; 61
    4ab6:	cf 91       	pop	r28
    4ab8:	df 91       	pop	r29
    4aba:	08 95       	ret

00004abc <Ultrasonic_readDistance>:
 uint16 Ultrasonic_readDistance(void)
 {
    4abc:	df 93       	push	r29
    4abe:	cf 93       	push	r28
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
	 Ultrasonic_Trigger();
    4ac4:	0e 94 83 24 	call	0x4906	; 0x4906 <Ultrasonic_Trigger>
= 0.017 x (TIMER value) cm
= (TIMER value) / 58.8 cm
Note TIMER VALUE is the pulse width time calculated by the ICU
*/

	 distance=(float)g_timeHigh/57.5;
    4ac8:	80 91 81 01 	lds	r24, 0x0181
    4acc:	90 91 82 01 	lds	r25, 0x0182
    4ad0:	cc 01       	movw	r24, r24
    4ad2:	a0 e0       	ldi	r26, 0x00	; 0
    4ad4:	b0 e0       	ldi	r27, 0x00	; 0
    4ad6:	bc 01       	movw	r22, r24
    4ad8:	cd 01       	movw	r24, r26
    4ada:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	46 e6       	ldi	r20, 0x66	; 102
    4aec:	52 e4       	ldi	r21, 0x42	; 66
    4aee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	80 93 7c 01 	sts	0x017C, r24
    4afa:	90 93 7d 01 	sts	0x017D, r25
    4afe:	a0 93 7e 01 	sts	0x017E, r26
    4b02:	b0 93 7f 01 	sts	0x017F, r27
	 return distance;
    4b06:	80 91 7c 01 	lds	r24, 0x017C
    4b0a:	90 91 7d 01 	lds	r25, 0x017D
    4b0e:	a0 91 7e 01 	lds	r26, 0x017E
    4b12:	b0 91 7f 01 	lds	r27, 0x017F
    4b16:	bc 01       	movw	r22, r24
    4b18:	cd 01       	movw	r24, r26
    4b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
 }
    4b22:	cf 91       	pop	r28
    4b24:	df 91       	pop	r29
    4b26:	08 95       	ret

00004b28 <__vector_1>:
uint8 direction=0;



ISR(INT0_vect)
{
    4b28:	1f 92       	push	r1
    4b2a:	0f 92       	push	r0
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	0f 92       	push	r0
    4b30:	11 24       	eor	r1, r1
    4b32:	8f 93       	push	r24
    4b34:	df 93       	push	r29
    4b36:	cf 93       	push	r28
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
	count_speed++;
    4b3c:	80 91 83 01 	lds	r24, 0x0183
    4b40:	8f 5f       	subi	r24, 0xFF	; 255
    4b42:	80 93 83 01 	sts	0x0183, r24
	if (count_speed>=10)
    4b46:	80 91 83 01 	lds	r24, 0x0183
    4b4a:	8a 30       	cpi	r24, 0x0A	; 10
    4b4c:	18 f0       	brcs	.+6      	; 0x4b54 <__vector_1+0x2c>
	{
		count_speed=10;
    4b4e:	8a e0       	ldi	r24, 0x0A	; 10
    4b50:	80 93 83 01 	sts	0x0183, r24
	}
}
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	8f 91       	pop	r24
    4b5a:	0f 90       	pop	r0
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	0f 90       	pop	r0
    4b60:	1f 90       	pop	r1
    4b62:	18 95       	reti

00004b64 <__vector_2>:
ISR(INT1_vect)
{
    4b64:	1f 92       	push	r1
    4b66:	0f 92       	push	r0
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	0f 92       	push	r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	8f 93       	push	r24
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
	if (count_speed==0)
    4b78:	80 91 83 01 	lds	r24, 0x0183
    4b7c:	88 23       	and	r24, r24
    4b7e:	19 f4       	brne	.+6      	; 0x4b86 <__vector_2+0x22>
	{
		count_speed=1;
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	80 93 83 01 	sts	0x0183, r24
	}
	count_speed--;
    4b86:	80 91 83 01 	lds	r24, 0x0183
    4b8a:	81 50       	subi	r24, 0x01	; 1
    4b8c:	80 93 83 01 	sts	0x0183, r24

}
    4b90:	cf 91       	pop	r28
    4b92:	df 91       	pop	r29
    4b94:	8f 91       	pop	r24
    4b96:	0f 90       	pop	r0
    4b98:	0f be       	out	0x3f, r0	; 63
    4b9a:	0f 90       	pop	r0
    4b9c:	1f 90       	pop	r1
    4b9e:	18 95       	reti

00004ba0 <__vector_3>:
ISR(INT2_vect)
{
    4ba0:	1f 92       	push	r1
    4ba2:	0f 92       	push	r0
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	0f 92       	push	r0
    4ba8:	11 24       	eor	r1, r1
    4baa:	8f 93       	push	r24
    4bac:	df 93       	push	r29
    4bae:	cf 93       	push	r28
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
	if (count_speed==0)
    4bb4:	80 91 83 01 	lds	r24, 0x0183
    4bb8:	88 23       	and	r24, r24
    4bba:	51 f4       	brne	.+20     	; 0x4bd0 <__vector_3+0x30>
	{
		if (direction==forward)
    4bbc:	80 91 84 01 	lds	r24, 0x0184
    4bc0:	88 23       	and	r24, r24
    4bc2:	21 f4       	brne	.+8      	; 0x4bcc <__vector_3+0x2c>
		{
			direction=backword;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	80 93 84 01 	sts	0x0184, r24
    4bca:	02 c0       	rjmp	.+4      	; 0x4bd0 <__vector_3+0x30>
		}
		else
		{
			direction=forward;
    4bcc:	10 92 84 01 	sts	0x0184, r1
		}
	}


}
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	8f 91       	pop	r24
    4bd6:	0f 90       	pop	r0
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	0f 90       	pop	r0
    4bdc:	1f 90       	pop	r1
    4bde:	18 95       	reti

00004be0 <main>:
int main()
{
    4be0:	df 93       	push	r29
    4be2:	cf 93       	push	r28
    4be4:	cd b7       	in	r28, 0x3d	; 61
    4be6:	de b7       	in	r29, 0x3e	; 62
    4be8:	67 97       	sbiw	r28, 0x17	; 23
    4bea:	0f b6       	in	r0, 0x3f	; 63
    4bec:	f8 94       	cli
    4bee:	de bf       	out	0x3e, r29	; 62
    4bf0:	0f be       	out	0x3f, r0	; 63
    4bf2:	cd bf       	out	0x3d, r28	; 61
	Timer0_ConfigType config0={0,0,TIMER0_FAST_PWM_MODE,timer0_PRESCALAR_CLK8};
    4bf4:	ce 01       	movw	r24, r28
    4bf6:	02 96       	adiw	r24, 0x02	; 2
    4bf8:	9f 87       	std	Y+15, r25	; 0x0f
    4bfa:	8e 87       	std	Y+14, r24	; 0x0e
    4bfc:	ee e6       	ldi	r30, 0x6E	; 110
    4bfe:	f1 e0       	ldi	r31, 0x01	; 1
    4c00:	f9 8b       	std	Y+17, r31	; 0x11
    4c02:	e8 8b       	std	Y+16, r30	; 0x10
    4c04:	f6 e0       	ldi	r31, 0x06	; 6
    4c06:	fa 8b       	std	Y+18, r31	; 0x12
    4c08:	e8 89       	ldd	r30, Y+16	; 0x10
    4c0a:	f9 89       	ldd	r31, Y+17	; 0x11
    4c0c:	00 80       	ld	r0, Z
    4c0e:	88 89       	ldd	r24, Y+16	; 0x10
    4c10:	99 89       	ldd	r25, Y+17	; 0x11
    4c12:	01 96       	adiw	r24, 0x01	; 1
    4c14:	99 8b       	std	Y+17, r25	; 0x11
    4c16:	88 8b       	std	Y+16, r24	; 0x10
    4c18:	ee 85       	ldd	r30, Y+14	; 0x0e
    4c1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    4c1c:	00 82       	st	Z, r0
    4c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c20:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	9f 87       	std	Y+15, r25	; 0x0f
    4c26:	8e 87       	std	Y+14, r24	; 0x0e
    4c28:	9a 89       	ldd	r25, Y+18	; 0x12
    4c2a:	91 50       	subi	r25, 0x01	; 1
    4c2c:	9a 8b       	std	Y+18, r25	; 0x12
    4c2e:	ea 89       	ldd	r30, Y+18	; 0x12
    4c30:	ee 23       	and	r30, r30
    4c32:	51 f7       	brne	.-44     	; 0x4c08 <main+0x28>
	Timer2_ConfigType config2={0,250,TIMER2_COMPARE_MODE,timer2_PRESCALAR_CLK64};
    4c34:	ce 01       	movw	r24, r28
    4c36:	08 96       	adiw	r24, 0x08	; 8
    4c38:	9c 8b       	std	Y+20, r25	; 0x14
    4c3a:	8b 8b       	std	Y+19, r24	; 0x13
    4c3c:	e8 e6       	ldi	r30, 0x68	; 104
    4c3e:	f1 e0       	ldi	r31, 0x01	; 1
    4c40:	fe 8b       	std	Y+22, r31	; 0x16
    4c42:	ed 8b       	std	Y+21, r30	; 0x15
    4c44:	f6 e0       	ldi	r31, 0x06	; 6
    4c46:	ff 8b       	std	Y+23, r31	; 0x17
    4c48:	ed 89       	ldd	r30, Y+21	; 0x15
    4c4a:	fe 89       	ldd	r31, Y+22	; 0x16
    4c4c:	00 80       	ld	r0, Z
    4c4e:	8d 89       	ldd	r24, Y+21	; 0x15
    4c50:	9e 89       	ldd	r25, Y+22	; 0x16
    4c52:	01 96       	adiw	r24, 0x01	; 1
    4c54:	9e 8b       	std	Y+22, r25	; 0x16
    4c56:	8d 8b       	std	Y+21, r24	; 0x15
    4c58:	eb 89       	ldd	r30, Y+19	; 0x13
    4c5a:	fc 89       	ldd	r31, Y+20	; 0x14
    4c5c:	00 82       	st	Z, r0
    4c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c60:	9c 89       	ldd	r25, Y+20	; 0x14
    4c62:	01 96       	adiw	r24, 0x01	; 1
    4c64:	9c 8b       	std	Y+20, r25	; 0x14
    4c66:	8b 8b       	std	Y+19, r24	; 0x13
    4c68:	9f 89       	ldd	r25, Y+23	; 0x17
    4c6a:	91 50       	subi	r25, 0x01	; 1
    4c6c:	9f 8b       	std	Y+23, r25	; 0x17
    4c6e:	ef 89       	ldd	r30, Y+23	; 0x17
    4c70:	ee 23       	and	r30, r30
    4c72:	51 f7       	brne	.-44     	; 0x4c48 <main+0x68>
	DDRC = 0x0F;
    4c74:	e4 e3       	ldi	r30, 0x34	; 52
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	8f e0       	ldi	r24, 0x0F	; 15
    4c7a:	80 83       	st	Z, r24
	PORTC &= 0xF0;
    4c7c:	a5 e3       	ldi	r26, 0x35	; 53
    4c7e:	b0 e0       	ldi	r27, 0x00	; 0
    4c80:	e5 e3       	ldi	r30, 0x35	; 53
    4c82:	f0 e0       	ldi	r31, 0x00	; 0
    4c84:	80 81       	ld	r24, Z
    4c86:	80 7f       	andi	r24, 0xF0	; 240
    4c88:	8c 93       	st	X, r24
	DDRA =0X3F;
    4c8a:	ea e3       	ldi	r30, 0x3A	; 58
    4c8c:	f0 e0       	ldi	r31, 0x00	; 0
    4c8e:	8f e3       	ldi	r24, 0x3F	; 63
    4c90:	80 83       	st	Z, r24
	PORTA &=0xC0;
    4c92:	ab e3       	ldi	r26, 0x3B	; 59
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	eb e3       	ldi	r30, 0x3B	; 59
    4c98:	f0 e0       	ldi	r31, 0x00	; 0
    4c9a:	80 81       	ld	r24, Z
    4c9c:	80 7c       	andi	r24, 0xC0	; 192
    4c9e:	8c 93       	st	X, r24
	uint8 flag2;
	INT0_Init();
    4ca0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <INT0_Init>
	INT1_Init();
    4ca4:	0e 94 92 0a 	call	0x1524	; 0x1524 <INT1_Init>
	INT2_Init();
    4ca8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <INT2_Init>
	motor_init();
    4cac:	0e 94 6d 23 	call	0x46da	; 0x46da <motor_init>
	GIE_Enabled();
    4cb0:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_Enabled>
	UART_init(38400);
    4cb4:	60 e0       	ldi	r22, 0x00	; 0
    4cb6:	76 e9       	ldi	r23, 0x96	; 150
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 10 14 	call	0x2820	; 0x2820 <UART_init>
	TIMER0_init(&config0);
    4cc0:	ce 01       	movw	r24, r28
    4cc2:	02 96       	adiw	r24, 0x02	; 2
    4cc4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <TIMER0_init>
	TIMER2_init(&config2);
    4cc8:	ce 01       	movw	r24, r28
    4cca:	08 96       	adiw	r24, 0x08	; 8
    4ccc:	0e 94 46 11 	call	0x228c	; 0x228c <TIMER2_init>
	delay2(30);
    4cd0:	6e e1       	ldi	r22, 0x1E	; 30
    4cd2:	70 e0       	ldi	r23, 0x00	; 0
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	0e 94 40 12 	call	0x2480	; 0x2480 <delay2>
	GIE_Enabled();
    4cdc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_Enabled>
	flag=UART_recieveByte();
    4ce0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_recieveByte>
    4ce4:	80 93 91 01 	sts	0x0191, r24
	while(1)
	{
		flag2=UART_recieveByte();
    4ce8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_recieveByte>
    4cec:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(direction);
    4cee:	80 91 84 01 	lds	r24, 0x0184
    4cf2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_sendByte>
		if (flag2==0)
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
    4cf8:	88 23       	and	r24, r24
    4cfa:	b9 f4       	brne	.+46     	; 0x4d2a <main+0x14a>
		{
			count_speed=0;
    4cfc:	10 92 83 01 	sts	0x0183, r1
			UART_sendByte(count_speed);
    4d00:	80 91 83 01 	lds	r24, 0x0183
    4d04:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_sendByte>
			changeSpeed(count_speed*10);
    4d08:	80 91 83 01 	lds	r24, 0x0183
    4d0c:	88 2f       	mov	r24, r24
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	9c 01       	movw	r18, r24
    4d12:	22 0f       	add	r18, r18
    4d14:	33 1f       	adc	r19, r19
    4d16:	c9 01       	movw	r24, r18
    4d18:	88 0f       	add	r24, r24
    4d1a:	99 1f       	adc	r25, r25
    4d1c:	88 0f       	add	r24, r24
    4d1e:	99 1f       	adc	r25, r25
    4d20:	82 0f       	add	r24, r18
    4d22:	93 1f       	adc	r25, r19
    4d24:	0e 94 88 23 	call	0x4710	; 0x4710 <changeSpeed>
    4d28:	df cf       	rjmp	.-66     	; 0x4ce8 <main+0x108>
		}
		else
		{
			if (direction==forward)
    4d2a:	80 91 84 01 	lds	r24, 0x0184
    4d2e:	88 23       	and	r24, r24
    4d30:	19 f4       	brne	.+6      	; 0x4d38 <main+0x158>
			{
				rotate_cw();
    4d32:	0e 94 97 23 	call	0x472e	; 0x472e <rotate_cw>
    4d36:	06 c0       	rjmp	.+12     	; 0x4d44 <main+0x164>
			}
			else if (direction==backword)
    4d38:	80 91 84 01 	lds	r24, 0x0184
    4d3c:	81 30       	cpi	r24, 0x01	; 1
    4d3e:	11 f4       	brne	.+4      	; 0x4d44 <main+0x164>
			{
				rotate_acw();
    4d40:	0e 94 a8 23 	call	0x4750	; 0x4750 <rotate_acw>
			}
			changeSpeed(count_speed*10);
    4d44:	80 91 83 01 	lds	r24, 0x0183
    4d48:	88 2f       	mov	r24, r24
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	9c 01       	movw	r18, r24
    4d4e:	22 0f       	add	r18, r18
    4d50:	33 1f       	adc	r19, r19
    4d52:	c9 01       	movw	r24, r18
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	88 0f       	add	r24, r24
    4d5a:	99 1f       	adc	r25, r25
    4d5c:	82 0f       	add	r24, r18
    4d5e:	93 1f       	adc	r25, r19
    4d60:	0e 94 88 23 	call	0x4710	; 0x4710 <changeSpeed>
			UART_sendByte(count_speed);
    4d64:	80 91 83 01 	lds	r24, 0x0183
    4d68:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_sendByte>
    4d6c:	bd cf       	rjmp	.-134    	; 0x4ce8 <main+0x108>

00004d6e <__udivmodhi4>:
    4d6e:	aa 1b       	sub	r26, r26
    4d70:	bb 1b       	sub	r27, r27
    4d72:	51 e1       	ldi	r21, 0x11	; 17
    4d74:	07 c0       	rjmp	.+14     	; 0x4d84 <__udivmodhi4_ep>

00004d76 <__udivmodhi4_loop>:
    4d76:	aa 1f       	adc	r26, r26
    4d78:	bb 1f       	adc	r27, r27
    4d7a:	a6 17       	cp	r26, r22
    4d7c:	b7 07       	cpc	r27, r23
    4d7e:	10 f0       	brcs	.+4      	; 0x4d84 <__udivmodhi4_ep>
    4d80:	a6 1b       	sub	r26, r22
    4d82:	b7 0b       	sbc	r27, r23

00004d84 <__udivmodhi4_ep>:
    4d84:	88 1f       	adc	r24, r24
    4d86:	99 1f       	adc	r25, r25
    4d88:	5a 95       	dec	r21
    4d8a:	a9 f7       	brne	.-22     	; 0x4d76 <__udivmodhi4_loop>
    4d8c:	80 95       	com	r24
    4d8e:	90 95       	com	r25
    4d90:	bc 01       	movw	r22, r24
    4d92:	cd 01       	movw	r24, r26
    4d94:	08 95       	ret

00004d96 <__udivmodsi4>:
    4d96:	a1 e2       	ldi	r26, 0x21	; 33
    4d98:	1a 2e       	mov	r1, r26
    4d9a:	aa 1b       	sub	r26, r26
    4d9c:	bb 1b       	sub	r27, r27
    4d9e:	fd 01       	movw	r30, r26
    4da0:	0d c0       	rjmp	.+26     	; 0x4dbc <__udivmodsi4_ep>

00004da2 <__udivmodsi4_loop>:
    4da2:	aa 1f       	adc	r26, r26
    4da4:	bb 1f       	adc	r27, r27
    4da6:	ee 1f       	adc	r30, r30
    4da8:	ff 1f       	adc	r31, r31
    4daa:	a2 17       	cp	r26, r18
    4dac:	b3 07       	cpc	r27, r19
    4dae:	e4 07       	cpc	r30, r20
    4db0:	f5 07       	cpc	r31, r21
    4db2:	20 f0       	brcs	.+8      	; 0x4dbc <__udivmodsi4_ep>
    4db4:	a2 1b       	sub	r26, r18
    4db6:	b3 0b       	sbc	r27, r19
    4db8:	e4 0b       	sbc	r30, r20
    4dba:	f5 0b       	sbc	r31, r21

00004dbc <__udivmodsi4_ep>:
    4dbc:	66 1f       	adc	r22, r22
    4dbe:	77 1f       	adc	r23, r23
    4dc0:	88 1f       	adc	r24, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	1a 94       	dec	r1
    4dc6:	69 f7       	brne	.-38     	; 0x4da2 <__udivmodsi4_loop>
    4dc8:	60 95       	com	r22
    4dca:	70 95       	com	r23
    4dcc:	80 95       	com	r24
    4dce:	90 95       	com	r25
    4dd0:	9b 01       	movw	r18, r22
    4dd2:	ac 01       	movw	r20, r24
    4dd4:	bd 01       	movw	r22, r26
    4dd6:	cf 01       	movw	r24, r30
    4dd8:	08 95       	ret

00004dda <__prologue_saves__>:
    4dda:	2f 92       	push	r2
    4ddc:	3f 92       	push	r3
    4dde:	4f 92       	push	r4
    4de0:	5f 92       	push	r5
    4de2:	6f 92       	push	r6
    4de4:	7f 92       	push	r7
    4de6:	8f 92       	push	r8
    4de8:	9f 92       	push	r9
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	ca 1b       	sub	r28, r26
    4e04:	db 0b       	sbc	r29, r27
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	09 94       	ijmp

00004e12 <__epilogue_restores__>:
    4e12:	2a 88       	ldd	r2, Y+18	; 0x12
    4e14:	39 88       	ldd	r3, Y+17	; 0x11
    4e16:	48 88       	ldd	r4, Y+16	; 0x10
    4e18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e24:	b9 84       	ldd	r11, Y+9	; 0x09
    4e26:	c8 84       	ldd	r12, Y+8	; 0x08
    4e28:	df 80       	ldd	r13, Y+7	; 0x07
    4e2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4e30:	1b 81       	ldd	r17, Y+3	; 0x03
    4e32:	aa 81       	ldd	r26, Y+2	; 0x02
    4e34:	b9 81       	ldd	r27, Y+1	; 0x01
    4e36:	ce 0f       	add	r28, r30
    4e38:	d1 1d       	adc	r29, r1
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	f8 94       	cli
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	ed 01       	movw	r28, r26
    4e46:	08 95       	ret

00004e48 <itoa>:
    4e48:	fb 01       	movw	r30, r22
    4e4a:	9f 01       	movw	r18, r30
    4e4c:	e8 94       	clt
    4e4e:	42 30       	cpi	r20, 0x02	; 2
    4e50:	c4 f0       	brlt	.+48     	; 0x4e82 <itoa+0x3a>
    4e52:	45 32       	cpi	r20, 0x25	; 37
    4e54:	b4 f4       	brge	.+44     	; 0x4e82 <itoa+0x3a>
    4e56:	4a 30       	cpi	r20, 0x0A	; 10
    4e58:	29 f4       	brne	.+10     	; 0x4e64 <itoa+0x1c>
    4e5a:	97 fb       	bst	r25, 7
    4e5c:	1e f4       	brtc	.+6      	; 0x4e64 <itoa+0x1c>
    4e5e:	90 95       	com	r25
    4e60:	81 95       	neg	r24
    4e62:	9f 4f       	sbci	r25, 0xFF	; 255
    4e64:	64 2f       	mov	r22, r20
    4e66:	77 27       	eor	r23, r23
    4e68:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <__udivmodhi4>
    4e6c:	80 5d       	subi	r24, 0xD0	; 208
    4e6e:	8a 33       	cpi	r24, 0x3A	; 58
    4e70:	0c f0       	brlt	.+2      	; 0x4e74 <itoa+0x2c>
    4e72:	89 5d       	subi	r24, 0xD9	; 217
    4e74:	81 93       	st	Z+, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	00 97       	sbiw	r24, 0x00	; 0
    4e7a:	a1 f7       	brne	.-24     	; 0x4e64 <itoa+0x1c>
    4e7c:	16 f4       	brtc	.+4      	; 0x4e82 <itoa+0x3a>
    4e7e:	5d e2       	ldi	r21, 0x2D	; 45
    4e80:	51 93       	st	Z+, r21
    4e82:	10 82       	st	Z, r1
    4e84:	c9 01       	movw	r24, r18
    4e86:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <strrev>

00004e8a <strrev>:
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	67 2f       	mov	r22, r23
    4e90:	71 91       	ld	r23, Z+
    4e92:	77 23       	and	r23, r23
    4e94:	e1 f7       	brne	.-8      	; 0x4e8e <strrev+0x4>
    4e96:	32 97       	sbiw	r30, 0x02	; 2
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <strrev+0x18>
    4e9a:	7c 91       	ld	r23, X
    4e9c:	6d 93       	st	X+, r22
    4e9e:	70 83       	st	Z, r23
    4ea0:	62 91       	ld	r22, -Z
    4ea2:	ae 17       	cp	r26, r30
    4ea4:	bf 07       	cpc	r27, r31
    4ea6:	c8 f3       	brcs	.-14     	; 0x4e9a <strrev+0x10>
    4ea8:	08 95       	ret

00004eaa <_exit>:
    4eaa:	f8 94       	cli

00004eac <__stop_program>:
    4eac:	ff cf       	rjmp	.-2      	; 0x4eac <__stop_program>
